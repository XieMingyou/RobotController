// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_proto3_arena.proto

#include "google/protobuf/unittest_proto3_arena.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForeignMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fimport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImportMessage_google_2fprotobuf_2funittest_5fimport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fimport_5fpublic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicImportMessage_google_2fprotobuf_2funittest_5fimport_5fpublic_2eproto;
namespace proto3_arena_unittest {
class TestAllTypes_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypes_NestedMessage> _instance;
} _TestAllTypes_NestedMessage_default_instance_;
class TestAllTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypes> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 oneof_uint32_;
  const ::proto3_arena_unittest::TestAllTypes_NestedMessage* oneof_nested_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
} _TestAllTypes_default_instance_;
class TestPackedTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPackedTypes> _instance;
} _TestPackedTypes_default_instance_;
class TestUnpackedTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestUnpackedTypes> _instance;
} _TestUnpackedTypes_default_instance_;
class NestedTestAllTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NestedTestAllTypes> _instance;
} _NestedTestAllTypes_default_instance_;
class ForeignMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForeignMessage> _instance;
} _ForeignMessage_default_instance_;
class TestEmptyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEmptyMessage> _instance;
} _TestEmptyMessage_default_instance_;
class TestPickleNestedMessage_NestedMessage_NestedNestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPickleNestedMessage_NestedMessage_NestedNestedMessage> _instance;
} _TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_;
class TestPickleNestedMessage_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPickleNestedMessage_NestedMessage> _instance;
} _TestPickleNestedMessage_NestedMessage_default_instance_;
class TestPickleNestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPickleNestedMessage> _instance;
} _TestPickleNestedMessage_default_instance_;
}  // namespace proto3_arena_unittest
static void InitDefaultsscc_info_ForeignMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_ForeignMessage_default_instance_;
    new (ptr) ::proto3_arena_unittest::ForeignMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::ForeignMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForeignMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForeignMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {}};

static void InitDefaultsscc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_NestedTestAllTypes_default_instance_;
    new (ptr) ::proto3_arena_unittest::NestedTestAllTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::NestedTestAllTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,}};

static void InitDefaultsscc_info_TestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_TestAllTypes_default_instance_;
    new (ptr) ::proto3_arena_unittest::TestAllTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::TestAllTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {
      &scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
      &scc_info_ForeignMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
      &scc_info_ImportMessage_google_2fprotobuf_2funittest_5fimport_2eproto.base,
      &scc_info_PublicImportMessage_google_2fprotobuf_2funittest_5fimport_5fpublic_2eproto.base,}};

static void InitDefaultsscc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_TestAllTypes_NestedMessage_default_instance_;
    new (ptr) ::proto3_arena_unittest::TestAllTypes_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::TestAllTypes_NestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {}};

static void InitDefaultsscc_info_TestEmptyMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_TestEmptyMessage_default_instance_;
    new (ptr) ::proto3_arena_unittest::TestEmptyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::TestEmptyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEmptyMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestEmptyMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {}};

static void InitDefaultsscc_info_TestPackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_TestPackedTypes_default_instance_;
    new (ptr) ::proto3_arena_unittest::TestPackedTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::TestPackedTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {}};

static void InitDefaultsscc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_TestPickleNestedMessage_default_instance_;
    new (ptr) ::proto3_arena_unittest::TestPickleNestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::TestPickleNestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {}};

static void InitDefaultsscc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_TestPickleNestedMessage_NestedMessage_default_instance_;
    new (ptr) ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {}};

static void InitDefaultsscc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_;
    new (ptr) ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {}};

static void InitDefaultsscc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto3_arena_unittest::_TestUnpackedTypes_default_instance_;
    new (ptr) ::proto3_arena_unittest::TestUnpackedTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto3_arena_unittest::TestUnpackedTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes_NestedMessage, bb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_int64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_sint32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_sint64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_fixed32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_fixed64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_float_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_double_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_string_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_import_message_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_string_piece_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_cord_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_public_import_message_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_lazy_message_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, optional_lazy_import_message_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_sint32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_sint64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_string_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_import_message_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_string_piece_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_cord_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, repeated_lazy_message_),
  offsetof(::proto3_arena_unittest::TestAllTypesDefaultTypeInternal, oneof_uint32_),
  offsetof(::proto3_arena_unittest::TestAllTypesDefaultTypeInternal, oneof_nested_message_),
  offsetof(::proto3_arena_unittest::TestAllTypesDefaultTypeInternal, oneof_string_),
  offsetof(::proto3_arena_unittest::TestAllTypesDefaultTypeInternal, oneof_bytes_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestAllTypes, oneof_field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_int32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_int64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_uint32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_uint64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_sint32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_sint64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_fixed32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_fixed64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_float_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_double_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_bool_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPackedTypes, packed_enum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_sint32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_sint64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestUnpackedTypes, repeated_nested_enum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::NestedTestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::NestedTestAllTypes, child_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::NestedTestAllTypes, payload_),
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::NestedTestAllTypes, repeated_child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::ForeignMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::ForeignMessage, c_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestEmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage, cc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage, bb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto3_arena_unittest::TestPickleNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto3_arena_unittest::TestAllTypes_NestedMessage)},
  { 6, -1, sizeof(::proto3_arena_unittest::TestAllTypes)},
  { 64, -1, sizeof(::proto3_arena_unittest::TestPackedTypes)},
  { 83, -1, sizeof(::proto3_arena_unittest::TestUnpackedTypes)},
  { 102, -1, sizeof(::proto3_arena_unittest::NestedTestAllTypes)},
  { 110, -1, sizeof(::proto3_arena_unittest::ForeignMessage)},
  { 116, -1, sizeof(::proto3_arena_unittest::TestEmptyMessage)},
  { 121, -1, sizeof(::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage)},
  { 127, -1, sizeof(::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage)},
  { 133, -1, sizeof(::proto3_arena_unittest::TestPickleNestedMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_TestAllTypes_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_TestAllTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_TestPackedTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_TestUnpackedTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_NestedTestAllTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_ForeignMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_TestEmptyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_TestPickleNestedMessage_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto3_arena_unittest::_TestPickleNestedMessage_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+google/protobuf/unittest_proto3_arena."
  "proto\022\025proto3_arena_unittest\032%google/pro"
  "tobuf/unittest_import.proto\"\311\021\n\014TestAllT"
  "ypes\022\026\n\016optional_int32\030\001 \001(\005\022\026\n\016optional"
  "_int64\030\002 \001(\003\022\027\n\017optional_uint32\030\003 \001(\r\022\027\n"
  "\017optional_uint64\030\004 \001(\004\022\027\n\017optional_sint3"
  "2\030\005 \001(\021\022\027\n\017optional_sint64\030\006 \001(\022\022\030\n\020opti"
  "onal_fixed32\030\007 \001(\007\022\030\n\020optional_fixed64\030\010"
  " \001(\006\022\031\n\021optional_sfixed32\030\t \001(\017\022\031\n\021optio"
  "nal_sfixed64\030\n \001(\020\022\026\n\016optional_float\030\013 \001"
  "(\002\022\027\n\017optional_double\030\014 \001(\001\022\025\n\roptional_"
  "bool\030\r \001(\010\022\027\n\017optional_string\030\016 \001(\t\022\026\n\016o"
  "ptional_bytes\030\017 \001(\014\022R\n\027optional_nested_m"
  "essage\030\022 \001(\01321.proto3_arena_unittest.Tes"
  "tAllTypes.NestedMessage\022G\n\030optional_fore"
  "ign_message\030\023 \001(\0132%.proto3_arena_unittes"
  "t.ForeignMessage\022H\n\027optional_import_mess"
  "age\030\024 \001(\0132\'.protobuf_unittest_import.Imp"
  "ortMessage\022L\n\024optional_nested_enum\030\025 \001(\016"
  "2..proto3_arena_unittest.TestAllTypes.Ne"
  "stedEnum\022A\n\025optional_foreign_enum\030\026 \001(\0162"
  "\".proto3_arena_unittest.ForeignEnum\022!\n\025o"
  "ptional_string_piece\030\030 \001(\tB\002\010\002\022\031\n\roption"
  "al_cord\030\031 \001(\tB\002\010\001\022U\n\036optional_public_imp"
  "ort_message\030\032 \001(\0132-.protobuf_unittest_im"
  "port.PublicImportMessage\022T\n\025optional_laz"
  "y_message\030\033 \001(\01321.proto3_arena_unittest."
  "TestAllTypes.NestedMessageB\002(\001\022Q\n\034option"
  "al_lazy_import_message\030s \001(\0132\'.protobuf_"
  "unittest_import.ImportMessageB\002(\001\022\026\n\016rep"
  "eated_int32\030\037 \003(\005\022\026\n\016repeated_int64\030  \003("
  "\003\022\027\n\017repeated_uint32\030! \003(\r\022\027\n\017repeated_u"
  "int64\030\" \003(\004\022\027\n\017repeated_sint32\030# \003(\021\022\027\n\017"
  "repeated_sint64\030$ \003(\022\022\030\n\020repeated_fixed3"
  "2\030% \003(\007\022\030\n\020repeated_fixed64\030& \003(\006\022\031\n\021rep"
  "eated_sfixed32\030\' \003(\017\022\031\n\021repeated_sfixed6"
  "4\030( \003(\020\022\026\n\016repeated_float\030) \003(\002\022\027\n\017repea"
  "ted_double\030* \003(\001\022\025\n\rrepeated_bool\030+ \003(\010\022"
  "\027\n\017repeated_string\030, \003(\t\022\026\n\016repeated_byt"
  "es\030- \003(\014\022R\n\027repeated_nested_message\0300 \003("
  "\01321.proto3_arena_unittest.TestAllTypes.N"
  "estedMessage\022G\n\030repeated_foreign_message"
  "\0301 \003(\0132%.proto3_arena_unittest.ForeignMe"
  "ssage\022H\n\027repeated_import_message\0302 \003(\0132\'"
  ".protobuf_unittest_import.ImportMessage\022"
  "L\n\024repeated_nested_enum\0303 \003(\0162..proto3_a"
  "rena_unittest.TestAllTypes.NestedEnum\022A\n"
  "\025repeated_foreign_enum\0304 \003(\0162\".proto3_ar"
  "ena_unittest.ForeignEnum\022!\n\025repeated_str"
  "ing_piece\0306 \003(\tB\002\010\002\022\031\n\rrepeated_cord\0307 \003"
  "(\tB\002\010\001\022T\n\025repeated_lazy_message\0309 \003(\01321."
  "proto3_arena_unittest.TestAllTypes.Neste"
  "dMessageB\002(\001\022\026\n\014oneof_uint32\030o \001(\rH\000\022Q\n\024"
  "oneof_nested_message\030p \001(\01321.proto3_aren"
  "a_unittest.TestAllTypes.NestedMessageH\000\022"
  "\026\n\014oneof_string\030q \001(\tH\000\022\025\n\013oneof_bytes\030r"
  " \001(\014H\000\032\033\n\rNestedMessage\022\n\n\002bb\030\001 \001(\005\"C\n\nN"
  "estedEnum\022\010\n\004ZERO\020\000\022\007\n\003FOO\020\001\022\007\n\003BAR\020\002\022\007\n"
  "\003BAZ\020\003\022\020\n\003NEG\020\377\377\377\377\377\377\377\377\377\001B\r\n\013oneof_field\""
  "\256\003\n\017TestPackedTypes\022\030\n\014packed_int32\030Z \003("
  "\005B\002\020\001\022\030\n\014packed_int64\030[ \003(\003B\002\020\001\022\031\n\rpacke"
  "d_uint32\030\\ \003(\rB\002\020\001\022\031\n\rpacked_uint64\030] \003("
  "\004B\002\020\001\022\031\n\rpacked_sint32\030^ \003(\021B\002\020\001\022\031\n\rpack"
  "ed_sint64\030_ \003(\022B\002\020\001\022\032\n\016packed_fixed32\030` "
  "\003(\007B\002\020\001\022\032\n\016packed_fixed64\030a \003(\006B\002\020\001\022\033\n\017p"
  "acked_sfixed32\030b \003(\017B\002\020\001\022\033\n\017packed_sfixe"
  "d64\030c \003(\020B\002\020\001\022\030\n\014packed_float\030d \003(\002B\002\020\001\022"
  "\031\n\rpacked_double\030e \003(\001B\002\020\001\022\027\n\013packed_boo"
  "l\030f \003(\010B\002\020\001\022;\n\013packed_enum\030g \003(\0162\".proto"
  "3_arena_unittest.ForeignEnumB\002\020\001\"\337\003\n\021Tes"
  "tUnpackedTypes\022\032\n\016repeated_int32\030\001 \003(\005B\002"
  "\020\000\022\032\n\016repeated_int64\030\002 \003(\003B\002\020\000\022\033\n\017repeat"
  "ed_uint32\030\003 \003(\rB\002\020\000\022\033\n\017repeated_uint64\030\004"
  " \003(\004B\002\020\000\022\033\n\017repeated_sint32\030\005 \003(\021B\002\020\000\022\033\n"
  "\017repeated_sint64\030\006 \003(\022B\002\020\000\022\034\n\020repeated_f"
  "ixed32\030\007 \003(\007B\002\020\000\022\034\n\020repeated_fixed64\030\010 \003"
  "(\006B\002\020\000\022\035\n\021repeated_sfixed32\030\t \003(\017B\002\020\000\022\035\n"
  "\021repeated_sfixed64\030\n \003(\020B\002\020\000\022\032\n\016repeated"
  "_float\030\013 \003(\002B\002\020\000\022\033\n\017repeated_double\030\014 \003("
  "\001B\002\020\000\022\031\n\rrepeated_bool\030\r \003(\010B\002\020\000\022P\n\024repe"
  "ated_nested_enum\030\016 \003(\0162..proto3_arena_un"
  "ittest.TestAllTypes.NestedEnumB\002\020\000\"\307\001\n\022N"
  "estedTestAllTypes\0228\n\005child\030\001 \001(\0132).proto"
  "3_arena_unittest.NestedTestAllTypes\0224\n\007p"
  "ayload\030\002 \001(\0132#.proto3_arena_unittest.Tes"
  "tAllTypes\022A\n\016repeated_child\030\003 \003(\0132).prot"
  "o3_arena_unittest.NestedTestAllTypes\"\033\n\016"
  "ForeignMessage\022\t\n\001c\030\001 \001(\005\"\022\n\020TestEmptyMe"
  "ssage\"Y\n\027TestPickleNestedMessage\032>\n\rNest"
  "edMessage\022\n\n\002bb\030\001 \001(\005\032!\n\023NestedNestedMes"
  "sage\022\n\n\002cc\030\001 \001(\005*R\n\013ForeignEnum\022\020\n\014FOREI"
  "GN_ZERO\020\000\022\017\n\013FOREIGN_FOO\020\004\022\017\n\013FOREIGN_BA"
  "R\020\005\022\017\n\013FOREIGN_BAZ\020\006B\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2funittest_5fimport_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto_sccs[10] = {
  &scc_info_ForeignMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
  &scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
  &scc_info_TestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
  &scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
  &scc_info_TestEmptyMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
  &scc_info_TestPackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
  &scc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
  &scc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
  &scc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
  &scc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto_once;
static bool descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto = {
  &descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto_initialized, descriptor_table_protodef_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto, "google/protobuf/unittest_proto3_arena.proto", 3713,
  &descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto_once, descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto_sccs, descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto, 10, file_level_enum_descriptors_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto, file_level_service_descriptors_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto), true);
namespace proto3_arena_unittest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestAllTypes_NestedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto[0];
}
bool TestAllTypes_NestedEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestAllTypes_NestedEnum TestAllTypes::ZERO;
constexpr TestAllTypes_NestedEnum TestAllTypes::FOO;
constexpr TestAllTypes_NestedEnum TestAllTypes::BAR;
constexpr TestAllTypes_NestedEnum TestAllTypes::BAZ;
constexpr TestAllTypes_NestedEnum TestAllTypes::NEG;
constexpr TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MIN;
constexpr TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MAX;
constexpr int TestAllTypes::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForeignEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto[1];
}
bool ForeignEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TestAllTypes_NestedMessage::InitAsDefaultInstance() {
}
class TestAllTypes_NestedMessage::_Internal {
 public:
};

TestAllTypes_NestedMessage::TestAllTypes_NestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.TestAllTypes.NestedMessage)
}
TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.TestAllTypes.NestedMessage)
}
TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(const TestAllTypes_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bb_ = from.bb_;
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.TestAllTypes.NestedMessage)
}

void TestAllTypes_NestedMessage::SharedCtor() {
  bb_ = 0;
}

TestAllTypes_NestedMessage::~TestAllTypes_NestedMessage() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.TestAllTypes.NestedMessage)
  SharedDtor();
}

void TestAllTypes_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestAllTypes_NestedMessage::ArenaDtor(void* object) {
  TestAllTypes_NestedMessage* _this = reinterpret_cast< TestAllTypes_NestedMessage* >(object);
  (void)_this;
}
void TestAllTypes_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypes_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypes_NestedMessage& TestAllTypes_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypes_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.TestAllTypes.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bb_ = 0;
  _internal_metadata_.Clear();
}

const char* TestAllTypes_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypes_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.TestAllTypes.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bb = 1;
  if (this->bb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.TestAllTypes.NestedMessage)
  return target;
}

size_t TestAllTypes_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.TestAllTypes.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bb = 1;
  if (this->bb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypes_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.TestAllTypes.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypes_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.TestAllTypes.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.TestAllTypes.NestedMessage)
    MergeFrom(*source);
  }
}

void TestAllTypes_NestedMessage::MergeFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.TestAllTypes.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bb() != 0) {
    _internal_set_bb(from._internal_bb());
  }
}

void TestAllTypes_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes_NestedMessage::CopyFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_NestedMessage::IsInitialized() const {
  return true;
}

void TestAllTypes_NestedMessage::InternalSwap(TestAllTypes_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bb_, other->bb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestAllTypes::InitAsDefaultInstance() {
  ::proto3_arena_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_nested_message_ = const_cast< ::proto3_arena_unittest::TestAllTypes_NestedMessage*>(
      ::proto3_arena_unittest::TestAllTypes_NestedMessage::internal_default_instance());
  ::proto3_arena_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_foreign_message_ = const_cast< ::proto3_arena_unittest::ForeignMessage*>(
      ::proto3_arena_unittest::ForeignMessage::internal_default_instance());
  ::proto3_arena_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_import_message_ = const_cast< ::protobuf_unittest_import::ImportMessage*>(
      ::protobuf_unittest_import::ImportMessage::internal_default_instance());
  ::proto3_arena_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_public_import_message_ = const_cast< ::protobuf_unittest_import::PublicImportMessage*>(
      ::protobuf_unittest_import::PublicImportMessage::internal_default_instance());
  ::proto3_arena_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_lazy_message_ = const_cast< ::proto3_arena_unittest::TestAllTypes_NestedMessage*>(
      ::proto3_arena_unittest::TestAllTypes_NestedMessage::internal_default_instance());
  ::proto3_arena_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_lazy_import_message_ = const_cast< ::protobuf_unittest_import::ImportMessage*>(
      ::protobuf_unittest_import::ImportMessage::internal_default_instance());
  ::proto3_arena_unittest::_TestAllTypes_default_instance_.oneof_uint32_ = 0u;
  ::proto3_arena_unittest::_TestAllTypes_default_instance_.oneof_nested_message_ = const_cast< ::proto3_arena_unittest::TestAllTypes_NestedMessage*>(
      ::proto3_arena_unittest::TestAllTypes_NestedMessage::internal_default_instance());
  ::proto3_arena_unittest::_TestAllTypes_default_instance_.oneof_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::proto3_arena_unittest::_TestAllTypes_default_instance_.oneof_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class TestAllTypes::_Internal {
 public:
  static const ::proto3_arena_unittest::TestAllTypes_NestedMessage& optional_nested_message(const TestAllTypes* msg);
  static const ::proto3_arena_unittest::ForeignMessage& optional_foreign_message(const TestAllTypes* msg);
  static const ::protobuf_unittest_import::ImportMessage& optional_import_message(const TestAllTypes* msg);
  static const ::protobuf_unittest_import::PublicImportMessage& optional_public_import_message(const TestAllTypes* msg);
  static const ::proto3_arena_unittest::TestAllTypes_NestedMessage& optional_lazy_message(const TestAllTypes* msg);
  static const ::protobuf_unittest_import::ImportMessage& optional_lazy_import_message(const TestAllTypes* msg);
  static const ::proto3_arena_unittest::TestAllTypes_NestedMessage& oneof_nested_message(const TestAllTypes* msg);
};

const ::proto3_arena_unittest::TestAllTypes_NestedMessage&
TestAllTypes::_Internal::optional_nested_message(const TestAllTypes* msg) {
  return *msg->optional_nested_message_;
}
const ::proto3_arena_unittest::ForeignMessage&
TestAllTypes::_Internal::optional_foreign_message(const TestAllTypes* msg) {
  return *msg->optional_foreign_message_;
}
const ::protobuf_unittest_import::ImportMessage&
TestAllTypes::_Internal::optional_import_message(const TestAllTypes* msg) {
  return *msg->optional_import_message_;
}
const ::protobuf_unittest_import::PublicImportMessage&
TestAllTypes::_Internal::optional_public_import_message(const TestAllTypes* msg) {
  return *msg->optional_public_import_message_;
}
const ::proto3_arena_unittest::TestAllTypes_NestedMessage&
TestAllTypes::_Internal::optional_lazy_message(const TestAllTypes* msg) {
  return *msg->optional_lazy_message_;
}
const ::protobuf_unittest_import::ImportMessage&
TestAllTypes::_Internal::optional_lazy_import_message(const TestAllTypes* msg) {
  return *msg->optional_lazy_import_message_;
}
const ::proto3_arena_unittest::TestAllTypes_NestedMessage&
TestAllTypes::_Internal::oneof_nested_message(const TestAllTypes* msg) {
  return *msg->oneof_field_.oneof_nested_message_;
}
void TestAllTypes::unsafe_arena_set_allocated_optional_nested_message(
    ::proto3_arena_unittest::TestAllTypes_NestedMessage* optional_nested_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_nested_message_;
  }
  optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto3_arena_unittest.TestAllTypes.optional_nested_message)
}
void TestAllTypes::unsafe_arena_set_allocated_optional_foreign_message(
    ::proto3_arena_unittest::ForeignMessage* optional_foreign_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_foreign_message_;
  }
  optional_foreign_message_ = optional_foreign_message;
  if (optional_foreign_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto3_arena_unittest.TestAllTypes.optional_foreign_message)
}
void TestAllTypes::unsafe_arena_set_allocated_optional_import_message(
    ::protobuf_unittest_import::ImportMessage* optional_import_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_import_message_;
  }
  optional_import_message_ = optional_import_message;
  if (optional_import_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto3_arena_unittest.TestAllTypes.optional_import_message)
}
void TestAllTypes::clear_optional_import_message() {
  if (GetArenaNoVirtual() == nullptr && optional_import_message_ != nullptr) {
    delete optional_import_message_;
  }
  optional_import_message_ = nullptr;
}
void TestAllTypes::unsafe_arena_set_allocated_optional_public_import_message(
    ::protobuf_unittest_import::PublicImportMessage* optional_public_import_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_public_import_message_;
  }
  optional_public_import_message_ = optional_public_import_message;
  if (optional_public_import_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto3_arena_unittest.TestAllTypes.optional_public_import_message)
}
void TestAllTypes::clear_optional_public_import_message() {
  if (GetArenaNoVirtual() == nullptr && optional_public_import_message_ != nullptr) {
    delete optional_public_import_message_;
  }
  optional_public_import_message_ = nullptr;
}
void TestAllTypes::unsafe_arena_set_allocated_optional_lazy_message(
    ::proto3_arena_unittest::TestAllTypes_NestedMessage* optional_lazy_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_lazy_message_;
  }
  optional_lazy_message_ = optional_lazy_message;
  if (optional_lazy_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto3_arena_unittest.TestAllTypes.optional_lazy_message)
}
void TestAllTypes::unsafe_arena_set_allocated_optional_lazy_import_message(
    ::protobuf_unittest_import::ImportMessage* optional_lazy_import_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_lazy_import_message_;
  }
  optional_lazy_import_message_ = optional_lazy_import_message;
  if (optional_lazy_import_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto3_arena_unittest.TestAllTypes.optional_lazy_import_message)
}
void TestAllTypes::clear_optional_lazy_import_message() {
  if (GetArenaNoVirtual() == nullptr && optional_lazy_import_message_ != nullptr) {
    delete optional_lazy_import_message_;
  }
  optional_lazy_import_message_ = nullptr;
}
void TestAllTypes::clear_repeated_import_message() {
  repeated_import_message_.Clear();
}
void TestAllTypes::set_allocated_oneof_nested_message(::proto3_arena_unittest::TestAllTypes_NestedMessage* oneof_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_field();
  if (oneof_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oneof_nested_message);
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_arena_unittest.TestAllTypes.oneof_nested_message)
}
TestAllTypes::TestAllTypes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.TestAllTypes)
}
TestAllTypes::TestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_sint32_(arena),
  repeated_sint64_(arena),
  repeated_fixed32_(arena),
  repeated_fixed64_(arena),
  repeated_sfixed32_(arena),
  repeated_sfixed64_(arena),
  repeated_float_(arena),
  repeated_double_(arena),
  repeated_bool_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena),
  repeated_nested_message_(arena),
  repeated_foreign_message_(arena),
  repeated_import_message_(arena),
  repeated_nested_enum_(arena),
  repeated_foreign_enum_(arena),
  repeated_string_piece_(arena),
  repeated_cord_(arena),
  repeated_lazy_message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.TestAllTypes)
}
TestAllTypes::TestAllTypes(const TestAllTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_bool_(from.repeated_bool_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_nested_message_(from.repeated_nested_message_),
      repeated_foreign_message_(from.repeated_foreign_message_),
      repeated_import_message_(from.repeated_import_message_),
      repeated_nested_enum_(from.repeated_nested_enum_),
      repeated_foreign_enum_(from.repeated_foreign_enum_),
      repeated_string_piece_(from.repeated_string_piece_),
      repeated_cord_(from.repeated_cord_),
      repeated_lazy_message_(from.repeated_lazy_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optional_string().empty()) {
    optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string(),
      GetArenaNoVirtual());
  }
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optional_bytes().empty()) {
    optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_bytes(),
      GetArenaNoVirtual());
  }
  optional_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optional_string_piece().empty()) {
    optional_string_piece_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string_piece(),
      GetArenaNoVirtual());
  }
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optional_cord().empty()) {
    optional_cord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_cord(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::proto3_arena_unittest::TestAllTypes_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  if (from._internal_has_optional_foreign_message()) {
    optional_foreign_message_ = new ::proto3_arena_unittest::ForeignMessage(*from.optional_foreign_message_);
  } else {
    optional_foreign_message_ = nullptr;
  }
  if (from._internal_has_optional_import_message()) {
    optional_import_message_ = new ::protobuf_unittest_import::ImportMessage(*from.optional_import_message_);
  } else {
    optional_import_message_ = nullptr;
  }
  if (from._internal_has_optional_public_import_message()) {
    optional_public_import_message_ = new ::protobuf_unittest_import::PublicImportMessage(*from.optional_public_import_message_);
  } else {
    optional_public_import_message_ = nullptr;
  }
  if (from._internal_has_optional_lazy_message()) {
    optional_lazy_message_ = new ::proto3_arena_unittest::TestAllTypes_NestedMessage(*from.optional_lazy_message_);
  } else {
    optional_lazy_message_ = nullptr;
  }
  if (from._internal_has_optional_lazy_import_message()) {
    optional_lazy_import_message_ = new ::protobuf_unittest_import::ImportMessage(*from.optional_lazy_import_message_);
  } else {
    optional_lazy_import_message_ = nullptr;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_foreign_enum_) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_foreign_enum_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::proto3_arena_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.TestAllTypes)
}

void TestAllTypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_nested_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_foreign_enum_) -
      reinterpret_cast<char*>(&optional_nested_message_)) + sizeof(optional_foreign_enum_));
  clear_has_oneof_field();
}

TestAllTypes::~TestAllTypes() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.TestAllTypes)
  SharedDtor();
}

void TestAllTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_piece_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optional_nested_message_;
  if (this != internal_default_instance()) delete optional_foreign_message_;
  if (this != internal_default_instance()) delete optional_import_message_;
  if (this != internal_default_instance()) delete optional_public_import_message_;
  if (this != internal_default_instance()) delete optional_lazy_message_;
  if (this != internal_default_instance()) delete optional_lazy_import_message_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestAllTypes::ArenaDtor(void* object) {
  TestAllTypes* _this = reinterpret_cast< TestAllTypes* >(object);
  (void)_this;
}
void TestAllTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypes& TestAllTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypes::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:proto3_arena_unittest.TestAllTypes)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      if (GetArenaNoVirtual() == nullptr) {
        delete oneof_field_.oneof_nested_message_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.TestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_nested_message_.Clear();
  repeated_foreign_message_.Clear();
  repeated_import_message_.Clear();
  repeated_nested_enum_.Clear();
  repeated_foreign_enum_.Clear();
  repeated_string_piece_.Clear();
  repeated_cord_.Clear();
  repeated_lazy_message_.Clear();
  optional_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  optional_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  optional_string_piece_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  optional_cord_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && optional_nested_message_ != nullptr) {
    delete optional_nested_message_;
  }
  optional_nested_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && optional_foreign_message_ != nullptr) {
    delete optional_foreign_message_;
  }
  optional_foreign_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && optional_import_message_ != nullptr) {
    delete optional_import_message_;
  }
  optional_import_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && optional_public_import_message_ != nullptr) {
    delete optional_public_import_message_;
  }
  optional_public_import_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && optional_lazy_message_ != nullptr) {
    delete optional_lazy_message_;
  }
  optional_lazy_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && optional_lazy_import_message_ != nullptr) {
    delete optional_lazy_import_message_;
  }
  optional_lazy_import_message_ = nullptr;
  ::memset(&optional_int64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_foreign_enum_) -
      reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_foreign_enum_));
  clear_oneof_field();
  _internal_metadata_.Clear();
}

const char* TestAllTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 optional_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 optional_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 optional_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 optional_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 optional_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          optional_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 optional_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          optional_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 optional_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          optional_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // fixed64 optional_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          optional_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed32 optional_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          optional_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // sfixed64 optional_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          optional_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // float optional_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double optional_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool optional_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string optional_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto3_arena_unittest.TestAllTypes.optional_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes optional_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto3_arena_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto3_arena_unittest.ForeignMessage optional_foreign_message = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_foreign_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_unittest_import.ImportMessage optional_import_message = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_import_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto3_arena_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_optional_nested_enum(static_cast<::proto3_arena_unittest::TestAllTypes_NestedEnum>(val));
        } else goto handle_unusual;
        continue;
      // .proto3_arena_unittest.ForeignEnum optional_foreign_enum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_optional_foreign_enum(static_cast<::proto3_arena_unittest::ForeignEnum>(val));
        } else goto handle_unusual;
        continue;
      // string optional_string_piece = 24 [ctype = STRING_PIECE];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_optional_string_piece();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto3_arena_unittest.TestAllTypes.optional_string_piece"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string optional_cord = 25 [ctype = CORD];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_optional_cord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto3_arena_unittest.TestAllTypes.optional_cord"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_public_import_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto3_arena_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_lazy_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248) {
          _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0) {
          _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 repeated_sint32 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_repeated_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 repeated_sint64 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_repeated_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 repeated_fixed32 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_repeated_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_repeated_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated float repeated_float = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double repeated_double = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81) {
          _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto3_arena_unittest.TestAllTypes.repeated_string"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto3_arena_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto3_arena_unittest.ForeignMessage repeated_foreign_message = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_foreign_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_import_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto3_arena_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeated_nested_enum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_repeated_nested_enum(static_cast<::proto3_arena_unittest::TestAllTypes_NestedEnum>(val));
        } else goto handle_unusual;
        continue;
      // repeated .proto3_arena_unittest.ForeignEnum repeated_foreign_enum = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeated_foreign_enum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_repeated_foreign_enum(static_cast<::proto3_arena_unittest::ForeignEnum>(val));
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string_piece();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto3_arena_unittest.TestAllTypes.repeated_string_piece"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string repeated_cord = 55 [ctype = CORD];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_cord();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto3_arena_unittest.TestAllTypes.repeated_cord"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto3_arena_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_lazy_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto3_arena_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string oneof_string = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto3_arena_unittest.TestAllTypes.oneof_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes oneof_bytes = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_lazy_import_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.TestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_optional_sint32(), target);
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_optional_sint64(), target);
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_optional_fixed32(), target);
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_optional_fixed64(), target);
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_optional_sfixed32(), target);
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_optional_sfixed64(), target);
  }

  // float optional_float = 11;
  if (!(this->optional_float() <= 0 && this->optional_float() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_optional_float(), target);
  }

  // double optional_double = 12;
  if (!(this->optional_double() <= 0 && this->optional_double() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_optional_double(), target);
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_optional_bool(), target);
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto3_arena_unittest.TestAllTypes.optional_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_optional_string(), target);
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_optional_bytes(), target);
  }

  // .proto3_arena_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::optional_nested_message(this), target, stream);
  }

  // .proto3_arena_unittest.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::optional_foreign_message(this), target, stream);
  }

  // .protobuf_unittest_import.ImportMessage optional_import_message = 20;
  if (this->has_optional_import_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::optional_import_message(this), target, stream);
  }

  // .proto3_arena_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_optional_nested_enum(), target);
  }

  // .proto3_arena_unittest.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_optional_foreign_enum(), target);
  }

  // string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (this->optional_string_piece().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_string_piece().data(), static_cast<int>(this->_internal_optional_string_piece().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto3_arena_unittest.TestAllTypes.optional_string_piece");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_optional_string_piece(), target);
  }

  // string optional_cord = 25 [ctype = CORD];
  if (this->optional_cord().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_cord().data(), static_cast<int>(this->_internal_optional_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto3_arena_unittest.TestAllTypes.optional_cord");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_optional_cord(), target);
  }

  // .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
  if (this->has_optional_public_import_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::optional_public_import_message(this), target, stream);
  }

  // .proto3_arena_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
  if (this->has_optional_lazy_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::optional_lazy_message(this), target, stream);
  }

  // repeated int32 repeated_int32 = 31;
  {
    int byte_size = _repeated_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          31, _internal_repeated_int32(), byte_size, target);
    }
  }

  // repeated int64 repeated_int64 = 32;
  {
    int byte_size = _repeated_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          32, _internal_repeated_int64(), byte_size, target);
    }
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    int byte_size = _repeated_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          33, _internal_repeated_uint32(), byte_size, target);
    }
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    int byte_size = _repeated_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          34, _internal_repeated_uint64(), byte_size, target);
    }
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    int byte_size = _repeated_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          35, _internal_repeated_sint32(), byte_size, target);
    }
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    int byte_size = _repeated_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          36, _internal_repeated_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 repeated_fixed32 = 37;
  if (this->_internal_repeated_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(37, _internal_repeated_fixed32(), target);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  if (this->_internal_repeated_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(38, _internal_repeated_fixed64(), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  if (this->_internal_repeated_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(39, _internal_repeated_sfixed32(), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  if (this->_internal_repeated_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(40, _internal_repeated_sfixed64(), target);
  }

  // repeated float repeated_float = 41;
  if (this->_internal_repeated_float_size() > 0) {
    target = stream->WriteFixedPacked(41, _internal_repeated_float(), target);
  }

  // repeated double repeated_double = 42;
  if (this->_internal_repeated_double_size() > 0) {
    target = stream->WriteFixedPacked(42, _internal_repeated_double(), target);
  }

  // repeated bool repeated_bool = 43;
  if (this->_internal_repeated_bool_size() > 0) {
    target = stream->WriteFixedPacked(43, _internal_repeated_bool(), target);
  }

  // repeated string repeated_string = 44;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto3_arena_unittest.TestAllTypes.repeated_string");
    target = stream->WriteString(44, s, target);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(45, s, target);
  }

  // repeated .proto3_arena_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_nested_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_repeated_nested_message(i), target, stream);
  }

  // repeated .proto3_arena_unittest.ForeignMessage repeated_foreign_message = 49;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_foreign_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, this->_internal_repeated_foreign_message(i), target, stream);
  }

  // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_import_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_repeated_import_message(i), target, stream);
  }

  // repeated .proto3_arena_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  {
    int byte_size = _repeated_nested_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          51, repeated_nested_enum_, byte_size, target);
    }
  }

  // repeated .proto3_arena_unittest.ForeignEnum repeated_foreign_enum = 52;
  {
    int byte_size = _repeated_foreign_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          52, repeated_foreign_enum_, byte_size, target);
    }
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_repeated_string_piece_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string_piece(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto3_arena_unittest.TestAllTypes.repeated_string_piece");
    target = stream->WriteString(54, s, target);
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  for (int i = 0, n = this->_internal_repeated_cord_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_cord(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto3_arena_unittest.TestAllTypes.repeated_cord");
    target = stream->WriteString(55, s, target);
  }

  // repeated .proto3_arena_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_lazy_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, this->_internal_repeated_lazy_message(i), target, stream);
  }

  // uint32 oneof_uint32 = 111;
  if (_internal_has_oneof_uint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(111, this->_internal_oneof_uint32(), target);
  }

  // .proto3_arena_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
  if (_internal_has_oneof_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        112, _Internal::oneof_nested_message(this), target, stream);
  }

  // string oneof_string = 113;
  if (_internal_has_oneof_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto3_arena_unittest.TestAllTypes.oneof_string");
    target = stream->WriteStringMaybeAliased(
        113, this->_internal_oneof_string(), target);
  }

  // bytes oneof_bytes = 114;
  if (_internal_has_oneof_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        114, this->_internal_oneof_bytes(), target);
  }

  // .protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];
  if (this->has_optional_lazy_import_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        115, _Internal::optional_lazy_import_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.TestAllTypes)
  return target;
}

size_t TestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.TestAllTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_fixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_fixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_sfixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_sfixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float repeated_float = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double repeated_double = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_bool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for (int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for (int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      repeated_bytes_.Get(i));
  }

  // repeated .proto3_arena_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
  total_size += 2UL * this->_internal_repeated_nested_message_size();
  for (const auto& msg : this->repeated_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto3_arena_unittest.ForeignMessage repeated_foreign_message = 49;
  total_size += 2UL * this->_internal_repeated_foreign_message_size();
  for (const auto& msg : this->repeated_foreign_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
  total_size += 2UL * this->_internal_repeated_import_message_size();
  for (const auto& msg : this->repeated_import_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto3_arena_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_nested_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_nested_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .proto3_arena_unittest.ForeignEnum repeated_foreign_enum = 52;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_foreign_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_foreign_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_foreign_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_piece_.size());
  for (int i = 0, n = repeated_string_piece_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_piece_.Get(i));
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_cord_.size());
  for (int i = 0, n = repeated_cord_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_cord_.Get(i));
  }

  // repeated .proto3_arena_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
  total_size += 2UL * this->_internal_repeated_lazy_message_size();
  for (const auto& msg : this->repeated_lazy_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_string());
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_optional_bytes());
  }

  // string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (this->optional_string_piece().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_string_piece());
  }

  // string optional_cord = 25 [ctype = CORD];
  if (this->optional_cord().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_cord());
  }

  // .proto3_arena_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_nested_message_);
  }

  // .proto3_arena_unittest.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_foreign_message_);
  }

  // .protobuf_unittest_import.ImportMessage optional_import_message = 20;
  if (this->has_optional_import_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_import_message_);
  }

  // .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
  if (this->has_optional_public_import_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_public_import_message_);
  }

  // .proto3_arena_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
  if (this->has_optional_lazy_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_lazy_message_);
  }

  // .protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115 [lazy = true];
  if (this->has_optional_lazy_import_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_lazy_import_message_);
  }

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_optional_int64());
  }

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_optional_int32());
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_optional_uint32());
  }

  // uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_optional_uint64());
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_optional_sint64());
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_optional_sint32());
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    total_size += 1 + 4;
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    total_size += 1 + 4;
  }

  // float optional_float = 11;
  if (!(this->optional_float() <= 0 && this->optional_float() >= 0)) {
    total_size += 1 + 4;
  }

  // double optional_double = 12;
  if (!(this->optional_double() <= 0 && this->optional_double() >= 0)) {
    total_size += 1 + 8;
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    total_size += 1 + 1;
  }

  // .proto3_arena_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_nested_enum());
  }

  // .proto3_arena_unittest.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_foreign_enum());
  }

  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 111;
    case kOneofUint32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // .proto3_arena_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
    case kOneofNestedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_nested_message_);
      break;
    }
    // string oneof_string = 113;
    case kOneofString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 114;
    case kOneofBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.TestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.TestAllTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.TestAllTypes)
    MergeFrom(*source);
  }
}

void TestAllTypes::MergeFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.TestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  repeated_foreign_message_.MergeFrom(from.repeated_foreign_message_);
  repeated_import_message_.MergeFrom(from.repeated_import_message_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
  repeated_foreign_enum_.MergeFrom(from.repeated_foreign_enum_);
  repeated_string_piece_.MergeFrom(from.repeated_string_piece_);
  repeated_cord_.MergeFrom(from.repeated_cord_);
  repeated_lazy_message_.MergeFrom(from.repeated_lazy_message_);
  if (from.optional_string().size() > 0) {
    _internal_set_optional_string(from._internal_optional_string());
  }
  if (from.optional_bytes().size() > 0) {
    _internal_set_optional_bytes(from._internal_optional_bytes());
  }
  if (from.optional_string_piece().size() > 0) {
    _internal_set_optional_string_piece(from._internal_optional_string_piece());
  }
  if (from.optional_cord().size() > 0) {
    _internal_set_optional_cord(from._internal_optional_cord());
  }
  if (from.has_optional_nested_message()) {
    _internal_mutable_optional_nested_message()->::proto3_arena_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_optional_nested_message());
  }
  if (from.has_optional_foreign_message()) {
    _internal_mutable_optional_foreign_message()->::proto3_arena_unittest::ForeignMessage::MergeFrom(from._internal_optional_foreign_message());
  }
  if (from.has_optional_import_message()) {
    _internal_mutable_optional_import_message()->::protobuf_unittest_import::ImportMessage::MergeFrom(from._internal_optional_import_message());
  }
  if (from.has_optional_public_import_message()) {
    _internal_mutable_optional_public_import_message()->::protobuf_unittest_import::PublicImportMessage::MergeFrom(from._internal_optional_public_import_message());
  }
  if (from.has_optional_lazy_message()) {
    _internal_mutable_optional_lazy_message()->::proto3_arena_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_optional_lazy_message());
  }
  if (from.has_optional_lazy_import_message()) {
    _internal_mutable_optional_lazy_import_message()->::protobuf_unittest_import::ImportMessage::MergeFrom(from._internal_optional_lazy_import_message());
  }
  if (from.optional_int64() != 0) {
    _internal_set_optional_int64(from._internal_optional_int64());
  }
  if (from.optional_int32() != 0) {
    _internal_set_optional_int32(from._internal_optional_int32());
  }
  if (from.optional_uint32() != 0) {
    _internal_set_optional_uint32(from._internal_optional_uint32());
  }
  if (from.optional_uint64() != 0) {
    _internal_set_optional_uint64(from._internal_optional_uint64());
  }
  if (from.optional_sint64() != 0) {
    _internal_set_optional_sint64(from._internal_optional_sint64());
  }
  if (from.optional_sint32() != 0) {
    _internal_set_optional_sint32(from._internal_optional_sint32());
  }
  if (from.optional_fixed32() != 0) {
    _internal_set_optional_fixed32(from._internal_optional_fixed32());
  }
  if (from.optional_fixed64() != 0) {
    _internal_set_optional_fixed64(from._internal_optional_fixed64());
  }
  if (from.optional_sfixed64() != 0) {
    _internal_set_optional_sfixed64(from._internal_optional_sfixed64());
  }
  if (from.optional_sfixed32() != 0) {
    _internal_set_optional_sfixed32(from._internal_optional_sfixed32());
  }
  if (!(from.optional_float() <= 0 && from.optional_float() >= 0)) {
    _internal_set_optional_float(from._internal_optional_float());
  }
  if (!(from.optional_double() <= 0 && from.optional_double() >= 0)) {
    _internal_set_optional_double(from._internal_optional_double());
  }
  if (from.optional_bool() != 0) {
    _internal_set_optional_bool(from._internal_optional_bool());
  }
  if (from.optional_nested_enum() != 0) {
    _internal_set_optional_nested_enum(from._internal_optional_nested_enum());
  }
  if (from.optional_foreign_enum() != 0) {
    _internal_set_optional_foreign_enum(from._internal_optional_foreign_enum());
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::proto3_arena_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
}

void TestAllTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes::CopyFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes::IsInitialized() const {
  return true;
}

void TestAllTypes::InternalSwap(TestAllTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.InternalSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.InternalSwap(&other->repeated_sfixed64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeated_nested_message_.InternalSwap(&other->repeated_nested_message_);
  repeated_foreign_message_.InternalSwap(&other->repeated_foreign_message_);
  repeated_import_message_.InternalSwap(&other->repeated_import_message_);
  repeated_nested_enum_.InternalSwap(&other->repeated_nested_enum_);
  repeated_foreign_enum_.InternalSwap(&other->repeated_foreign_enum_);
  repeated_string_piece_.InternalSwap(&other->repeated_string_piece_);
  repeated_cord_.InternalSwap(&other->repeated_cord_);
  repeated_lazy_message_.InternalSwap(&other->repeated_lazy_message_);
  optional_string_.Swap(&other->optional_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_bytes_.Swap(&other->optional_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_string_piece_.Swap(&other->optional_string_piece_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_cord_.Swap(&other->optional_cord_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(optional_nested_message_, other->optional_nested_message_);
  swap(optional_foreign_message_, other->optional_foreign_message_);
  swap(optional_import_message_, other->optional_import_message_);
  swap(optional_public_import_message_, other->optional_public_import_message_);
  swap(optional_lazy_message_, other->optional_lazy_message_);
  swap(optional_lazy_import_message_, other->optional_lazy_import_message_);
  swap(optional_int64_, other->optional_int64_);
  swap(optional_int32_, other->optional_int32_);
  swap(optional_uint32_, other->optional_uint32_);
  swap(optional_uint64_, other->optional_uint64_);
  swap(optional_sint64_, other->optional_sint64_);
  swap(optional_sint32_, other->optional_sint32_);
  swap(optional_fixed32_, other->optional_fixed32_);
  swap(optional_fixed64_, other->optional_fixed64_);
  swap(optional_sfixed64_, other->optional_sfixed64_);
  swap(optional_sfixed32_, other->optional_sfixed32_);
  swap(optional_float_, other->optional_float_);
  swap(optional_double_, other->optional_double_);
  swap(optional_bool_, other->optional_bool_);
  swap(optional_nested_enum_, other->optional_nested_enum_);
  swap(optional_foreign_enum_, other->optional_foreign_enum_);
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPackedTypes::InitAsDefaultInstance() {
}
class TestPackedTypes::_Internal {
 public:
};

TestPackedTypes::TestPackedTypes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.TestPackedTypes)
}
TestPackedTypes::TestPackedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  packed_int32_(arena),
  packed_int64_(arena),
  packed_uint32_(arena),
  packed_uint64_(arena),
  packed_sint32_(arena),
  packed_sint64_(arena),
  packed_fixed32_(arena),
  packed_fixed64_(arena),
  packed_sfixed32_(arena),
  packed_sfixed64_(arena),
  packed_float_(arena),
  packed_double_(arena),
  packed_bool_(arena),
  packed_enum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.TestPackedTypes)
}
TestPackedTypes::TestPackedTypes(const TestPackedTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      packed_int32_(from.packed_int32_),
      packed_int64_(from.packed_int64_),
      packed_uint32_(from.packed_uint32_),
      packed_uint64_(from.packed_uint64_),
      packed_sint32_(from.packed_sint32_),
      packed_sint64_(from.packed_sint64_),
      packed_fixed32_(from.packed_fixed32_),
      packed_fixed64_(from.packed_fixed64_),
      packed_sfixed32_(from.packed_sfixed32_),
      packed_sfixed64_(from.packed_sfixed64_),
      packed_float_(from.packed_float_),
      packed_double_(from.packed_double_),
      packed_bool_(from.packed_bool_),
      packed_enum_(from.packed_enum_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.TestPackedTypes)
}

void TestPackedTypes::SharedCtor() {
}

TestPackedTypes::~TestPackedTypes() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.TestPackedTypes)
  SharedDtor();
}

void TestPackedTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestPackedTypes::ArenaDtor(void* object) {
  TestPackedTypes* _this = reinterpret_cast< TestPackedTypes* >(object);
  (void)_this;
}
void TestPackedTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPackedTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPackedTypes& TestPackedTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void TestPackedTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.TestPackedTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packed_int32_.Clear();
  packed_int64_.Clear();
  packed_uint32_.Clear();
  packed_uint64_.Clear();
  packed_sint32_.Clear();
  packed_sint64_.Clear();
  packed_fixed32_.Clear();
  packed_fixed64_.Clear();
  packed_sfixed32_.Clear();
  packed_sfixed64_.Clear();
  packed_float_.Clear();
  packed_double_.Clear();
  packed_bool_.Clear();
  packed_enum_.Clear();
  _internal_metadata_.Clear();
}

const char* TestPackedTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 packed_int32 = 90 [packed = true];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 packed_int64 = 91 [packed = true];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packed_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_packed_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 packed_uint32 = 92 [packed = true];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          _internal_add_packed_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 packed_uint64 = 93 [packed = true];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packed_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232) {
          _internal_add_packed_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 packed_sint32 = 94 [packed = true];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_packed_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240) {
          _internal_add_packed_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 packed_sint64 = 95 [packed = true];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_packed_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248) {
          _internal_add_packed_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 packed_fixed32 = 96 [packed = true];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_packed_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5) {
          _internal_add_packed_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 packed_fixed64 = 97 [packed = true];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_packed_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_packed_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_packed_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_packed_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_packed_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_packed_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated float packed_float = 100 [packed = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_packed_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_packed_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double packed_double = 101 [packed = true];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_packed_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_packed_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool packed_bool = 102 [packed = true];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_packed_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_packed_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto3_arena_unittest.ForeignEnum packed_enum = 103 [packed = true];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_packed_enum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_packed_enum(static_cast<::proto3_arena_unittest::ForeignEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPackedTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.TestPackedTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 packed_int32 = 90 [packed = true];
  {
    int byte_size = _packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          90, _internal_packed_int32(), byte_size, target);
    }
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  {
    int byte_size = _packed_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          91, _internal_packed_int64(), byte_size, target);
    }
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  {
    int byte_size = _packed_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          92, _internal_packed_uint32(), byte_size, target);
    }
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  {
    int byte_size = _packed_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          93, _internal_packed_uint64(), byte_size, target);
    }
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  {
    int byte_size = _packed_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          94, _internal_packed_sint32(), byte_size, target);
    }
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  {
    int byte_size = _packed_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          95, _internal_packed_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  if (this->_internal_packed_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(96, _internal_packed_fixed32(), target);
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  if (this->_internal_packed_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(97, _internal_packed_fixed64(), target);
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  if (this->_internal_packed_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(98, _internal_packed_sfixed32(), target);
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  if (this->_internal_packed_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(99, _internal_packed_sfixed64(), target);
  }

  // repeated float packed_float = 100 [packed = true];
  if (this->_internal_packed_float_size() > 0) {
    target = stream->WriteFixedPacked(100, _internal_packed_float(), target);
  }

  // repeated double packed_double = 101 [packed = true];
  if (this->_internal_packed_double_size() > 0) {
    target = stream->WriteFixedPacked(101, _internal_packed_double(), target);
  }

  // repeated bool packed_bool = 102 [packed = true];
  if (this->_internal_packed_bool_size() > 0) {
    target = stream->WriteFixedPacked(102, _internal_packed_bool(), target);
  }

  // repeated .proto3_arena_unittest.ForeignEnum packed_enum = 103 [packed = true];
  {
    int byte_size = _packed_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          103, packed_enum_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.TestPackedTypes)
  return target;
}

size_t TestPackedTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.TestPackedTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 packed_int32 = 90 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->packed_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->packed_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packed_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->packed_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->packed_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->packed_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_fixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_fixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sfixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sfixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float packed_float = 100 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double packed_double = 101 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool packed_bool = 102 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_bool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .proto3_arena_unittest.ForeignEnum packed_enum = 103 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_packed_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPackedTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.TestPackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPackedTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPackedTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.TestPackedTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.TestPackedTypes)
    MergeFrom(*source);
  }
}

void TestPackedTypes::MergeFrom(const TestPackedTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.TestPackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packed_int32_.MergeFrom(from.packed_int32_);
  packed_int64_.MergeFrom(from.packed_int64_);
  packed_uint32_.MergeFrom(from.packed_uint32_);
  packed_uint64_.MergeFrom(from.packed_uint64_);
  packed_sint32_.MergeFrom(from.packed_sint32_);
  packed_sint64_.MergeFrom(from.packed_sint64_);
  packed_fixed32_.MergeFrom(from.packed_fixed32_);
  packed_fixed64_.MergeFrom(from.packed_fixed64_);
  packed_sfixed32_.MergeFrom(from.packed_sfixed32_);
  packed_sfixed64_.MergeFrom(from.packed_sfixed64_);
  packed_float_.MergeFrom(from.packed_float_);
  packed_double_.MergeFrom(from.packed_double_);
  packed_bool_.MergeFrom(from.packed_bool_);
  packed_enum_.MergeFrom(from.packed_enum_);
}

void TestPackedTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.TestPackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPackedTypes::CopyFrom(const TestPackedTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.TestPackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPackedTypes::IsInitialized() const {
  return true;
}

void TestPackedTypes::InternalSwap(TestPackedTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  packed_int32_.InternalSwap(&other->packed_int32_);
  packed_int64_.InternalSwap(&other->packed_int64_);
  packed_uint32_.InternalSwap(&other->packed_uint32_);
  packed_uint64_.InternalSwap(&other->packed_uint64_);
  packed_sint32_.InternalSwap(&other->packed_sint32_);
  packed_sint64_.InternalSwap(&other->packed_sint64_);
  packed_fixed32_.InternalSwap(&other->packed_fixed32_);
  packed_fixed64_.InternalSwap(&other->packed_fixed64_);
  packed_sfixed32_.InternalSwap(&other->packed_sfixed32_);
  packed_sfixed64_.InternalSwap(&other->packed_sfixed64_);
  packed_float_.InternalSwap(&other->packed_float_);
  packed_double_.InternalSwap(&other->packed_double_);
  packed_bool_.InternalSwap(&other->packed_bool_);
  packed_enum_.InternalSwap(&other->packed_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPackedTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestUnpackedTypes::InitAsDefaultInstance() {
}
class TestUnpackedTypes::_Internal {
 public:
};

TestUnpackedTypes::TestUnpackedTypes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.TestUnpackedTypes)
}
TestUnpackedTypes::TestUnpackedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_sint32_(arena),
  repeated_sint64_(arena),
  repeated_fixed32_(arena),
  repeated_fixed64_(arena),
  repeated_sfixed32_(arena),
  repeated_sfixed64_(arena),
  repeated_float_(arena),
  repeated_double_(arena),
  repeated_bool_(arena),
  repeated_nested_enum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.TestUnpackedTypes)
}
TestUnpackedTypes::TestUnpackedTypes(const TestUnpackedTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_bool_(from.repeated_bool_),
      repeated_nested_enum_(from.repeated_nested_enum_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.TestUnpackedTypes)
}

void TestUnpackedTypes::SharedCtor() {
}

TestUnpackedTypes::~TestUnpackedTypes() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.TestUnpackedTypes)
  SharedDtor();
}

void TestUnpackedTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestUnpackedTypes::ArenaDtor(void* object) {
  TestUnpackedTypes* _this = reinterpret_cast< TestUnpackedTypes* >(object);
  (void)_this;
}
void TestUnpackedTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestUnpackedTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestUnpackedTypes& TestUnpackedTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void TestUnpackedTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.TestUnpackedTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_nested_enum_.Clear();
  _internal_metadata_.Clear();
}

const char* TestUnpackedTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 repeated_int32 = 1 [packed = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 2 [packed = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 3 [packed = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 4 [packed = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 repeated_sint32 = 5 [packed = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_repeated_sint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 repeated_sint64 = 6 [packed = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_repeated_sint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 repeated_fixed32 = 7 [packed = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 8 [packed = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 repeated_sfixed32 = 9 [packed = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_repeated_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 repeated_sfixed64 = 10 [packed = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_repeated_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float repeated_float = 11 [packed = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double repeated_double = 12 [packed = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<97>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 13 [packed = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto3_arena_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            _internal_add_repeated_nested_enum(static_cast<::proto3_arena_unittest::TestAllTypes_NestedEnum>(val));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeated_nested_enum(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestUnpackedTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.TestUnpackedTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 1 [packed = false];
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 2 [packed = false];
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 3 [packed = false];
  for (int i = 0, n = this->_internal_repeated_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 4 [packed = false];
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_repeated_uint64(i), target);
  }

  // repeated sint32 repeated_sint32 = 5 [packed = false];
  for (int i = 0, n = this->_internal_repeated_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_repeated_sint32(i), target);
  }

  // repeated sint64 repeated_sint64 = 6 [packed = false];
  for (int i = 0, n = this->_internal_repeated_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_repeated_sint64(i), target);
  }

  // repeated fixed32 repeated_fixed32 = 7 [packed = false];
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_repeated_fixed32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 8 [packed = false];
  for (int i = 0, n = this->_internal_repeated_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_repeated_fixed64(i), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 9 [packed = false];
  for (int i = 0, n = this->_internal_repeated_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_repeated_sfixed32(i), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 10 [packed = false];
  for (int i = 0, n = this->_internal_repeated_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_repeated_sfixed64(i), target);
  }

  // repeated float repeated_float = 11 [packed = false];
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_repeated_float(i), target);
  }

  // repeated double repeated_double = 12 [packed = false];
  for (int i = 0, n = this->_internal_repeated_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_repeated_double(i), target);
  }

  // repeated bool repeated_bool = 13 [packed = false];
  for (int i = 0, n = this->_internal_repeated_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_repeated_bool(i), target);
  }

  // repeated .proto3_arena_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];
  for (int i = 0, n = this->_internal_repeated_nested_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        14, this->_internal_repeated_nested_enum(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.TestUnpackedTypes)
  return target;
}

size_t TestUnpackedTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.TestUnpackedTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 1 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 2 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 3 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 4 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 5 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 6 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 7 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 8 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 9 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 10 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sfixed64_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 11 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated double repeated_double = 12 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_double_size());
    total_size += data_size;
  }

  // repeated bool repeated_bool = 13 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_bool_size());
    total_size += data_size;
  }

  // repeated .proto3_arena_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_nested_enum(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestUnpackedTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.TestUnpackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestUnpackedTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestUnpackedTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.TestUnpackedTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.TestUnpackedTypes)
    MergeFrom(*source);
  }
}

void TestUnpackedTypes::MergeFrom(const TestUnpackedTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.TestUnpackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
}

void TestUnpackedTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.TestUnpackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestUnpackedTypes::CopyFrom(const TestUnpackedTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.TestUnpackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestUnpackedTypes::IsInitialized() const {
  return true;
}

void TestUnpackedTypes::InternalSwap(TestUnpackedTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.InternalSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.InternalSwap(&other->repeated_sfixed64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_nested_enum_.InternalSwap(&other->repeated_nested_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestUnpackedTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NestedTestAllTypes::InitAsDefaultInstance() {
  ::proto3_arena_unittest::_NestedTestAllTypes_default_instance_._instance.get_mutable()->child_ = const_cast< ::proto3_arena_unittest::NestedTestAllTypes*>(
      ::proto3_arena_unittest::NestedTestAllTypes::internal_default_instance());
  ::proto3_arena_unittest::_NestedTestAllTypes_default_instance_._instance.get_mutable()->payload_ = const_cast< ::proto3_arena_unittest::TestAllTypes*>(
      ::proto3_arena_unittest::TestAllTypes::internal_default_instance());
}
class NestedTestAllTypes::_Internal {
 public:
  static const ::proto3_arena_unittest::NestedTestAllTypes& child(const NestedTestAllTypes* msg);
  static const ::proto3_arena_unittest::TestAllTypes& payload(const NestedTestAllTypes* msg);
};

const ::proto3_arena_unittest::NestedTestAllTypes&
NestedTestAllTypes::_Internal::child(const NestedTestAllTypes* msg) {
  return *msg->child_;
}
const ::proto3_arena_unittest::TestAllTypes&
NestedTestAllTypes::_Internal::payload(const NestedTestAllTypes* msg) {
  return *msg->payload_;
}
void NestedTestAllTypes::unsafe_arena_set_allocated_child(
    ::proto3_arena_unittest::NestedTestAllTypes* child) {
  if (GetArenaNoVirtual() == nullptr) {
    delete child_;
  }
  child_ = child;
  if (child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto3_arena_unittest.NestedTestAllTypes.child)
}
void NestedTestAllTypes::unsafe_arena_set_allocated_payload(
    ::proto3_arena_unittest::TestAllTypes* payload) {
  if (GetArenaNoVirtual() == nullptr) {
    delete payload_;
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto3_arena_unittest.NestedTestAllTypes.payload)
}
NestedTestAllTypes::NestedTestAllTypes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.NestedTestAllTypes)
}
NestedTestAllTypes::NestedTestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeated_child_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.NestedTestAllTypes)
}
NestedTestAllTypes::NestedTestAllTypes(const NestedTestAllTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      repeated_child_(from.repeated_child_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::proto3_arena_unittest::NestedTestAllTypes(*from.child_);
  } else {
    child_ = nullptr;
  }
  if (from._internal_has_payload()) {
    payload_ = new ::proto3_arena_unittest::TestAllTypes(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.NestedTestAllTypes)
}

void NestedTestAllTypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  ::memset(&child_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payload_) -
      reinterpret_cast<char*>(&child_)) + sizeof(payload_));
}

NestedTestAllTypes::~NestedTestAllTypes() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.NestedTestAllTypes)
  SharedDtor();
}

void NestedTestAllTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete child_;
  if (this != internal_default_instance()) delete payload_;
}

void NestedTestAllTypes::ArenaDtor(void* object) {
  NestedTestAllTypes* _this = reinterpret_cast< NestedTestAllTypes* >(object);
  (void)_this;
}
void NestedTestAllTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NestedTestAllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NestedTestAllTypes& NestedTestAllTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void NestedTestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.NestedTestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_child_.Clear();
  if (GetArenaNoVirtual() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  _internal_metadata_.Clear();
}

const char* NestedTestAllTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto3_arena_unittest.NestedTestAllTypes child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto3_arena_unittest.TestAllTypes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto3_arena_unittest.NestedTestAllTypes repeated_child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NestedTestAllTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.NestedTestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_arena_unittest.NestedTestAllTypes child = 1;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::child(this), target, stream);
  }

  // .proto3_arena_unittest.TestAllTypes payload = 2;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  // repeated .proto3_arena_unittest.NestedTestAllTypes repeated_child = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_child_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_repeated_child(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.NestedTestAllTypes)
  return target;
}

size_t NestedTestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.NestedTestAllTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto3_arena_unittest.NestedTestAllTypes repeated_child = 3;
  total_size += 1UL * this->_internal_repeated_child_size();
  for (const auto& msg : this->repeated_child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto3_arena_unittest.NestedTestAllTypes child = 1;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // .proto3_arena_unittest.TestAllTypes payload = 2;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NestedTestAllTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.NestedTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const NestedTestAllTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NestedTestAllTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.NestedTestAllTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.NestedTestAllTypes)
    MergeFrom(*source);
  }
}

void NestedTestAllTypes::MergeFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.NestedTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_child_.MergeFrom(from.repeated_child_);
  if (from.has_child()) {
    _internal_mutable_child()->::proto3_arena_unittest::NestedTestAllTypes::MergeFrom(from._internal_child());
  }
  if (from.has_payload()) {
    _internal_mutable_payload()->::proto3_arena_unittest::TestAllTypes::MergeFrom(from._internal_payload());
  }
}

void NestedTestAllTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedTestAllTypes::CopyFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedTestAllTypes::IsInitialized() const {
  return true;
}

void NestedTestAllTypes::InternalSwap(NestedTestAllTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  repeated_child_.InternalSwap(&other->repeated_child_);
  swap(child_, other->child_);
  swap(payload_, other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedTestAllTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForeignMessage::InitAsDefaultInstance() {
}
class ForeignMessage::_Internal {
 public:
};

ForeignMessage::ForeignMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.ForeignMessage)
}
ForeignMessage::ForeignMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.ForeignMessage)
}
ForeignMessage::ForeignMessage(const ForeignMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  c_ = from.c_;
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.ForeignMessage)
}

void ForeignMessage::SharedCtor() {
  c_ = 0;
}

ForeignMessage::~ForeignMessage() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.ForeignMessage)
  SharedDtor();
}

void ForeignMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ForeignMessage::ArenaDtor(void* object) {
  ForeignMessage* _this = reinterpret_cast< ForeignMessage* >(object);
  (void)_this;
}
void ForeignMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForeignMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForeignMessage& ForeignMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForeignMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void ForeignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.ForeignMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_ = 0;
  _internal_metadata_.Clear();
}

const char* ForeignMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForeignMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.ForeignMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 c = 1;
  if (this->c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.ForeignMessage)
  return target;
}

size_t ForeignMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.ForeignMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 c = 1;
  if (this->c() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_c());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForeignMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ForeignMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForeignMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.ForeignMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.ForeignMessage)
    MergeFrom(*source);
  }
}

void ForeignMessage::MergeFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.c() != 0) {
    _internal_set_c(from._internal_c());
  }
}

void ForeignMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForeignMessage::CopyFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessage::IsInitialized() const {
  return true;
}

void ForeignMessage::InternalSwap(ForeignMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(c_, other->c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForeignMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestEmptyMessage::InitAsDefaultInstance() {
}
class TestEmptyMessage::_Internal {
 public:
};

TestEmptyMessage::TestEmptyMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.TestEmptyMessage)
}
TestEmptyMessage::TestEmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.TestEmptyMessage)
}
TestEmptyMessage::TestEmptyMessage(const TestEmptyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.TestEmptyMessage)
}

void TestEmptyMessage::SharedCtor() {
}

TestEmptyMessage::~TestEmptyMessage() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.TestEmptyMessage)
  SharedDtor();
}

void TestEmptyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestEmptyMessage::ArenaDtor(void* object) {
  TestEmptyMessage* _this = reinterpret_cast< TestEmptyMessage* >(object);
  (void)_this;
}
void TestEmptyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestEmptyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestEmptyMessage& TestEmptyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestEmptyMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void TestEmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.TestEmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* TestEmptyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestEmptyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.TestEmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.TestEmptyMessage)
  return target;
}

size_t TestEmptyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.TestEmptyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEmptyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.TestEmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEmptyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestEmptyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.TestEmptyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.TestEmptyMessage)
    MergeFrom(*source);
  }
}

void TestEmptyMessage::MergeFrom(const TestEmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.TestEmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestEmptyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.TestEmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEmptyMessage::CopyFrom(const TestEmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.TestEmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEmptyMessage::IsInitialized() const {
  return true;
}

void TestEmptyMessage::InternalSwap(TestEmptyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEmptyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::InitAsDefaultInstance() {
}
class TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_Internal {
 public:
};

TestPickleNestedMessage_NestedMessage_NestedNestedMessage::TestPickleNestedMessage_NestedMessage_NestedNestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
}
TestPickleNestedMessage_NestedMessage_NestedNestedMessage::TestPickleNestedMessage_NestedMessage_NestedNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
}
TestPickleNestedMessage_NestedMessage_NestedNestedMessage::TestPickleNestedMessage_NestedMessage_NestedNestedMessage(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cc_ = from.cc_;
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::SharedCtor() {
  cc_ = 0;
}

TestPickleNestedMessage_NestedMessage_NestedNestedMessage::~TestPickleNestedMessage_NestedMessage_NestedNestedMessage() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  SharedDtor();
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::ArenaDtor(void* object) {
  TestPickleNestedMessage_NestedMessage_NestedNestedMessage* _this = reinterpret_cast< TestPickleNestedMessage_NestedMessage_NestedNestedMessage* >(object);
  (void)_this;
}
void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& TestPickleNestedMessage_NestedMessage_NestedNestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cc_ = 0;
  _internal_metadata_.Clear();
}

const char* TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cc = 1;
  if (this->cc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  return target;
}

size_t TestPickleNestedMessage_NestedMessage_NestedNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cc = 1;
  if (this->cc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPickleNestedMessage_NestedMessage_NestedNestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPickleNestedMessage_NestedMessage_NestedNestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
    MergeFrom(*source);
  }
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::MergeFrom(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cc() != 0) {
    _internal_set_cc(from._internal_cc());
  }
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::CopyFrom(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPickleNestedMessage_NestedMessage_NestedNestedMessage::IsInitialized() const {
  return true;
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::InternalSwap(TestPickleNestedMessage_NestedMessage_NestedNestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cc_, other->cc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPickleNestedMessage_NestedMessage_NestedNestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPickleNestedMessage_NestedMessage::InitAsDefaultInstance() {
}
class TestPickleNestedMessage_NestedMessage::_Internal {
 public:
};

TestPickleNestedMessage_NestedMessage::TestPickleNestedMessage_NestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
}
TestPickleNestedMessage_NestedMessage::TestPickleNestedMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
}
TestPickleNestedMessage_NestedMessage::TestPickleNestedMessage_NestedMessage(const TestPickleNestedMessage_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bb_ = from.bb_;
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
}

void TestPickleNestedMessage_NestedMessage::SharedCtor() {
  bb_ = 0;
}

TestPickleNestedMessage_NestedMessage::~TestPickleNestedMessage_NestedMessage() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
  SharedDtor();
}

void TestPickleNestedMessage_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestPickleNestedMessage_NestedMessage::ArenaDtor(void* object) {
  TestPickleNestedMessage_NestedMessage* _this = reinterpret_cast< TestPickleNestedMessage_NestedMessage* >(object);
  (void)_this;
}
void TestPickleNestedMessage_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPickleNestedMessage_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPickleNestedMessage_NestedMessage& TestPickleNestedMessage_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void TestPickleNestedMessage_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bb_ = 0;
  _internal_metadata_.Clear();
}

const char* TestPickleNestedMessage_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPickleNestedMessage_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bb = 1;
  if (this->bb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
  return target;
}

size_t TestPickleNestedMessage_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bb = 1;
  if (this->bb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPickleNestedMessage_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPickleNestedMessage_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPickleNestedMessage_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
    MergeFrom(*source);
  }
}

void TestPickleNestedMessage_NestedMessage::MergeFrom(const TestPickleNestedMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bb() != 0) {
    _internal_set_bb(from._internal_bb());
  }
}

void TestPickleNestedMessage_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPickleNestedMessage_NestedMessage::CopyFrom(const TestPickleNestedMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.TestPickleNestedMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPickleNestedMessage_NestedMessage::IsInitialized() const {
  return true;
}

void TestPickleNestedMessage_NestedMessage::InternalSwap(TestPickleNestedMessage_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bb_, other->bb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPickleNestedMessage_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPickleNestedMessage::InitAsDefaultInstance() {
}
class TestPickleNestedMessage::_Internal {
 public:
};

TestPickleNestedMessage::TestPickleNestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_arena_unittest.TestPickleNestedMessage)
}
TestPickleNestedMessage::TestPickleNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto3_arena_unittest.TestPickleNestedMessage)
}
TestPickleNestedMessage::TestPickleNestedMessage(const TestPickleNestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_arena_unittest.TestPickleNestedMessage)
}

void TestPickleNestedMessage::SharedCtor() {
}

TestPickleNestedMessage::~TestPickleNestedMessage() {
  // @@protoc_insertion_point(destructor:proto3_arena_unittest.TestPickleNestedMessage)
  SharedDtor();
}

void TestPickleNestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestPickleNestedMessage::ArenaDtor(void* object) {
  TestPickleNestedMessage* _this = reinterpret_cast< TestPickleNestedMessage* >(object);
  (void)_this;
}
void TestPickleNestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPickleNestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPickleNestedMessage& TestPickleNestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_5fproto3_5farena_2eproto.base);
  return *internal_default_instance();
}


void TestPickleNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_arena_unittest.TestPickleNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* TestPickleNestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPickleNestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_arena_unittest.TestPickleNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_arena_unittest.TestPickleNestedMessage)
  return target;
}

size_t TestPickleNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_arena_unittest.TestPickleNestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPickleNestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_arena_unittest.TestPickleNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPickleNestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPickleNestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_arena_unittest.TestPickleNestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_arena_unittest.TestPickleNestedMessage)
    MergeFrom(*source);
  }
}

void TestPickleNestedMessage::MergeFrom(const TestPickleNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_arena_unittest.TestPickleNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestPickleNestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_arena_unittest.TestPickleNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPickleNestedMessage::CopyFrom(const TestPickleNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_arena_unittest.TestPickleNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPickleNestedMessage::IsInitialized() const {
  return true;
}

void TestPickleNestedMessage::InternalSwap(TestPickleNestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPickleNestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto3_arena_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::TestAllTypes_NestedMessage* Arena::CreateMaybeMessage< ::proto3_arena_unittest::TestAllTypes_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::TestAllTypes_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::TestAllTypes* Arena::CreateMaybeMessage< ::proto3_arena_unittest::TestAllTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::TestAllTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::TestPackedTypes* Arena::CreateMaybeMessage< ::proto3_arena_unittest::TestPackedTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::TestPackedTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::TestUnpackedTypes* Arena::CreateMaybeMessage< ::proto3_arena_unittest::TestUnpackedTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::TestUnpackedTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::NestedTestAllTypes* Arena::CreateMaybeMessage< ::proto3_arena_unittest::NestedTestAllTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::NestedTestAllTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::ForeignMessage* Arena::CreateMaybeMessage< ::proto3_arena_unittest::ForeignMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::ForeignMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::TestEmptyMessage* Arena::CreateMaybeMessage< ::proto3_arena_unittest::TestEmptyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::TestEmptyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage* Arena::CreateMaybeMessage< ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage* Arena::CreateMaybeMessage< ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::TestPickleNestedMessage_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto3_arena_unittest::TestPickleNestedMessage* Arena::CreateMaybeMessage< ::proto3_arena_unittest::TestPickleNestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto3_arena_unittest::TestPickleNestedMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
