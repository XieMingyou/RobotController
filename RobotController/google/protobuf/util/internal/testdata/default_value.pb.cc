// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/default_value.proto

#include "google/protobuf/util/internal/testdata/default_value.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyData_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnyData_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntToStringMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntToStringMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMap_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MixedMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MixedMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MixedMap2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MixedMap2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringtoIntMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringtoIntMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StructMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
namespace proto_util_converter {
namespace testing {
class DefaultValueTestCasesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultValueTestCases> _instance;
} _DefaultValueTestCases_default_instance_;
class DoubleMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleMessage> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_value_;
} _DoubleMessage_default_instance_;
class StructMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StructMessage> _instance;
} _StructMessage_default_instance_;
class ValueMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValueMessage> _instance;
} _ValueMessage_default_instance_;
class ListValueMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListValueMessage> _instance;
} _ListValueMessage_default_instance_;
class RequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestMessage> _instance;
} _RequestMessage_default_instance_;
class AnyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyMessage> _instance;
} _AnyMessage_default_instance_;
class AnyData_MapDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyData_MapDataEntry_DoNotUse> _instance;
} _AnyData_MapDataEntry_DoNotUse_default_instance_;
class AnyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyData> _instance;
} _AnyData_default_instance_;
class StringtoIntMap_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringtoIntMap_MapEntry_DoNotUse> _instance;
} _StringtoIntMap_MapEntry_DoNotUse_default_instance_;
class StringtoIntMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringtoIntMap> _instance;
} _StringtoIntMap_default_instance_;
class IntToStringMap_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntToStringMap_MapEntry_DoNotUse> _instance;
} _IntToStringMap_MapEntry_DoNotUse_default_instance_;
class IntToStringMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntToStringMap> _instance;
} _IntToStringMap_default_instance_;
class MixedMap_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MixedMap_MapEntry_DoNotUse> _instance;
} _MixedMap_MapEntry_DoNotUse_default_instance_;
class MixedMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MixedMap> _instance;
} _MixedMap_default_instance_;
class MixedMap2_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MixedMap2_MapEntry_DoNotUse> _instance;
} _MixedMap2_MapEntry_DoNotUse_default_instance_;
class MixedMap2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MixedMap2> _instance;
} _MixedMap2_default_instance_;
class MessageMap_MDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMap_M> _instance;
} _MessageMap_M_default_instance_;
class MessageMap_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMap_MapEntry_DoNotUse> _instance;
} _MessageMap_MapEntry_DoNotUse_default_instance_;
class MessageMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMap> _instance;
} _MessageMap_default_instance_;
class DoubleValueMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleValueMessage> _instance;
} _DoubleValueMessage_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
static void InitDefaultsscc_info_AnyData_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_AnyData_default_instance_;
    new (ptr) ::proto_util_converter::testing::AnyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::AnyData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyData_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnyData_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_AnyData_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_AnyData_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_AnyData_MapDataEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse();
  }
  ::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnyData_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnyData_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {}};

static void InitDefaultsscc_info_AnyMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_AnyMessage_default_instance_;
    new (ptr) ::proto_util_converter::testing::AnyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::AnyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnyMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_AnyData_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_DefaultValueTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_DefaultValueTestCases_default_instance_;
    new (ptr) ::proto_util_converter::testing::DefaultValueTestCases();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::DefaultValueTestCases::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_DefaultValueTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_DefaultValueTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_DoubleMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_StructMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_ValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_ListValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_AnyMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_StringtoIntMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_IntToStringMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_MixedMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_MixedMap2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_MessageMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
      &scc_info_DoubleValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_DoubleMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_DoubleMessage_default_instance_;
    new (ptr) ::proto_util_converter::testing::DoubleMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::DoubleMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoubleMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_DoubleValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_DoubleValueMessage_default_instance_;
    new (ptr) ::proto_util_converter::testing::DoubleValueMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::DoubleValueMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoubleValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_IntToStringMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_IntToStringMap_default_instance_;
    new (ptr) ::proto_util_converter::testing::IntToStringMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::IntToStringMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntToStringMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntToStringMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_IntToStringMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_IntToStringMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_IntToStringMap_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntToStringMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntToStringMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {}};

static void InitDefaultsscc_info_ListValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_ListValueMessage_default_instance_;
    new (ptr) ::proto_util_converter::testing::ListValueMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::ListValueMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_MessageMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MessageMap_default_instance_;
    new (ptr) ::proto_util_converter::testing::MessageMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MessageMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_MessageMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_MessageMap_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MessageMap_M_default_instance_;
    new (ptr) ::proto_util_converter::testing::MessageMap_M();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MessageMap_M::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMap_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageMap_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {}};

static void InitDefaultsscc_info_MessageMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MessageMap_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_MessageMap_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_MixedMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MixedMap_default_instance_;
    new (ptr) ::proto_util_converter::testing::MixedMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MixedMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MixedMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MixedMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_MixedMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_MixedMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MixedMap_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MixedMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MixedMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {}};

static void InitDefaultsscc_info_MixedMap2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MixedMap2_default_instance_;
    new (ptr) ::proto_util_converter::testing::MixedMap2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MixedMap2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MixedMap2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MixedMap2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_MixedMap2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_MixedMap2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MixedMap2_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MixedMap2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MixedMap2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {}};

static void InitDefaultsscc_info_RequestMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_RequestMessage_default_instance_;
    new (ptr) ::proto_util_converter::testing::RequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::RequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {}};

static void InitDefaultsscc_info_StringtoIntMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_StringtoIntMap_default_instance_;
    new (ptr) ::proto_util_converter::testing::StringtoIntMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::StringtoIntMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringtoIntMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StringtoIntMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_StringtoIntMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_StringtoIntMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_StringtoIntMap_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringtoIntMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringtoIntMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {}};

static void InitDefaultsscc_info_StructMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_StructMessage_default_instance_;
    new (ptr) ::proto_util_converter::testing::StructMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::StructMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StructMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StructMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_ValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_ValueMessage_default_instance_;
    new (ptr) ::proto_util_converter::testing::ValueMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::ValueMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_double_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_with_default_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_with_nondefault_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_message_with_oneof_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_struct2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_null_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_values_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_nested_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_nested_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_list_of_nulls_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_list_of_lists_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_list_of_structs_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, value_wrapper_simple_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, value_wrapper_with_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, value_wrapper_with_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, list_value_wrapper_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_value_simple_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_value_with_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_value_with_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_listvalue_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, type_only_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, recursive_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, any_with_message_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, any_with_nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, any_with_message_containing_map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, any_with_message_containing_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, string_to_int_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, int_to_string_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, mixed1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, mixed2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_mixed2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, map_of_objects_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, mixed_empty_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, message_map_empty_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_value_default_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, double_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, double_wrapper_),
  offsetof(::proto_util_converter::testing::DoubleMessageDefaultTypeInternal, str_value_),
  offsetof(::proto_util_converter::testing::DoubleMessageDefaultTypeInternal, num_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructMessage, struct__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ValueMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ValueMessage, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ListValueMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ListValueMessage, shopping_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::RequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::RequestMessage, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyMessage, any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyMessage, data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, attr_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, str_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, msgs_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, nested_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, map_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, struct_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, repeated_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap, msg_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap, int_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2, ee_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_M, inner_int_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_M, inner_text_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleValueMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleValueMessage, double__),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto_util_converter::testing::DefaultValueTestCases)},
  { 49, -1, sizeof(::proto_util_converter::testing::DoubleMessage)},
  { 62, -1, sizeof(::proto_util_converter::testing::StructMessage)},
  { 68, -1, sizeof(::proto_util_converter::testing::ValueMessage)},
  { 74, -1, sizeof(::proto_util_converter::testing::ListValueMessage)},
  { 80, -1, sizeof(::proto_util_converter::testing::RequestMessage)},
  { 86, -1, sizeof(::proto_util_converter::testing::AnyMessage)},
  { 93, 100, sizeof(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse)},
  { 102, -1, sizeof(::proto_util_converter::testing::AnyData)},
  { 114, 121, sizeof(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse)},
  { 123, -1, sizeof(::proto_util_converter::testing::StringtoIntMap)},
  { 129, 136, sizeof(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse)},
  { 138, -1, sizeof(::proto_util_converter::testing::IntToStringMap)},
  { 144, 151, sizeof(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse)},
  { 153, -1, sizeof(::proto_util_converter::testing::MixedMap)},
  { 161, 168, sizeof(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse)},
  { 170, -1, sizeof(::proto_util_converter::testing::MixedMap2)},
  { 178, -1, sizeof(::proto_util_converter::testing::MessageMap_M)},
  { 185, 192, sizeof(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse)},
  { 194, -1, sizeof(::proto_util_converter::testing::MessageMap)},
  { 200, -1, sizeof(::proto_util_converter::testing::DoubleValueMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_DefaultValueTestCases_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_DoubleMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_StructMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_ValueMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_ListValueMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_RequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_AnyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_AnyData_MapDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_AnyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_StringtoIntMap_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_StringtoIntMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_IntToStringMap_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_IntToStringMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MixedMap_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MixedMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MixedMap2_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MixedMap2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MessageMap_M_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MessageMap_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MessageMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_DoubleValueMessage_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:google/protobuf/util/internal/testdata"
  "/default_value.proto\022\034proto_util_convert"
  "er.testing\032\031google/protobuf/any.proto\032\034g"
  "oogle/protobuf/struct.proto\032\036google/prot"
  "obuf/wrappers.proto\"\307\030\n\025DefaultValueTest"
  "Cases\022A\n\014empty_double\030\001 \001(\0132+.proto_util"
  "_converter.testing.DoubleMessage\022N\n\031doub"
  "le_with_default_value\030\002 \001(\0132+.proto_util"
  "_converter.testing.DoubleMessage\022Q\n\034doub"
  "le_with_nondefault_value\030\003 \001(\0132+.proto_u"
  "til_converter.testing.DoubleMessage\022D\n\017r"
  "epeated_double\030\004 \001(\0132+.proto_util_conver"
  "ter.testing.DoubleMessage\022C\n\016nested_mess"
  "age\030\005 \001(\0132+.proto_util_converter.testing"
  ".DoubleMessage\022L\n\027repeated_nested_messag"
  "e\030\006 \001(\0132+.proto_util_converter.testing.D"
  "oubleMessage\022N\n\031double_message_with_oneo"
  "f\030\007 \001(\0132+.proto_util_converter.testing.D"
  "oubleMessage\022B\n\014empty_struct\030\311\001 \001(\0132+.pr"
  "oto_util_converter.testing.StructMessage"
  "\022C\n\rempty_struct2\030\312\001 \001(\0132+.proto_util_co"
  "nverter.testing.StructMessage\022L\n\026struct_"
  "with_null_value\030\313\001 \001(\0132+.proto_util_conv"
  "erter.testing.StructMessage\022H\n\022struct_wi"
  "th_values\030\314\001 \001(\0132+.proto_util_converter."
  "testing.StructMessage\022O\n\031struct_with_nes"
  "ted_struct\030\315\001 \001(\0132+.proto_util_converter"
  ".testing.StructMessage\022M\n\027struct_with_ne"
  "sted_list\030\316\001 \001(\0132+.proto_util_converter."
  "testing.StructMessage\022O\n\031struct_with_lis"
  "t_of_nulls\030\317\001 \001(\0132+.proto_util_converter"
  ".testing.StructMessage\022O\n\031struct_with_li"
  "st_of_lists\030\320\001 \001(\0132+.proto_util_converte"
  "r.testing.StructMessage\022Q\n\033struct_with_l"
  "ist_of_structs\030\321\001 \001(\0132+.proto_util_conve"
  "rter.testing.StructMessage\0222\n\020top_level_"
  "struct\030\322\001 \001(\0132\027.google.protobuf.Struct\022I"
  "\n\024value_wrapper_simple\030\324\001 \001(\0132*.proto_ut"
  "il_converter.testing.ValueMessage\022N\n\031val"
  "ue_wrapper_with_struct\030\325\001 \001(\0132*.proto_ut"
  "il_converter.testing.ValueMessage\022L\n\027val"
  "ue_wrapper_with_list\030\326\001 \001(\0132*.proto_util"
  "_converter.testing.ValueMessage\022K\n\022list_"
  "value_wrapper\030\327\001 \001(\0132..proto_util_conver"
  "ter.testing.ListValueMessage\0227\n\026top_leve"
  "l_value_simple\030\330\001 \001(\0132\026.google.protobuf."
  "Value\022<\n\033top_level_value_with_struct\030\331\001 "
  "\001(\0132\026.google.protobuf.Value\022:\n\031top_level"
  "_value_with_list\030\332\001 \001(\0132\026.google.protobu"
  "f.Value\0228\n\023top_level_listvalue\030\333\001 \001(\0132\032."
  "google.protobuf.ListValue\022<\n\tempty_any\030\255"
  "\002 \001(\0132(.proto_util_converter.testing.Any"
  "Message\022@\n\rtype_only_any\030\256\002 \001(\0132(.proto_"
  "util_converter.testing.AnyMessage\022@\n\rrec"
  "ursive_any\030\257\002 \001(\0132(.proto_util_converter"
  ".testing.AnyMessage\022I\n\026any_with_message_"
  "value\030\260\002 \001(\0132(.proto_util_converter.test"
  "ing.AnyMessage\022J\n\027any_with_nested_messag"
  "e\030\261\002 \001(\0132(.proto_util_converter.testing."
  "AnyMessage\022R\n\037any_with_message_containin"
  "g_map\030\262\002 \001(\0132(.proto_util_converter.test"
  "ing.AnyMessage\022U\n\"any_with_message_conta"
  "ining_struct\030\263\002 \001(\0132(.proto_util_convert"
  "er.testing.AnyMessage\022,\n\rtop_level_any\030\264"
  "\002 \001(\0132\024.google.protobuf.Any\022@\n\tempty_map"
  "\030\221\003 \001(\0132,.proto_util_converter.testing.S"
  "tringtoIntMap\022D\n\rstring_to_int\030\222\003 \001(\0132,."
  "proto_util_converter.testing.StringtoInt"
  "Map\022D\n\rint_to_string\030\223\003 \001(\0132,.proto_util"
  "_converter.testing.IntToStringMap\0227\n\006mix"
  "ed1\030\224\003 \001(\0132&.proto_util_converter.testin"
  "g.MixedMap\0228\n\006mixed2\030\225\003 \001(\0132\'.proto_util"
  "_converter.testing.MixedMap2\022>\n\014empty_mi"
  "xed2\030\226\003 \001(\0132\'.proto_util_converter.testi"
  "ng.MixedMap2\022A\n\016map_of_objects\030\227\003 \001(\0132(."
  "proto_util_converter.testing.MessageMap\022"
  "<\n\013mixed_empty\030\230\003 \001(\0132&.proto_util_conve"
  "rter.testing.MixedMap\022D\n\021message_map_emp"
  "ty\030\231\003 \001(\0132(.proto_util_converter.testing"
  ".MessageMap\022G\n\014double_value\030\365\003 \001(\01320.pro"
  "to_util_converter.testing.DoubleValueMes"
  "sage\022O\n\024double_value_default\030\366\003 \001(\01320.pr"
  "oto_util_converter.testing.DoubleValueMe"
  "ssage\"\272\002\n\rDoubleMessage\022\024\n\014double_value\030"
  "\001 \001(\001\022\027\n\017repeated_double\030\002 \003(\001\022C\n\016nested"
  "_message\030\003 \001(\0132+.proto_util_converter.te"
  "sting.DoubleMessage\022L\n\027repeated_nested_m"
  "essage\030\004 \003(\0132+.proto_util_converter.test"
  "ing.DoubleMessage\0224\n\016double_wrapper\030d \001("
  "\0132\034.google.protobuf.DoubleValue\022\023\n\tstr_v"
  "alue\030p \001(\tH\000\022\023\n\tnum_value\030q \001(\003H\000B\007\n\005val"
  "ue\"8\n\rStructMessage\022\'\n\006struct\030\001 \001(\0132\027.go"
  "ogle.protobuf.Struct\"5\n\014ValueMessage\022%\n\005"
  "value\030\001 \001(\0132\026.google.protobuf.Value\"E\n\020L"
  "istValueMessage\0221\n\rshopping_list\030\001 \001(\0132\032"
  ".google.protobuf.ListValue\"!\n\016RequestMes"
  "sage\022\017\n\007content\030\001 \001(\t\"d\n\nAnyMessage\022!\n\003a"
  "ny\030\001 \001(\0132\024.google.protobuf.Any\0223\n\004data\030\002"
  " \001(\0132%.proto_util_converter.testing.AnyD"
  "ata\"\320\002\n\007AnyData\022\014\n\004attr\030\001 \001(\005\022\013\n\003str\030\002 \001"
  "(\t\022\014\n\004msgs\030\003 \003(\t\022:\n\013nested_data\030\004 \001(\0132%."
  "proto_util_converter.testing.AnyData\022D\n\010"
  "map_data\030\007 \003(\01322.proto_util_converter.te"
  "sting.AnyData.MapDataEntry\022,\n\013struct_dat"
  "a\030\010 \001(\0132\027.google.protobuf.Struct\022<\n\rrepe"
  "ated_data\030\t \003(\0132%.proto_util_converter.t"
  "esting.AnyData\032.\n\014MapDataEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\200\001\n\016StringtoIntMa"
  "p\022B\n\003map\030\001 \003(\01325.proto_util_converter.te"
  "sting.StringtoIntMap.MapEntry\032*\n\010MapEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\200\001\n\016In"
  "tToStringMap\022B\n\003map\030\001 \003(\01325.proto_util_c"
  "onverter.testing.IntToStringMap.MapEntry"
  "\032*\n\010MapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t"
  ":\0028\001\"\224\001\n\010MixedMap\022\013\n\003msg\030\001 \001(\t\022<\n\003map\030\002 "
  "\003(\0132/.proto_util_converter.testing.Mixed"
  "Map.MapEntry\022\021\n\tint_value\030\003 \001(\005\032*\n\010MapEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"\337\001\n\t"
  "MixedMap2\022=\n\003map\030\001 \003(\01320.proto_util_conv"
  "erter.testing.MixedMap2.MapEntry\0225\n\002ee\030\002"
  " \001(\0162).proto_util_converter.testing.Mixe"
  "dMap2.E\022\013\n\003msg\030\004 \001(\t\032*\n\010MapEntry\022\013\n\003key\030"
  "\001 \001(\005\022\r\n\005value\030\002 \001(\010:\0028\001\"#\n\001E\022\006\n\002E0\020\000\022\006\n"
  "\002E1\020\001\022\006\n\002E2\020\002\022\006\n\002E3\020\003\"\320\001\n\nMessageMap\022>\n\003"
  "map\030\001 \003(\01321.proto_util_converter.testing"
  ".MessageMap.MapEntry\032*\n\001M\022\021\n\tinner_int\030\001"
  " \001(\005\022\022\n\ninner_text\030\002 \001(\t\032V\n\010MapEntry\022\013\n\003"
  "key\030\001 \001(\t\0229\n\005value\030\002 \001(\0132*.proto_util_co"
  "nverter.testing.MessageMap.M:\0028\001\"B\n\022Doub"
  "leValueMessage\022,\n\006double\030\001 \001(\0132\034.google."
  "protobuf.DoubleValue2\204\001\n\027DefaultValueTes"
  "tService\022i\n\004Call\022,.proto_util_converter."
  "testing.RequestMessage\0323.proto_util_conv"
  "erter.testing.DefaultValueTestCasesb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_sccs[21] = {
  &scc_info_AnyData_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_AnyData_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_AnyMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_DefaultValueTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_DoubleMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_DoubleValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_IntToStringMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_IntToStringMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_ListValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_MessageMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_MessageMap_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_MessageMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_MixedMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_MixedMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_MixedMap2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_MixedMap2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_RequestMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_StringtoIntMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_StringtoIntMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_StructMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
  &scc_info_ValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once;
static bool descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto = {
  &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_initialized, descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto, "google/protobuf/util/internal/testdata/default_value.proto", 5363,
  &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_sccs, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_deps, 21, 3,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto, 21, file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto, file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto), true);
namespace proto_util_converter {
namespace testing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MixedMap2_E_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[0];
}
bool MixedMap2_E_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MixedMap2_E MixedMap2::E0;
constexpr MixedMap2_E MixedMap2::E1;
constexpr MixedMap2_E MixedMap2::E2;
constexpr MixedMap2_E MixedMap2::E3;
constexpr MixedMap2_E MixedMap2::E_MIN;
constexpr MixedMap2_E MixedMap2::E_MAX;
constexpr int MixedMap2::E_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DefaultValueTestCases::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->empty_double_ = const_cast< ::proto_util_converter::testing::DoubleMessage*>(
      ::proto_util_converter::testing::DoubleMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->double_with_default_value_ = const_cast< ::proto_util_converter::testing::DoubleMessage*>(
      ::proto_util_converter::testing::DoubleMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->double_with_nondefault_value_ = const_cast< ::proto_util_converter::testing::DoubleMessage*>(
      ::proto_util_converter::testing::DoubleMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->repeated_double_ = const_cast< ::proto_util_converter::testing::DoubleMessage*>(
      ::proto_util_converter::testing::DoubleMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->nested_message_ = const_cast< ::proto_util_converter::testing::DoubleMessage*>(
      ::proto_util_converter::testing::DoubleMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->repeated_nested_message_ = const_cast< ::proto_util_converter::testing::DoubleMessage*>(
      ::proto_util_converter::testing::DoubleMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->double_message_with_oneof_ = const_cast< ::proto_util_converter::testing::DoubleMessage*>(
      ::proto_util_converter::testing::DoubleMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->empty_struct_ = const_cast< ::proto_util_converter::testing::StructMessage*>(
      ::proto_util_converter::testing::StructMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->empty_struct2_ = const_cast< ::proto_util_converter::testing::StructMessage*>(
      ::proto_util_converter::testing::StructMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->struct_with_null_value_ = const_cast< ::proto_util_converter::testing::StructMessage*>(
      ::proto_util_converter::testing::StructMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->struct_with_values_ = const_cast< ::proto_util_converter::testing::StructMessage*>(
      ::proto_util_converter::testing::StructMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->struct_with_nested_struct_ = const_cast< ::proto_util_converter::testing::StructMessage*>(
      ::proto_util_converter::testing::StructMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->struct_with_nested_list_ = const_cast< ::proto_util_converter::testing::StructMessage*>(
      ::proto_util_converter::testing::StructMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->struct_with_list_of_nulls_ = const_cast< ::proto_util_converter::testing::StructMessage*>(
      ::proto_util_converter::testing::StructMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->struct_with_list_of_lists_ = const_cast< ::proto_util_converter::testing::StructMessage*>(
      ::proto_util_converter::testing::StructMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->struct_with_list_of_structs_ = const_cast< ::proto_util_converter::testing::StructMessage*>(
      ::proto_util_converter::testing::StructMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->top_level_struct_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->value_wrapper_simple_ = const_cast< ::proto_util_converter::testing::ValueMessage*>(
      ::proto_util_converter::testing::ValueMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->value_wrapper_with_struct_ = const_cast< ::proto_util_converter::testing::ValueMessage*>(
      ::proto_util_converter::testing::ValueMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->value_wrapper_with_list_ = const_cast< ::proto_util_converter::testing::ValueMessage*>(
      ::proto_util_converter::testing::ValueMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->list_value_wrapper_ = const_cast< ::proto_util_converter::testing::ListValueMessage*>(
      ::proto_util_converter::testing::ListValueMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->top_level_value_simple_ = const_cast< PROTOBUF_NAMESPACE_ID::Value*>(
      PROTOBUF_NAMESPACE_ID::Value::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->top_level_value_with_struct_ = const_cast< PROTOBUF_NAMESPACE_ID::Value*>(
      PROTOBUF_NAMESPACE_ID::Value::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->top_level_value_with_list_ = const_cast< PROTOBUF_NAMESPACE_ID::Value*>(
      PROTOBUF_NAMESPACE_ID::Value::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->top_level_listvalue_ = const_cast< PROTOBUF_NAMESPACE_ID::ListValue*>(
      PROTOBUF_NAMESPACE_ID::ListValue::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->empty_any_ = const_cast< ::proto_util_converter::testing::AnyMessage*>(
      ::proto_util_converter::testing::AnyMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->type_only_any_ = const_cast< ::proto_util_converter::testing::AnyMessage*>(
      ::proto_util_converter::testing::AnyMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->recursive_any_ = const_cast< ::proto_util_converter::testing::AnyMessage*>(
      ::proto_util_converter::testing::AnyMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->any_with_message_value_ = const_cast< ::proto_util_converter::testing::AnyMessage*>(
      ::proto_util_converter::testing::AnyMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->any_with_nested_message_ = const_cast< ::proto_util_converter::testing::AnyMessage*>(
      ::proto_util_converter::testing::AnyMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->any_with_message_containing_map_ = const_cast< ::proto_util_converter::testing::AnyMessage*>(
      ::proto_util_converter::testing::AnyMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->any_with_message_containing_struct_ = const_cast< ::proto_util_converter::testing::AnyMessage*>(
      ::proto_util_converter::testing::AnyMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->top_level_any_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->empty_map_ = const_cast< ::proto_util_converter::testing::StringtoIntMap*>(
      ::proto_util_converter::testing::StringtoIntMap::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->string_to_int_ = const_cast< ::proto_util_converter::testing::StringtoIntMap*>(
      ::proto_util_converter::testing::StringtoIntMap::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->int_to_string_ = const_cast< ::proto_util_converter::testing::IntToStringMap*>(
      ::proto_util_converter::testing::IntToStringMap::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->mixed1_ = const_cast< ::proto_util_converter::testing::MixedMap*>(
      ::proto_util_converter::testing::MixedMap::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->mixed2_ = const_cast< ::proto_util_converter::testing::MixedMap2*>(
      ::proto_util_converter::testing::MixedMap2::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->empty_mixed2_ = const_cast< ::proto_util_converter::testing::MixedMap2*>(
      ::proto_util_converter::testing::MixedMap2::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->map_of_objects_ = const_cast< ::proto_util_converter::testing::MessageMap*>(
      ::proto_util_converter::testing::MessageMap::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->mixed_empty_ = const_cast< ::proto_util_converter::testing::MixedMap*>(
      ::proto_util_converter::testing::MixedMap::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->message_map_empty_ = const_cast< ::proto_util_converter::testing::MessageMap*>(
      ::proto_util_converter::testing::MessageMap::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->double_value_ = const_cast< ::proto_util_converter::testing::DoubleValueMessage*>(
      ::proto_util_converter::testing::DoubleValueMessage::internal_default_instance());
  ::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance.get_mutable()->double_value_default_ = const_cast< ::proto_util_converter::testing::DoubleValueMessage*>(
      ::proto_util_converter::testing::DoubleValueMessage::internal_default_instance());
}
class DefaultValueTestCases::_Internal {
 public:
  static const ::proto_util_converter::testing::DoubleMessage& empty_double(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& double_with_default_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& double_with_nondefault_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& repeated_double(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& nested_message(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& repeated_nested_message(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& double_message_with_oneof(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& empty_struct(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& empty_struct2(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_null_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_values(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_nested_struct(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_nested_list(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_list_of_nulls(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_list_of_lists(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_list_of_structs(const DefaultValueTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& top_level_struct(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::ValueMessage& value_wrapper_simple(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::ValueMessage& value_wrapper_with_struct(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::ValueMessage& value_wrapper_with_list(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::ListValueMessage& list_value_wrapper(const DefaultValueTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Value& top_level_value_simple(const DefaultValueTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_struct(const DefaultValueTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_list(const DefaultValueTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::ListValue& top_level_listvalue(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& empty_any(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& type_only_any(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& recursive_any(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& any_with_message_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& any_with_nested_message(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& any_with_message_containing_map(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& any_with_message_containing_struct(const DefaultValueTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& top_level_any(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StringtoIntMap& empty_map(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StringtoIntMap& string_to_int(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::IntToStringMap& int_to_string(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MixedMap& mixed1(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MixedMap2& mixed2(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MixedMap2& empty_mixed2(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MessageMap& map_of_objects(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MixedMap& mixed_empty(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MessageMap& message_map_empty(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleValueMessage& double_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleValueMessage& double_value_default(const DefaultValueTestCases* msg);
};

const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::empty_double(const DefaultValueTestCases* msg) {
  return *msg->empty_double_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::double_with_default_value(const DefaultValueTestCases* msg) {
  return *msg->double_with_default_value_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::double_with_nondefault_value(const DefaultValueTestCases* msg) {
  return *msg->double_with_nondefault_value_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::repeated_double(const DefaultValueTestCases* msg) {
  return *msg->repeated_double_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::nested_message(const DefaultValueTestCases* msg) {
  return *msg->nested_message_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::repeated_nested_message(const DefaultValueTestCases* msg) {
  return *msg->repeated_nested_message_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::double_message_with_oneof(const DefaultValueTestCases* msg) {
  return *msg->double_message_with_oneof_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::empty_struct(const DefaultValueTestCases* msg) {
  return *msg->empty_struct_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::empty_struct2(const DefaultValueTestCases* msg) {
  return *msg->empty_struct2_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_null_value(const DefaultValueTestCases* msg) {
  return *msg->struct_with_null_value_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_values(const DefaultValueTestCases* msg) {
  return *msg->struct_with_values_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_nested_struct(const DefaultValueTestCases* msg) {
  return *msg->struct_with_nested_struct_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_nested_list(const DefaultValueTestCases* msg) {
  return *msg->struct_with_nested_list_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_list_of_nulls(const DefaultValueTestCases* msg) {
  return *msg->struct_with_list_of_nulls_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_list_of_lists(const DefaultValueTestCases* msg) {
  return *msg->struct_with_list_of_lists_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_list_of_structs(const DefaultValueTestCases* msg) {
  return *msg->struct_with_list_of_structs_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
DefaultValueTestCases::_Internal::top_level_struct(const DefaultValueTestCases* msg) {
  return *msg->top_level_struct_;
}
const ::proto_util_converter::testing::ValueMessage&
DefaultValueTestCases::_Internal::value_wrapper_simple(const DefaultValueTestCases* msg) {
  return *msg->value_wrapper_simple_;
}
const ::proto_util_converter::testing::ValueMessage&
DefaultValueTestCases::_Internal::value_wrapper_with_struct(const DefaultValueTestCases* msg) {
  return *msg->value_wrapper_with_struct_;
}
const ::proto_util_converter::testing::ValueMessage&
DefaultValueTestCases::_Internal::value_wrapper_with_list(const DefaultValueTestCases* msg) {
  return *msg->value_wrapper_with_list_;
}
const ::proto_util_converter::testing::ListValueMessage&
DefaultValueTestCases::_Internal::list_value_wrapper(const DefaultValueTestCases* msg) {
  return *msg->list_value_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::Value&
DefaultValueTestCases::_Internal::top_level_value_simple(const DefaultValueTestCases* msg) {
  return *msg->top_level_value_simple_;
}
const PROTOBUF_NAMESPACE_ID::Value&
DefaultValueTestCases::_Internal::top_level_value_with_struct(const DefaultValueTestCases* msg) {
  return *msg->top_level_value_with_struct_;
}
const PROTOBUF_NAMESPACE_ID::Value&
DefaultValueTestCases::_Internal::top_level_value_with_list(const DefaultValueTestCases* msg) {
  return *msg->top_level_value_with_list_;
}
const PROTOBUF_NAMESPACE_ID::ListValue&
DefaultValueTestCases::_Internal::top_level_listvalue(const DefaultValueTestCases* msg) {
  return *msg->top_level_listvalue_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::empty_any(const DefaultValueTestCases* msg) {
  return *msg->empty_any_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::type_only_any(const DefaultValueTestCases* msg) {
  return *msg->type_only_any_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::recursive_any(const DefaultValueTestCases* msg) {
  return *msg->recursive_any_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::any_with_message_value(const DefaultValueTestCases* msg) {
  return *msg->any_with_message_value_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::any_with_nested_message(const DefaultValueTestCases* msg) {
  return *msg->any_with_nested_message_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::any_with_message_containing_map(const DefaultValueTestCases* msg) {
  return *msg->any_with_message_containing_map_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::any_with_message_containing_struct(const DefaultValueTestCases* msg) {
  return *msg->any_with_message_containing_struct_;
}
const PROTOBUF_NAMESPACE_ID::Any&
DefaultValueTestCases::_Internal::top_level_any(const DefaultValueTestCases* msg) {
  return *msg->top_level_any_;
}
const ::proto_util_converter::testing::StringtoIntMap&
DefaultValueTestCases::_Internal::empty_map(const DefaultValueTestCases* msg) {
  return *msg->empty_map_;
}
const ::proto_util_converter::testing::StringtoIntMap&
DefaultValueTestCases::_Internal::string_to_int(const DefaultValueTestCases* msg) {
  return *msg->string_to_int_;
}
const ::proto_util_converter::testing::IntToStringMap&
DefaultValueTestCases::_Internal::int_to_string(const DefaultValueTestCases* msg) {
  return *msg->int_to_string_;
}
const ::proto_util_converter::testing::MixedMap&
DefaultValueTestCases::_Internal::mixed1(const DefaultValueTestCases* msg) {
  return *msg->mixed1_;
}
const ::proto_util_converter::testing::MixedMap2&
DefaultValueTestCases::_Internal::mixed2(const DefaultValueTestCases* msg) {
  return *msg->mixed2_;
}
const ::proto_util_converter::testing::MixedMap2&
DefaultValueTestCases::_Internal::empty_mixed2(const DefaultValueTestCases* msg) {
  return *msg->empty_mixed2_;
}
const ::proto_util_converter::testing::MessageMap&
DefaultValueTestCases::_Internal::map_of_objects(const DefaultValueTestCases* msg) {
  return *msg->map_of_objects_;
}
const ::proto_util_converter::testing::MixedMap&
DefaultValueTestCases::_Internal::mixed_empty(const DefaultValueTestCases* msg) {
  return *msg->mixed_empty_;
}
const ::proto_util_converter::testing::MessageMap&
DefaultValueTestCases::_Internal::message_map_empty(const DefaultValueTestCases* msg) {
  return *msg->message_map_empty_;
}
const ::proto_util_converter::testing::DoubleValueMessage&
DefaultValueTestCases::_Internal::double_value(const DefaultValueTestCases* msg) {
  return *msg->double_value_;
}
const ::proto_util_converter::testing::DoubleValueMessage&
DefaultValueTestCases::_Internal::double_value_default(const DefaultValueTestCases* msg) {
  return *msg->double_value_default_;
}
void DefaultValueTestCases::clear_top_level_struct() {
  if (GetArenaNoVirtual() == nullptr && top_level_struct_ != nullptr) {
    delete top_level_struct_;
  }
  top_level_struct_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_value_simple() {
  if (GetArenaNoVirtual() == nullptr && top_level_value_simple_ != nullptr) {
    delete top_level_value_simple_;
  }
  top_level_value_simple_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_value_with_struct() {
  if (GetArenaNoVirtual() == nullptr && top_level_value_with_struct_ != nullptr) {
    delete top_level_value_with_struct_;
  }
  top_level_value_with_struct_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_value_with_list() {
  if (GetArenaNoVirtual() == nullptr && top_level_value_with_list_ != nullptr) {
    delete top_level_value_with_list_;
  }
  top_level_value_with_list_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_listvalue() {
  if (GetArenaNoVirtual() == nullptr && top_level_listvalue_ != nullptr) {
    delete top_level_listvalue_;
  }
  top_level_listvalue_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_any() {
  if (GetArenaNoVirtual() == nullptr && top_level_any_ != nullptr) {
    delete top_level_any_;
  }
  top_level_any_ = nullptr;
}
DefaultValueTestCases::DefaultValueTestCases()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.DefaultValueTestCases)
}
DefaultValueTestCases::DefaultValueTestCases(const DefaultValueTestCases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_empty_double()) {
    empty_double_ = new ::proto_util_converter::testing::DoubleMessage(*from.empty_double_);
  } else {
    empty_double_ = nullptr;
  }
  if (from._internal_has_double_with_default_value()) {
    double_with_default_value_ = new ::proto_util_converter::testing::DoubleMessage(*from.double_with_default_value_);
  } else {
    double_with_default_value_ = nullptr;
  }
  if (from._internal_has_double_with_nondefault_value()) {
    double_with_nondefault_value_ = new ::proto_util_converter::testing::DoubleMessage(*from.double_with_nondefault_value_);
  } else {
    double_with_nondefault_value_ = nullptr;
  }
  if (from._internal_has_repeated_double()) {
    repeated_double_ = new ::proto_util_converter::testing::DoubleMessage(*from.repeated_double_);
  } else {
    repeated_double_ = nullptr;
  }
  if (from._internal_has_nested_message()) {
    nested_message_ = new ::proto_util_converter::testing::DoubleMessage(*from.nested_message_);
  } else {
    nested_message_ = nullptr;
  }
  if (from._internal_has_repeated_nested_message()) {
    repeated_nested_message_ = new ::proto_util_converter::testing::DoubleMessage(*from.repeated_nested_message_);
  } else {
    repeated_nested_message_ = nullptr;
  }
  if (from._internal_has_double_message_with_oneof()) {
    double_message_with_oneof_ = new ::proto_util_converter::testing::DoubleMessage(*from.double_message_with_oneof_);
  } else {
    double_message_with_oneof_ = nullptr;
  }
  if (from._internal_has_empty_struct()) {
    empty_struct_ = new ::proto_util_converter::testing::StructMessage(*from.empty_struct_);
  } else {
    empty_struct_ = nullptr;
  }
  if (from._internal_has_empty_struct2()) {
    empty_struct2_ = new ::proto_util_converter::testing::StructMessage(*from.empty_struct2_);
  } else {
    empty_struct2_ = nullptr;
  }
  if (from._internal_has_struct_with_null_value()) {
    struct_with_null_value_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_null_value_);
  } else {
    struct_with_null_value_ = nullptr;
  }
  if (from._internal_has_struct_with_values()) {
    struct_with_values_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_values_);
  } else {
    struct_with_values_ = nullptr;
  }
  if (from._internal_has_struct_with_nested_struct()) {
    struct_with_nested_struct_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_nested_struct_);
  } else {
    struct_with_nested_struct_ = nullptr;
  }
  if (from._internal_has_struct_with_nested_list()) {
    struct_with_nested_list_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_nested_list_);
  } else {
    struct_with_nested_list_ = nullptr;
  }
  if (from._internal_has_struct_with_list_of_nulls()) {
    struct_with_list_of_nulls_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_list_of_nulls_);
  } else {
    struct_with_list_of_nulls_ = nullptr;
  }
  if (from._internal_has_struct_with_list_of_lists()) {
    struct_with_list_of_lists_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_list_of_lists_);
  } else {
    struct_with_list_of_lists_ = nullptr;
  }
  if (from._internal_has_struct_with_list_of_structs()) {
    struct_with_list_of_structs_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_list_of_structs_);
  } else {
    struct_with_list_of_structs_ = nullptr;
  }
  if (from._internal_has_top_level_struct()) {
    top_level_struct_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.top_level_struct_);
  } else {
    top_level_struct_ = nullptr;
  }
  if (from._internal_has_value_wrapper_simple()) {
    value_wrapper_simple_ = new ::proto_util_converter::testing::ValueMessage(*from.value_wrapper_simple_);
  } else {
    value_wrapper_simple_ = nullptr;
  }
  if (from._internal_has_value_wrapper_with_struct()) {
    value_wrapper_with_struct_ = new ::proto_util_converter::testing::ValueMessage(*from.value_wrapper_with_struct_);
  } else {
    value_wrapper_with_struct_ = nullptr;
  }
  if (from._internal_has_value_wrapper_with_list()) {
    value_wrapper_with_list_ = new ::proto_util_converter::testing::ValueMessage(*from.value_wrapper_with_list_);
  } else {
    value_wrapper_with_list_ = nullptr;
  }
  if (from._internal_has_list_value_wrapper()) {
    list_value_wrapper_ = new ::proto_util_converter::testing::ListValueMessage(*from.list_value_wrapper_);
  } else {
    list_value_wrapper_ = nullptr;
  }
  if (from._internal_has_top_level_value_simple()) {
    top_level_value_simple_ = new PROTOBUF_NAMESPACE_ID::Value(*from.top_level_value_simple_);
  } else {
    top_level_value_simple_ = nullptr;
  }
  if (from._internal_has_top_level_value_with_struct()) {
    top_level_value_with_struct_ = new PROTOBUF_NAMESPACE_ID::Value(*from.top_level_value_with_struct_);
  } else {
    top_level_value_with_struct_ = nullptr;
  }
  if (from._internal_has_top_level_value_with_list()) {
    top_level_value_with_list_ = new PROTOBUF_NAMESPACE_ID::Value(*from.top_level_value_with_list_);
  } else {
    top_level_value_with_list_ = nullptr;
  }
  if (from._internal_has_top_level_listvalue()) {
    top_level_listvalue_ = new PROTOBUF_NAMESPACE_ID::ListValue(*from.top_level_listvalue_);
  } else {
    top_level_listvalue_ = nullptr;
  }
  if (from._internal_has_empty_any()) {
    empty_any_ = new ::proto_util_converter::testing::AnyMessage(*from.empty_any_);
  } else {
    empty_any_ = nullptr;
  }
  if (from._internal_has_type_only_any()) {
    type_only_any_ = new ::proto_util_converter::testing::AnyMessage(*from.type_only_any_);
  } else {
    type_only_any_ = nullptr;
  }
  if (from._internal_has_recursive_any()) {
    recursive_any_ = new ::proto_util_converter::testing::AnyMessage(*from.recursive_any_);
  } else {
    recursive_any_ = nullptr;
  }
  if (from._internal_has_any_with_message_value()) {
    any_with_message_value_ = new ::proto_util_converter::testing::AnyMessage(*from.any_with_message_value_);
  } else {
    any_with_message_value_ = nullptr;
  }
  if (from._internal_has_any_with_nested_message()) {
    any_with_nested_message_ = new ::proto_util_converter::testing::AnyMessage(*from.any_with_nested_message_);
  } else {
    any_with_nested_message_ = nullptr;
  }
  if (from._internal_has_any_with_message_containing_map()) {
    any_with_message_containing_map_ = new ::proto_util_converter::testing::AnyMessage(*from.any_with_message_containing_map_);
  } else {
    any_with_message_containing_map_ = nullptr;
  }
  if (from._internal_has_any_with_message_containing_struct()) {
    any_with_message_containing_struct_ = new ::proto_util_converter::testing::AnyMessage(*from.any_with_message_containing_struct_);
  } else {
    any_with_message_containing_struct_ = nullptr;
  }
  if (from._internal_has_top_level_any()) {
    top_level_any_ = new PROTOBUF_NAMESPACE_ID::Any(*from.top_level_any_);
  } else {
    top_level_any_ = nullptr;
  }
  if (from._internal_has_empty_map()) {
    empty_map_ = new ::proto_util_converter::testing::StringtoIntMap(*from.empty_map_);
  } else {
    empty_map_ = nullptr;
  }
  if (from._internal_has_string_to_int()) {
    string_to_int_ = new ::proto_util_converter::testing::StringtoIntMap(*from.string_to_int_);
  } else {
    string_to_int_ = nullptr;
  }
  if (from._internal_has_int_to_string()) {
    int_to_string_ = new ::proto_util_converter::testing::IntToStringMap(*from.int_to_string_);
  } else {
    int_to_string_ = nullptr;
  }
  if (from._internal_has_mixed1()) {
    mixed1_ = new ::proto_util_converter::testing::MixedMap(*from.mixed1_);
  } else {
    mixed1_ = nullptr;
  }
  if (from._internal_has_mixed2()) {
    mixed2_ = new ::proto_util_converter::testing::MixedMap2(*from.mixed2_);
  } else {
    mixed2_ = nullptr;
  }
  if (from._internal_has_empty_mixed2()) {
    empty_mixed2_ = new ::proto_util_converter::testing::MixedMap2(*from.empty_mixed2_);
  } else {
    empty_mixed2_ = nullptr;
  }
  if (from._internal_has_map_of_objects()) {
    map_of_objects_ = new ::proto_util_converter::testing::MessageMap(*from.map_of_objects_);
  } else {
    map_of_objects_ = nullptr;
  }
  if (from._internal_has_mixed_empty()) {
    mixed_empty_ = new ::proto_util_converter::testing::MixedMap(*from.mixed_empty_);
  } else {
    mixed_empty_ = nullptr;
  }
  if (from._internal_has_message_map_empty()) {
    message_map_empty_ = new ::proto_util_converter::testing::MessageMap(*from.message_map_empty_);
  } else {
    message_map_empty_ = nullptr;
  }
  if (from._internal_has_double_value()) {
    double_value_ = new ::proto_util_converter::testing::DoubleValueMessage(*from.double_value_);
  } else {
    double_value_ = nullptr;
  }
  if (from._internal_has_double_value_default()) {
    double_value_default_ = new ::proto_util_converter::testing::DoubleValueMessage(*from.double_value_default_);
  } else {
    double_value_default_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.DefaultValueTestCases)
}

void DefaultValueTestCases::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefaultValueTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  ::memset(&empty_double_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&double_value_default_) -
      reinterpret_cast<char*>(&empty_double_)) + sizeof(double_value_default_));
}

DefaultValueTestCases::~DefaultValueTestCases() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.DefaultValueTestCases)
  SharedDtor();
}

void DefaultValueTestCases::SharedDtor() {
  if (this != internal_default_instance()) delete empty_double_;
  if (this != internal_default_instance()) delete double_with_default_value_;
  if (this != internal_default_instance()) delete double_with_nondefault_value_;
  if (this != internal_default_instance()) delete repeated_double_;
  if (this != internal_default_instance()) delete nested_message_;
  if (this != internal_default_instance()) delete repeated_nested_message_;
  if (this != internal_default_instance()) delete double_message_with_oneof_;
  if (this != internal_default_instance()) delete empty_struct_;
  if (this != internal_default_instance()) delete empty_struct2_;
  if (this != internal_default_instance()) delete struct_with_null_value_;
  if (this != internal_default_instance()) delete struct_with_values_;
  if (this != internal_default_instance()) delete struct_with_nested_struct_;
  if (this != internal_default_instance()) delete struct_with_nested_list_;
  if (this != internal_default_instance()) delete struct_with_list_of_nulls_;
  if (this != internal_default_instance()) delete struct_with_list_of_lists_;
  if (this != internal_default_instance()) delete struct_with_list_of_structs_;
  if (this != internal_default_instance()) delete top_level_struct_;
  if (this != internal_default_instance()) delete value_wrapper_simple_;
  if (this != internal_default_instance()) delete value_wrapper_with_struct_;
  if (this != internal_default_instance()) delete value_wrapper_with_list_;
  if (this != internal_default_instance()) delete list_value_wrapper_;
  if (this != internal_default_instance()) delete top_level_value_simple_;
  if (this != internal_default_instance()) delete top_level_value_with_struct_;
  if (this != internal_default_instance()) delete top_level_value_with_list_;
  if (this != internal_default_instance()) delete top_level_listvalue_;
  if (this != internal_default_instance()) delete empty_any_;
  if (this != internal_default_instance()) delete type_only_any_;
  if (this != internal_default_instance()) delete recursive_any_;
  if (this != internal_default_instance()) delete any_with_message_value_;
  if (this != internal_default_instance()) delete any_with_nested_message_;
  if (this != internal_default_instance()) delete any_with_message_containing_map_;
  if (this != internal_default_instance()) delete any_with_message_containing_struct_;
  if (this != internal_default_instance()) delete top_level_any_;
  if (this != internal_default_instance()) delete empty_map_;
  if (this != internal_default_instance()) delete string_to_int_;
  if (this != internal_default_instance()) delete int_to_string_;
  if (this != internal_default_instance()) delete mixed1_;
  if (this != internal_default_instance()) delete mixed2_;
  if (this != internal_default_instance()) delete empty_mixed2_;
  if (this != internal_default_instance()) delete map_of_objects_;
  if (this != internal_default_instance()) delete mixed_empty_;
  if (this != internal_default_instance()) delete message_map_empty_;
  if (this != internal_default_instance()) delete double_value_;
  if (this != internal_default_instance()) delete double_value_default_;
}

void DefaultValueTestCases::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultValueTestCases& DefaultValueTestCases::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultValueTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void DefaultValueTestCases::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.DefaultValueTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && empty_double_ != nullptr) {
    delete empty_double_;
  }
  empty_double_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && double_with_default_value_ != nullptr) {
    delete double_with_default_value_;
  }
  double_with_default_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && double_with_nondefault_value_ != nullptr) {
    delete double_with_nondefault_value_;
  }
  double_with_nondefault_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && repeated_double_ != nullptr) {
    delete repeated_double_;
  }
  repeated_double_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && nested_message_ != nullptr) {
    delete nested_message_;
  }
  nested_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && repeated_nested_message_ != nullptr) {
    delete repeated_nested_message_;
  }
  repeated_nested_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && double_message_with_oneof_ != nullptr) {
    delete double_message_with_oneof_;
  }
  double_message_with_oneof_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_struct_ != nullptr) {
    delete empty_struct_;
  }
  empty_struct_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_struct2_ != nullptr) {
    delete empty_struct2_;
  }
  empty_struct2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct_with_null_value_ != nullptr) {
    delete struct_with_null_value_;
  }
  struct_with_null_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct_with_values_ != nullptr) {
    delete struct_with_values_;
  }
  struct_with_values_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct_with_nested_struct_ != nullptr) {
    delete struct_with_nested_struct_;
  }
  struct_with_nested_struct_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct_with_nested_list_ != nullptr) {
    delete struct_with_nested_list_;
  }
  struct_with_nested_list_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct_with_list_of_nulls_ != nullptr) {
    delete struct_with_list_of_nulls_;
  }
  struct_with_list_of_nulls_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct_with_list_of_lists_ != nullptr) {
    delete struct_with_list_of_lists_;
  }
  struct_with_list_of_lists_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct_with_list_of_structs_ != nullptr) {
    delete struct_with_list_of_structs_;
  }
  struct_with_list_of_structs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_struct_ != nullptr) {
    delete top_level_struct_;
  }
  top_level_struct_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_wrapper_simple_ != nullptr) {
    delete value_wrapper_simple_;
  }
  value_wrapper_simple_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_wrapper_with_struct_ != nullptr) {
    delete value_wrapper_with_struct_;
  }
  value_wrapper_with_struct_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_wrapper_with_list_ != nullptr) {
    delete value_wrapper_with_list_;
  }
  value_wrapper_with_list_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && list_value_wrapper_ != nullptr) {
    delete list_value_wrapper_;
  }
  list_value_wrapper_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_value_simple_ != nullptr) {
    delete top_level_value_simple_;
  }
  top_level_value_simple_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_value_with_struct_ != nullptr) {
    delete top_level_value_with_struct_;
  }
  top_level_value_with_struct_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_value_with_list_ != nullptr) {
    delete top_level_value_with_list_;
  }
  top_level_value_with_list_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_listvalue_ != nullptr) {
    delete top_level_listvalue_;
  }
  top_level_listvalue_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_any_ != nullptr) {
    delete empty_any_;
  }
  empty_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_only_any_ != nullptr) {
    delete type_only_any_;
  }
  type_only_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && recursive_any_ != nullptr) {
    delete recursive_any_;
  }
  recursive_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_message_value_ != nullptr) {
    delete any_with_message_value_;
  }
  any_with_message_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_nested_message_ != nullptr) {
    delete any_with_nested_message_;
  }
  any_with_nested_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_message_containing_map_ != nullptr) {
    delete any_with_message_containing_map_;
  }
  any_with_message_containing_map_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_message_containing_struct_ != nullptr) {
    delete any_with_message_containing_struct_;
  }
  any_with_message_containing_struct_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_any_ != nullptr) {
    delete top_level_any_;
  }
  top_level_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_map_ != nullptr) {
    delete empty_map_;
  }
  empty_map_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && string_to_int_ != nullptr) {
    delete string_to_int_;
  }
  string_to_int_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && int_to_string_ != nullptr) {
    delete int_to_string_;
  }
  int_to_string_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mixed1_ != nullptr) {
    delete mixed1_;
  }
  mixed1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mixed2_ != nullptr) {
    delete mixed2_;
  }
  mixed2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_mixed2_ != nullptr) {
    delete empty_mixed2_;
  }
  empty_mixed2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_of_objects_ != nullptr) {
    delete map_of_objects_;
  }
  map_of_objects_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mixed_empty_ != nullptr) {
    delete mixed_empty_;
  }
  mixed_empty_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && message_map_empty_ != nullptr) {
    delete message_map_empty_;
  }
  message_map_empty_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && double_value_ != nullptr) {
    delete double_value_;
  }
  double_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && double_value_default_ != nullptr) {
    delete double_value_default_;
  }
  double_value_default_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DefaultValueTestCases::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto_util_converter.testing.DoubleMessage empty_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_double(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage double_with_default_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_with_default_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage double_with_nondefault_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_with_nondefault_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage repeated_double = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_double(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage nested_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage repeated_nested_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage double_message_with_oneof = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_message_with_oneof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage empty_struct = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_struct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage empty_struct2 = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_struct2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_null_value = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_null_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_values = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_nested_struct = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_nested_struct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_nested_list = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_nested_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_list_of_nulls = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_of_nulls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_list_of_lists = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_of_lists(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_list_of_structs = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_of_structs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct top_level_struct = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_struct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueMessage value_wrapper_simple = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_simple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueMessage value_wrapper_with_struct = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_with_struct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueMessage value_wrapper_with_list = 214;
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_with_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ListValueMessage list_value_wrapper = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_value_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_simple = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_simple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_with_struct = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_with_struct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_with_list = 218;
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_with_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.ListValue top_level_listvalue = 219;
      case 219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_listvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage empty_any = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage type_only_any = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_only_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage recursive_any = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_recursive_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage any_with_message_value = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_with_message_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage any_with_nested_message = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_with_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage any_with_message_containing_map = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_with_message_containing_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage any_with_message_containing_struct = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_with_message_containing_struct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any top_level_any = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoIntMap empty_map = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoIntMap string_to_int = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_to_int(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.IntToStringMap int_to_string = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_to_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap mixed1 = 404;
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap2 mixed2 = 405;
      case 405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap2 empty_mixed2 = 406;
      case 406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_mixed2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MessageMap map_of_objects = 407;
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_of_objects(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap mixed_empty = 408;
      case 408:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed_empty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MessageMap message_map_empty = 409;
      case 409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_map_empty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleValueMessage double_value = 501;
      case 501:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleValueMessage double_value_default = 502;
      case 502:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_value_default(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultValueTestCases::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.DefaultValueTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.DoubleMessage empty_double = 1;
  if (this->has_empty_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::empty_double(this), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage double_with_default_value = 2;
  if (this->has_double_with_default_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::double_with_default_value(this), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage double_with_nondefault_value = 3;
  if (this->has_double_with_nondefault_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::double_with_nondefault_value(this), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage repeated_double = 4;
  if (this->has_repeated_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::repeated_double(this), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage nested_message = 5;
  if (this->has_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::nested_message(this), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage repeated_nested_message = 6;
  if (this->has_repeated_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::repeated_nested_message(this), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage double_message_with_oneof = 7;
  if (this->has_double_message_with_oneof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::double_message_with_oneof(this), target, stream);
  }

  // .proto_util_converter.testing.StructMessage empty_struct = 201;
  if (this->has_empty_struct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        201, _Internal::empty_struct(this), target, stream);
  }

  // .proto_util_converter.testing.StructMessage empty_struct2 = 202;
  if (this->has_empty_struct2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        202, _Internal::empty_struct2(this), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_null_value = 203;
  if (this->has_struct_with_null_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        203, _Internal::struct_with_null_value(this), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_values = 204;
  if (this->has_struct_with_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        204, _Internal::struct_with_values(this), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_nested_struct = 205;
  if (this->has_struct_with_nested_struct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        205, _Internal::struct_with_nested_struct(this), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_nested_list = 206;
  if (this->has_struct_with_nested_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        206, _Internal::struct_with_nested_list(this), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_nulls = 207;
  if (this->has_struct_with_list_of_nulls()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        207, _Internal::struct_with_list_of_nulls(this), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_lists = 208;
  if (this->has_struct_with_list_of_lists()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        208, _Internal::struct_with_list_of_lists(this), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_structs = 209;
  if (this->has_struct_with_list_of_structs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        209, _Internal::struct_with_list_of_structs(this), target, stream);
  }

  // .google.protobuf.Struct top_level_struct = 210;
  if (this->has_top_level_struct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        210, _Internal::top_level_struct(this), target, stream);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_simple = 212;
  if (this->has_value_wrapper_simple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        212, _Internal::value_wrapper_simple(this), target, stream);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_struct = 213;
  if (this->has_value_wrapper_with_struct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        213, _Internal::value_wrapper_with_struct(this), target, stream);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_list = 214;
  if (this->has_value_wrapper_with_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        214, _Internal::value_wrapper_with_list(this), target, stream);
  }

  // .proto_util_converter.testing.ListValueMessage list_value_wrapper = 215;
  if (this->has_list_value_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        215, _Internal::list_value_wrapper(this), target, stream);
  }

  // .google.protobuf.Value top_level_value_simple = 216;
  if (this->has_top_level_value_simple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        216, _Internal::top_level_value_simple(this), target, stream);
  }

  // .google.protobuf.Value top_level_value_with_struct = 217;
  if (this->has_top_level_value_with_struct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        217, _Internal::top_level_value_with_struct(this), target, stream);
  }

  // .google.protobuf.Value top_level_value_with_list = 218;
  if (this->has_top_level_value_with_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        218, _Internal::top_level_value_with_list(this), target, stream);
  }

  // .google.protobuf.ListValue top_level_listvalue = 219;
  if (this->has_top_level_listvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        219, _Internal::top_level_listvalue(this), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage empty_any = 301;
  if (this->has_empty_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        301, _Internal::empty_any(this), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage type_only_any = 302;
  if (this->has_type_only_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        302, _Internal::type_only_any(this), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage recursive_any = 303;
  if (this->has_recursive_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        303, _Internal::recursive_any(this), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_value = 304;
  if (this->has_any_with_message_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        304, _Internal::any_with_message_value(this), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage any_with_nested_message = 305;
  if (this->has_any_with_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        305, _Internal::any_with_nested_message(this), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_map = 306;
  if (this->has_any_with_message_containing_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        306, _Internal::any_with_message_containing_map(this), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_struct = 307;
  if (this->has_any_with_message_containing_struct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        307, _Internal::any_with_message_containing_struct(this), target, stream);
  }

  // .google.protobuf.Any top_level_any = 308;
  if (this->has_top_level_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        308, _Internal::top_level_any(this), target, stream);
  }

  // .proto_util_converter.testing.StringtoIntMap empty_map = 401;
  if (this->has_empty_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        401, _Internal::empty_map(this), target, stream);
  }

  // .proto_util_converter.testing.StringtoIntMap string_to_int = 402;
  if (this->has_string_to_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        402, _Internal::string_to_int(this), target, stream);
  }

  // .proto_util_converter.testing.IntToStringMap int_to_string = 403;
  if (this->has_int_to_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        403, _Internal::int_to_string(this), target, stream);
  }

  // .proto_util_converter.testing.MixedMap mixed1 = 404;
  if (this->has_mixed1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        404, _Internal::mixed1(this), target, stream);
  }

  // .proto_util_converter.testing.MixedMap2 mixed2 = 405;
  if (this->has_mixed2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        405, _Internal::mixed2(this), target, stream);
  }

  // .proto_util_converter.testing.MixedMap2 empty_mixed2 = 406;
  if (this->has_empty_mixed2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        406, _Internal::empty_mixed2(this), target, stream);
  }

  // .proto_util_converter.testing.MessageMap map_of_objects = 407;
  if (this->has_map_of_objects()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        407, _Internal::map_of_objects(this), target, stream);
  }

  // .proto_util_converter.testing.MixedMap mixed_empty = 408;
  if (this->has_mixed_empty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        408, _Internal::mixed_empty(this), target, stream);
  }

  // .proto_util_converter.testing.MessageMap message_map_empty = 409;
  if (this->has_message_map_empty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        409, _Internal::message_map_empty(this), target, stream);
  }

  // .proto_util_converter.testing.DoubleValueMessage double_value = 501;
  if (this->has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        501, _Internal::double_value(this), target, stream);
  }

  // .proto_util_converter.testing.DoubleValueMessage double_value_default = 502;
  if (this->has_double_value_default()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        502, _Internal::double_value_default(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.DefaultValueTestCases)
  return target;
}

size_t DefaultValueTestCases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.DefaultValueTestCases)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_util_converter.testing.DoubleMessage empty_double = 1;
  if (this->has_empty_double()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_double_);
  }

  // .proto_util_converter.testing.DoubleMessage double_with_default_value = 2;
  if (this->has_double_with_default_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_with_default_value_);
  }

  // .proto_util_converter.testing.DoubleMessage double_with_nondefault_value = 3;
  if (this->has_double_with_nondefault_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_with_nondefault_value_);
  }

  // .proto_util_converter.testing.DoubleMessage repeated_double = 4;
  if (this->has_repeated_double()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repeated_double_);
  }

  // .proto_util_converter.testing.DoubleMessage nested_message = 5;
  if (this->has_nested_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_message_);
  }

  // .proto_util_converter.testing.DoubleMessage repeated_nested_message = 6;
  if (this->has_repeated_nested_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repeated_nested_message_);
  }

  // .proto_util_converter.testing.DoubleMessage double_message_with_oneof = 7;
  if (this->has_double_message_with_oneof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_message_with_oneof_);
  }

  // .proto_util_converter.testing.StructMessage empty_struct = 201;
  if (this->has_empty_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_struct_);
  }

  // .proto_util_converter.testing.StructMessage empty_struct2 = 202;
  if (this->has_empty_struct2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_struct2_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_null_value = 203;
  if (this->has_struct_with_null_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_null_value_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_values = 204;
  if (this->has_struct_with_values()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_values_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_nested_struct = 205;
  if (this->has_struct_with_nested_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_nested_struct_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_nested_list = 206;
  if (this->has_struct_with_nested_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_nested_list_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_nulls = 207;
  if (this->has_struct_with_list_of_nulls()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_list_of_nulls_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_lists = 208;
  if (this->has_struct_with_list_of_lists()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_list_of_lists_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_structs = 209;
  if (this->has_struct_with_list_of_structs()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_list_of_structs_);
  }

  // .google.protobuf.Struct top_level_struct = 210;
  if (this->has_top_level_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_struct_);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_simple = 212;
  if (this->has_value_wrapper_simple()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_wrapper_simple_);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_struct = 213;
  if (this->has_value_wrapper_with_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_wrapper_with_struct_);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_list = 214;
  if (this->has_value_wrapper_with_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_wrapper_with_list_);
  }

  // .proto_util_converter.testing.ListValueMessage list_value_wrapper = 215;
  if (this->has_list_value_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_value_wrapper_);
  }

  // .google.protobuf.Value top_level_value_simple = 216;
  if (this->has_top_level_value_simple()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_value_simple_);
  }

  // .google.protobuf.Value top_level_value_with_struct = 217;
  if (this->has_top_level_value_with_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_value_with_struct_);
  }

  // .google.protobuf.Value top_level_value_with_list = 218;
  if (this->has_top_level_value_with_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_value_with_list_);
  }

  // .google.protobuf.ListValue top_level_listvalue = 219;
  if (this->has_top_level_listvalue()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_listvalue_);
  }

  // .proto_util_converter.testing.AnyMessage empty_any = 301;
  if (this->has_empty_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_any_);
  }

  // .proto_util_converter.testing.AnyMessage type_only_any = 302;
  if (this->has_type_only_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_only_any_);
  }

  // .proto_util_converter.testing.AnyMessage recursive_any = 303;
  if (this->has_recursive_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recursive_any_);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_value = 304;
  if (this->has_any_with_message_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_value_);
  }

  // .proto_util_converter.testing.AnyMessage any_with_nested_message = 305;
  if (this->has_any_with_nested_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_nested_message_);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_map = 306;
  if (this->has_any_with_message_containing_map()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_containing_map_);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_struct = 307;
  if (this->has_any_with_message_containing_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_containing_struct_);
  }

  // .google.protobuf.Any top_level_any = 308;
  if (this->has_top_level_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_any_);
  }

  // .proto_util_converter.testing.StringtoIntMap empty_map = 401;
  if (this->has_empty_map()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_map_);
  }

  // .proto_util_converter.testing.StringtoIntMap string_to_int = 402;
  if (this->has_string_to_int()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *string_to_int_);
  }

  // .proto_util_converter.testing.IntToStringMap int_to_string = 403;
  if (this->has_int_to_string()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *int_to_string_);
  }

  // .proto_util_converter.testing.MixedMap mixed1 = 404;
  if (this->has_mixed1()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed1_);
  }

  // .proto_util_converter.testing.MixedMap2 mixed2 = 405;
  if (this->has_mixed2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed2_);
  }

  // .proto_util_converter.testing.MixedMap2 empty_mixed2 = 406;
  if (this->has_empty_mixed2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_mixed2_);
  }

  // .proto_util_converter.testing.MessageMap map_of_objects = 407;
  if (this->has_map_of_objects()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_of_objects_);
  }

  // .proto_util_converter.testing.MixedMap mixed_empty = 408;
  if (this->has_mixed_empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed_empty_);
  }

  // .proto_util_converter.testing.MessageMap message_map_empty = 409;
  if (this->has_message_map_empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_map_empty_);
  }

  // .proto_util_converter.testing.DoubleValueMessage double_value = 501;
  if (this->has_double_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_value_);
  }

  // .proto_util_converter.testing.DoubleValueMessage double_value_default = 502;
  if (this->has_double_value_default()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_value_default_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultValueTestCases::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.DefaultValueTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultValueTestCases* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultValueTestCases>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.DefaultValueTestCases)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.DefaultValueTestCases)
    MergeFrom(*source);
  }
}

void DefaultValueTestCases::MergeFrom(const DefaultValueTestCases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.DefaultValueTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_empty_double()) {
    _internal_mutable_empty_double()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_empty_double());
  }
  if (from.has_double_with_default_value()) {
    _internal_mutable_double_with_default_value()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_double_with_default_value());
  }
  if (from.has_double_with_nondefault_value()) {
    _internal_mutable_double_with_nondefault_value()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_double_with_nondefault_value());
  }
  if (from.has_repeated_double()) {
    _internal_mutable_repeated_double()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_repeated_double());
  }
  if (from.has_nested_message()) {
    _internal_mutable_nested_message()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_nested_message());
  }
  if (from.has_repeated_nested_message()) {
    _internal_mutable_repeated_nested_message()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_repeated_nested_message());
  }
  if (from.has_double_message_with_oneof()) {
    _internal_mutable_double_message_with_oneof()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_double_message_with_oneof());
  }
  if (from.has_empty_struct()) {
    _internal_mutable_empty_struct()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_empty_struct());
  }
  if (from.has_empty_struct2()) {
    _internal_mutable_empty_struct2()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_empty_struct2());
  }
  if (from.has_struct_with_null_value()) {
    _internal_mutable_struct_with_null_value()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_null_value());
  }
  if (from.has_struct_with_values()) {
    _internal_mutable_struct_with_values()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_values());
  }
  if (from.has_struct_with_nested_struct()) {
    _internal_mutable_struct_with_nested_struct()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_nested_struct());
  }
  if (from.has_struct_with_nested_list()) {
    _internal_mutable_struct_with_nested_list()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_nested_list());
  }
  if (from.has_struct_with_list_of_nulls()) {
    _internal_mutable_struct_with_list_of_nulls()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_list_of_nulls());
  }
  if (from.has_struct_with_list_of_lists()) {
    _internal_mutable_struct_with_list_of_lists()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_list_of_lists());
  }
  if (from.has_struct_with_list_of_structs()) {
    _internal_mutable_struct_with_list_of_structs()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_list_of_structs());
  }
  if (from.has_top_level_struct()) {
    _internal_mutable_top_level_struct()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_top_level_struct());
  }
  if (from.has_value_wrapper_simple()) {
    _internal_mutable_value_wrapper_simple()->::proto_util_converter::testing::ValueMessage::MergeFrom(from._internal_value_wrapper_simple());
  }
  if (from.has_value_wrapper_with_struct()) {
    _internal_mutable_value_wrapper_with_struct()->::proto_util_converter::testing::ValueMessage::MergeFrom(from._internal_value_wrapper_with_struct());
  }
  if (from.has_value_wrapper_with_list()) {
    _internal_mutable_value_wrapper_with_list()->::proto_util_converter::testing::ValueMessage::MergeFrom(from._internal_value_wrapper_with_list());
  }
  if (from.has_list_value_wrapper()) {
    _internal_mutable_list_value_wrapper()->::proto_util_converter::testing::ListValueMessage::MergeFrom(from._internal_list_value_wrapper());
  }
  if (from.has_top_level_value_simple()) {
    _internal_mutable_top_level_value_simple()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_top_level_value_simple());
  }
  if (from.has_top_level_value_with_struct()) {
    _internal_mutable_top_level_value_with_struct()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_top_level_value_with_struct());
  }
  if (from.has_top_level_value_with_list()) {
    _internal_mutable_top_level_value_with_list()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_top_level_value_with_list());
  }
  if (from.has_top_level_listvalue()) {
    _internal_mutable_top_level_listvalue()->PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(from._internal_top_level_listvalue());
  }
  if (from.has_empty_any()) {
    _internal_mutable_empty_any()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_empty_any());
  }
  if (from.has_type_only_any()) {
    _internal_mutable_type_only_any()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_type_only_any());
  }
  if (from.has_recursive_any()) {
    _internal_mutable_recursive_any()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_recursive_any());
  }
  if (from.has_any_with_message_value()) {
    _internal_mutable_any_with_message_value()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_any_with_message_value());
  }
  if (from.has_any_with_nested_message()) {
    _internal_mutable_any_with_nested_message()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_any_with_nested_message());
  }
  if (from.has_any_with_message_containing_map()) {
    _internal_mutable_any_with_message_containing_map()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_any_with_message_containing_map());
  }
  if (from.has_any_with_message_containing_struct()) {
    _internal_mutable_any_with_message_containing_struct()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_any_with_message_containing_struct());
  }
  if (from.has_top_level_any()) {
    _internal_mutable_top_level_any()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_top_level_any());
  }
  if (from.has_empty_map()) {
    _internal_mutable_empty_map()->::proto_util_converter::testing::StringtoIntMap::MergeFrom(from._internal_empty_map());
  }
  if (from.has_string_to_int()) {
    _internal_mutable_string_to_int()->::proto_util_converter::testing::StringtoIntMap::MergeFrom(from._internal_string_to_int());
  }
  if (from.has_int_to_string()) {
    _internal_mutable_int_to_string()->::proto_util_converter::testing::IntToStringMap::MergeFrom(from._internal_int_to_string());
  }
  if (from.has_mixed1()) {
    _internal_mutable_mixed1()->::proto_util_converter::testing::MixedMap::MergeFrom(from._internal_mixed1());
  }
  if (from.has_mixed2()) {
    _internal_mutable_mixed2()->::proto_util_converter::testing::MixedMap2::MergeFrom(from._internal_mixed2());
  }
  if (from.has_empty_mixed2()) {
    _internal_mutable_empty_mixed2()->::proto_util_converter::testing::MixedMap2::MergeFrom(from._internal_empty_mixed2());
  }
  if (from.has_map_of_objects()) {
    _internal_mutable_map_of_objects()->::proto_util_converter::testing::MessageMap::MergeFrom(from._internal_map_of_objects());
  }
  if (from.has_mixed_empty()) {
    _internal_mutable_mixed_empty()->::proto_util_converter::testing::MixedMap::MergeFrom(from._internal_mixed_empty());
  }
  if (from.has_message_map_empty()) {
    _internal_mutable_message_map_empty()->::proto_util_converter::testing::MessageMap::MergeFrom(from._internal_message_map_empty());
  }
  if (from.has_double_value()) {
    _internal_mutable_double_value()->::proto_util_converter::testing::DoubleValueMessage::MergeFrom(from._internal_double_value());
  }
  if (from.has_double_value_default()) {
    _internal_mutable_double_value_default()->::proto_util_converter::testing::DoubleValueMessage::MergeFrom(from._internal_double_value_default());
  }
}

void DefaultValueTestCases::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.DefaultValueTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultValueTestCases::CopyFrom(const DefaultValueTestCases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.DefaultValueTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultValueTestCases::IsInitialized() const {
  return true;
}

void DefaultValueTestCases::InternalSwap(DefaultValueTestCases* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(empty_double_, other->empty_double_);
  swap(double_with_default_value_, other->double_with_default_value_);
  swap(double_with_nondefault_value_, other->double_with_nondefault_value_);
  swap(repeated_double_, other->repeated_double_);
  swap(nested_message_, other->nested_message_);
  swap(repeated_nested_message_, other->repeated_nested_message_);
  swap(double_message_with_oneof_, other->double_message_with_oneof_);
  swap(empty_struct_, other->empty_struct_);
  swap(empty_struct2_, other->empty_struct2_);
  swap(struct_with_null_value_, other->struct_with_null_value_);
  swap(struct_with_values_, other->struct_with_values_);
  swap(struct_with_nested_struct_, other->struct_with_nested_struct_);
  swap(struct_with_nested_list_, other->struct_with_nested_list_);
  swap(struct_with_list_of_nulls_, other->struct_with_list_of_nulls_);
  swap(struct_with_list_of_lists_, other->struct_with_list_of_lists_);
  swap(struct_with_list_of_structs_, other->struct_with_list_of_structs_);
  swap(top_level_struct_, other->top_level_struct_);
  swap(value_wrapper_simple_, other->value_wrapper_simple_);
  swap(value_wrapper_with_struct_, other->value_wrapper_with_struct_);
  swap(value_wrapper_with_list_, other->value_wrapper_with_list_);
  swap(list_value_wrapper_, other->list_value_wrapper_);
  swap(top_level_value_simple_, other->top_level_value_simple_);
  swap(top_level_value_with_struct_, other->top_level_value_with_struct_);
  swap(top_level_value_with_list_, other->top_level_value_with_list_);
  swap(top_level_listvalue_, other->top_level_listvalue_);
  swap(empty_any_, other->empty_any_);
  swap(type_only_any_, other->type_only_any_);
  swap(recursive_any_, other->recursive_any_);
  swap(any_with_message_value_, other->any_with_message_value_);
  swap(any_with_nested_message_, other->any_with_nested_message_);
  swap(any_with_message_containing_map_, other->any_with_message_containing_map_);
  swap(any_with_message_containing_struct_, other->any_with_message_containing_struct_);
  swap(top_level_any_, other->top_level_any_);
  swap(empty_map_, other->empty_map_);
  swap(string_to_int_, other->string_to_int_);
  swap(int_to_string_, other->int_to_string_);
  swap(mixed1_, other->mixed1_);
  swap(mixed2_, other->mixed2_);
  swap(empty_mixed2_, other->empty_mixed2_);
  swap(map_of_objects_, other->map_of_objects_);
  swap(mixed_empty_, other->mixed_empty_);
  swap(message_map_empty_, other->message_map_empty_);
  swap(double_value_, other->double_value_);
  swap(double_value_default_, other->double_value_default_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultValueTestCases::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoubleMessage::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_DoubleMessage_default_instance_._instance.get_mutable()->nested_message_ = const_cast< ::proto_util_converter::testing::DoubleMessage*>(
      ::proto_util_converter::testing::DoubleMessage::internal_default_instance());
  ::proto_util_converter::testing::_DoubleMessage_default_instance_._instance.get_mutable()->double_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::proto_util_converter::testing::_DoubleMessage_default_instance_.str_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::proto_util_converter::testing::_DoubleMessage_default_instance_.num_value_ = PROTOBUF_LONGLONG(0);
}
class DoubleMessage::_Internal {
 public:
  static const ::proto_util_converter::testing::DoubleMessage& nested_message(const DoubleMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& double_wrapper(const DoubleMessage* msg);
};

const ::proto_util_converter::testing::DoubleMessage&
DoubleMessage::_Internal::nested_message(const DoubleMessage* msg) {
  return *msg->nested_message_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
DoubleMessage::_Internal::double_wrapper(const DoubleMessage* msg) {
  return *msg->double_wrapper_;
}
void DoubleMessage::clear_double_wrapper() {
  if (GetArenaNoVirtual() == nullptr && double_wrapper_ != nullptr) {
    delete double_wrapper_;
  }
  double_wrapper_ = nullptr;
}
DoubleMessage::DoubleMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.DoubleMessage)
}
DoubleMessage::DoubleMessage(const DoubleMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      repeated_double_(from.repeated_double_),
      repeated_nested_message_(from.repeated_nested_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_nested_message()) {
    nested_message_ = new ::proto_util_converter::testing::DoubleMessage(*from.nested_message_);
  } else {
    nested_message_ = nullptr;
  }
  if (from._internal_has_double_wrapper()) {
    double_wrapper_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.double_wrapper_);
  } else {
    double_wrapper_ = nullptr;
  }
  double_value_ = from.double_value_;
  clear_has_value();
  switch (from.value_case()) {
    case kStrValue: {
      _internal_set_str_value(from._internal_str_value());
      break;
    }
    case kNumValue: {
      _internal_set_num_value(from._internal_num_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.DoubleMessage)
}

void DoubleMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  ::memset(&nested_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&double_value_) -
      reinterpret_cast<char*>(&nested_message_)) + sizeof(double_value_));
  clear_has_value();
}

DoubleMessage::~DoubleMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.DoubleMessage)
  SharedDtor();
}

void DoubleMessage::SharedDtor() {
  if (this != internal_default_instance()) delete nested_message_;
  if (this != internal_default_instance()) delete double_wrapper_;
  if (has_value()) {
    clear_value();
  }
}

void DoubleMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleMessage& DoubleMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void DoubleMessage::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:proto_util_converter.testing.DoubleMessage)
  switch (value_case()) {
    case kStrValue: {
      value_.str_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kNumValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void DoubleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.DoubleMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_double_.Clear();
  repeated_nested_message_.Clear();
  if (GetArenaNoVirtual() == nullptr && nested_message_ != nullptr) {
    delete nested_message_;
  }
  nested_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && double_wrapper_ != nullptr) {
    delete double_wrapper_;
  }
  double_wrapper_ = nullptr;
  double_value_ = 0;
  clear_value();
  _internal_metadata_.Clear();
}

const char* DoubleMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double double_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double repeated_double = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage nested_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.DoubleMessage repeated_nested_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue double_wrapper = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str_value = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_str_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_util_converter.testing.DoubleMessage.str_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_value = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _internal_set_num_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.DoubleMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double double_value = 1;
  if (!(this->double_value() <= 0 && this->double_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_value(), target);
  }

  // repeated double repeated_double = 2;
  if (this->_internal_repeated_double_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_repeated_double(), target);
  }

  // .proto_util_converter.testing.DoubleMessage nested_message = 3;
  if (this->has_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nested_message(this), target, stream);
  }

  // repeated .proto_util_converter.testing.DoubleMessage repeated_nested_message = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_nested_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_repeated_nested_message(i), target, stream);
  }

  // .google.protobuf.DoubleValue double_wrapper = 100;
  if (this->has_double_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::double_wrapper(this), target, stream);
  }

  // string str_value = 112;
  if (_internal_has_str_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_value().data(), static_cast<int>(this->_internal_str_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.DoubleMessage.str_value");
    target = stream->WriteStringMaybeAliased(
        112, this->_internal_str_value(), target);
  }

  // int64 num_value = 113;
  if (_internal_has_num_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(113, this->_internal_num_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.DoubleMessage)
  return target;
}

size_t DoubleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.DoubleMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double repeated_double = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .proto_util_converter.testing.DoubleMessage repeated_nested_message = 4;
  total_size += 1UL * this->_internal_repeated_nested_message_size();
  for (const auto& msg : this->repeated_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto_util_converter.testing.DoubleMessage nested_message = 3;
  if (this->has_nested_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_message_);
  }

  // .google.protobuf.DoubleValue double_wrapper = 100;
  if (this->has_double_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_wrapper_);
  }

  // double double_value = 1;
  if (!(this->double_value() <= 0 && this->double_value() >= 0)) {
    total_size += 1 + 8;
  }

  switch (value_case()) {
    // string str_value = 112;
    case kStrValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_value());
      break;
    }
    // int64 num_value = 113;
    case kNumValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_num_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.DoubleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.DoubleMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.DoubleMessage)
    MergeFrom(*source);
  }
}

void DoubleMessage::MergeFrom(const DoubleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.DoubleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  if (from.has_nested_message()) {
    _internal_mutable_nested_message()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_nested_message());
  }
  if (from.has_double_wrapper()) {
    _internal_mutable_double_wrapper()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_double_wrapper());
  }
  if (!(from.double_value() <= 0 && from.double_value() >= 0)) {
    _internal_set_double_value(from._internal_double_value());
  }
  switch (from.value_case()) {
    case kStrValue: {
      _internal_set_str_value(from._internal_str_value());
      break;
    }
    case kNumValue: {
      _internal_set_num_value(from._internal_num_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void DoubleMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.DoubleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleMessage::CopyFrom(const DoubleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.DoubleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMessage::IsInitialized() const {
  return true;
}

void DoubleMessage::InternalSwap(DoubleMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_nested_message_.InternalSwap(&other->repeated_nested_message_);
  swap(nested_message_, other->nested_message_);
  swap(double_wrapper_, other->double_wrapper_);
  swap(double_value_, other->double_value_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StructMessage::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_StructMessage_default_instance_._instance.get_mutable()->struct__ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class StructMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& struct_(const StructMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
StructMessage::_Internal::struct_(const StructMessage* msg) {
  return *msg->struct__;
}
void StructMessage::clear_struct_() {
  if (GetArenaNoVirtual() == nullptr && struct__ != nullptr) {
    delete struct__;
  }
  struct__ = nullptr;
}
StructMessage::StructMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.StructMessage)
}
StructMessage::StructMessage(const StructMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_struct_()) {
    struct__ = new PROTOBUF_NAMESPACE_ID::Struct(*from.struct__);
  } else {
    struct__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.StructMessage)
}

void StructMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StructMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  struct__ = nullptr;
}

StructMessage::~StructMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.StructMessage)
  SharedDtor();
}

void StructMessage::SharedDtor() {
  if (this != internal_default_instance()) delete struct__;
}

void StructMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StructMessage& StructMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StructMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void StructMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.StructMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && struct__ != nullptr) {
    delete struct__;
  }
  struct__ = nullptr;
  _internal_metadata_.Clear();
}

const char* StructMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Struct struct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.StructMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct struct = 1;
  if (this->has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::struct_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.StructMessage)
  return target;
}

size_t StructMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.StructMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct struct = 1;
  if (this->has_struct_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.StructMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StructMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StructMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.StructMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.StructMessage)
    MergeFrom(*source);
  }
}

void StructMessage::MergeFrom(const StructMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.StructMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_struct_()) {
    _internal_mutable_struct_()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_struct_());
  }
}

void StructMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.StructMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructMessage::CopyFrom(const StructMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.StructMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructMessage::IsInitialized() const {
  return true;
}

void StructMessage::InternalSwap(StructMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(struct__, other->struct__);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValueMessage::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_ValueMessage_default_instance_._instance.get_mutable()->value_ = const_cast< PROTOBUF_NAMESPACE_ID::Value*>(
      PROTOBUF_NAMESPACE_ID::Value::internal_default_instance());
}
class ValueMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Value& value(const ValueMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Value&
ValueMessage::_Internal::value(const ValueMessage* msg) {
  return *msg->value_;
}
void ValueMessage::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
ValueMessage::ValueMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.ValueMessage)
}
ValueMessage::ValueMessage(const ValueMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new PROTOBUF_NAMESPACE_ID::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.ValueMessage)
}

void ValueMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  value_ = nullptr;
}

ValueMessage::~ValueMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.ValueMessage)
  SharedDtor();
}

void ValueMessage::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void ValueMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValueMessage& ValueMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void ValueMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.ValueMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ValueMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.ValueMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Value value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.ValueMessage)
  return target;
}

size_t ValueMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.ValueMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Value value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.ValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValueMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.ValueMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.ValueMessage)
    MergeFrom(*source);
  }
}

void ValueMessage::MergeFrom(const ValueMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.ValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_value());
  }
}

void ValueMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.ValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueMessage::CopyFrom(const ValueMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.ValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueMessage::IsInitialized() const {
  return true;
}

void ValueMessage::InternalSwap(ValueMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListValueMessage::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_ListValueMessage_default_instance_._instance.get_mutable()->shopping_list_ = const_cast< PROTOBUF_NAMESPACE_ID::ListValue*>(
      PROTOBUF_NAMESPACE_ID::ListValue::internal_default_instance());
}
class ListValueMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::ListValue& shopping_list(const ListValueMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::ListValue&
ListValueMessage::_Internal::shopping_list(const ListValueMessage* msg) {
  return *msg->shopping_list_;
}
void ListValueMessage::clear_shopping_list() {
  if (GetArenaNoVirtual() == nullptr && shopping_list_ != nullptr) {
    delete shopping_list_;
  }
  shopping_list_ = nullptr;
}
ListValueMessage::ListValueMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.ListValueMessage)
}
ListValueMessage::ListValueMessage(const ListValueMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_shopping_list()) {
    shopping_list_ = new PROTOBUF_NAMESPACE_ID::ListValue(*from.shopping_list_);
  } else {
    shopping_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.ListValueMessage)
}

void ListValueMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  shopping_list_ = nullptr;
}

ListValueMessage::~ListValueMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.ListValueMessage)
  SharedDtor();
}

void ListValueMessage::SharedDtor() {
  if (this != internal_default_instance()) delete shopping_list_;
}

void ListValueMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListValueMessage& ListValueMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void ListValueMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.ListValueMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && shopping_list_ != nullptr) {
    delete shopping_list_;
  }
  shopping_list_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListValueMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.ListValue shopping_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shopping_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListValueMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.ListValueMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.ListValue shopping_list = 1;
  if (this->has_shopping_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shopping_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.ListValueMessage)
  return target;
}

size_t ListValueMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.ListValueMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.ListValue shopping_list = 1;
  if (this->has_shopping_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shopping_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListValueMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.ListValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ListValueMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListValueMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.ListValueMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.ListValueMessage)
    MergeFrom(*source);
  }
}

void ListValueMessage::MergeFrom(const ListValueMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.ListValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shopping_list()) {
    _internal_mutable_shopping_list()->PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(from._internal_shopping_list());
  }
}

void ListValueMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.ListValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListValueMessage::CopyFrom(const ListValueMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.ListValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValueMessage::IsInitialized() const {
  return true;
}

void ListValueMessage::InternalSwap(ListValueMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shopping_list_, other->shopping_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValueMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestMessage::InitAsDefaultInstance() {
}
class RequestMessage::_Internal {
 public:
};

RequestMessage::RequestMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.RequestMessage)
}
RequestMessage::RequestMessage(const RequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.RequestMessage)
}

void RequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.RequestMessage)
  SharedDtor();
}

void RequestMessage::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestMessage& RequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void RequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_util_converter.testing.RequestMessage.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.RequestMessage.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.RequestMessage)
  return target;
}

size_t RequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.RequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.RequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.RequestMessage)
    MergeFrom(*source);
  }
}

void RequestMessage::MergeFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void RequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {
  return true;
}

void RequestMessage::InternalSwap(RequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyMessage::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_AnyMessage_default_instance_._instance.get_mutable()->any_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::proto_util_converter::testing::_AnyMessage_default_instance_._instance.get_mutable()->data_ = const_cast< ::proto_util_converter::testing::AnyData*>(
      ::proto_util_converter::testing::AnyData::internal_default_instance());
}
class AnyMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& any(const AnyMessage* msg);
  static const ::proto_util_converter::testing::AnyData& data(const AnyMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
AnyMessage::_Internal::any(const AnyMessage* msg) {
  return *msg->any_;
}
const ::proto_util_converter::testing::AnyData&
AnyMessage::_Internal::data(const AnyMessage* msg) {
  return *msg->data_;
}
void AnyMessage::clear_any() {
  if (GetArenaNoVirtual() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
}
AnyMessage::AnyMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.AnyMessage)
}
AnyMessage::AnyMessage(const AnyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_any()) {
    any_ = new PROTOBUF_NAMESPACE_ID::Any(*from.any_);
  } else {
    any_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::proto_util_converter::testing::AnyData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.AnyMessage)
}

void AnyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  ::memset(&any_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&any_)) + sizeof(data_));
}

AnyMessage::~AnyMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.AnyMessage)
  SharedDtor();
}

void AnyMessage::SharedDtor() {
  if (this != internal_default_instance()) delete any_;
  if (this != internal_default_instance()) delete data_;
}

void AnyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyMessage& AnyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void AnyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.AnyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any any = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.AnyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->has_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::any(this), target, stream);
  }

  // .proto_util_converter.testing.AnyData data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.AnyMessage)
  return target;
}

size_t AnyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.AnyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->has_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_);
  }

  // .proto_util_converter.testing.AnyData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.AnyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.AnyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.AnyMessage)
    MergeFrom(*source);
  }
}

void AnyMessage::MergeFrom(const AnyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.AnyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_any()) {
    _internal_mutable_any()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_any());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::proto_util_converter::testing::AnyData::MergeFrom(from._internal_data());
  }
}

void AnyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.AnyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyMessage::CopyFrom(const AnyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.AnyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyMessage::IsInitialized() const {
  return true;
}

void AnyMessage::InternalSwap(AnyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(any_, other->any_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AnyData_MapDataEntry_DoNotUse::AnyData_MapDataEntry_DoNotUse() {}
AnyData_MapDataEntry_DoNotUse::AnyData_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AnyData_MapDataEntry_DoNotUse::MergeFrom(const AnyData_MapDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AnyData_MapDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AnyData_MapDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AnyData::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_AnyData_default_instance_._instance.get_mutable()->nested_data_ = const_cast< ::proto_util_converter::testing::AnyData*>(
      ::proto_util_converter::testing::AnyData::internal_default_instance());
  ::proto_util_converter::testing::_AnyData_default_instance_._instance.get_mutable()->struct_data_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class AnyData::_Internal {
 public:
  static const ::proto_util_converter::testing::AnyData& nested_data(const AnyData* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& struct_data(const AnyData* msg);
};

const ::proto_util_converter::testing::AnyData&
AnyData::_Internal::nested_data(const AnyData* msg) {
  return *msg->nested_data_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
AnyData::_Internal::struct_data(const AnyData* msg) {
  return *msg->struct_data_;
}
void AnyData::clear_struct_data() {
  if (GetArenaNoVirtual() == nullptr && struct_data_ != nullptr) {
    delete struct_data_;
  }
  struct_data_ = nullptr;
}
AnyData::AnyData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.AnyData)
}
AnyData::AnyData(const AnyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msgs_(from.msgs_),
      repeated_data_(from.repeated_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.MergeFrom(from.map_data_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str().empty()) {
    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from._internal_has_nested_data()) {
    nested_data_ = new ::proto_util_converter::testing::AnyData(*from.nested_data_);
  } else {
    nested_data_ = nullptr;
  }
  if (from._internal_has_struct_data()) {
    struct_data_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.struct_data_);
  } else {
    struct_data_ = nullptr;
  }
  attr_ = from.attr_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.AnyData)
}

void AnyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyData_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nested_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attr_) -
      reinterpret_cast<char*>(&nested_data_)) + sizeof(attr_));
}

AnyData::~AnyData() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.AnyData)
  SharedDtor();
}

void AnyData::SharedDtor() {
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nested_data_;
  if (this != internal_default_instance()) delete struct_data_;
}

void AnyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyData& AnyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyData_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void AnyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.AnyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  map_data_.Clear();
  repeated_data_.Clear();
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && nested_data_ != nullptr) {
    delete nested_data_;
  }
  nested_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct_data_ != nullptr) {
    delete struct_data_;
  }
  struct_data_ = nullptr;
  attr_ = 0;
  _internal_metadata_.Clear();
}

const char* AnyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 attr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_util_converter.testing.AnyData.str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msgs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_util_converter.testing.AnyData.msgs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyData nested_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> map_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct struct_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.AnyData repeated_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.AnyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attr = 1;
  if (this->attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_attr(), target);
  }

  // string str = 2;
  if (this->str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.AnyData.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  // repeated string msgs = 3;
  for (int i = 0, n = this->_internal_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_msgs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.AnyData.msgs");
    target = stream->WriteString(3, s, target);
  }

  // .proto_util_converter.testing.AnyData nested_data = 4;
  if (this->has_nested_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nested_data(this), target, stream);
  }

  // map<string, string> map_data = 7;
  if (!this->_internal_map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.AnyData.MapDataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.AnyData.MapDataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_data().begin();
          it != this->_internal_map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AnyData_MapDataEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_data().begin();
          it != this->_internal_map_data().end(); ++it) {
        target = AnyData_MapDataEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Struct struct_data = 8;
  if (this->has_struct_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::struct_data(this), target, stream);
  }

  // repeated .proto_util_converter.testing.AnyData repeated_data = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_repeated_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.AnyData)
  return target;
}

size_t AnyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.AnyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string msgs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msgs_.size());
  for (int i = 0, n = msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      msgs_.Get(i));
  }

  // map<string, string> map_data = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_data().begin();
      it != this->_internal_map_data().end(); ++it) {
    total_size += AnyData_MapDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .proto_util_converter.testing.AnyData repeated_data = 9;
  total_size += 1UL * this->_internal_repeated_data_size();
  for (const auto& msg : this->repeated_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string str = 2;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // .proto_util_converter.testing.AnyData nested_data = 4;
  if (this->has_nested_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_data_);
  }

  // .google.protobuf.Struct struct_data = 8;
  if (this->has_struct_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_data_);
  }

  // int32 attr = 1;
  if (this->attr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.AnyData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.AnyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.AnyData)
    MergeFrom(*source);
  }
}

void AnyData::MergeFrom(const AnyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.AnyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  map_data_.MergeFrom(from.map_data_);
  repeated_data_.MergeFrom(from.repeated_data_);
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.has_nested_data()) {
    _internal_mutable_nested_data()->::proto_util_converter::testing::AnyData::MergeFrom(from._internal_nested_data());
  }
  if (from.has_struct_data()) {
    _internal_mutable_struct_data()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_struct_data());
  }
  if (from.attr() != 0) {
    _internal_set_attr(from._internal_attr());
  }
}

void AnyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.AnyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyData::CopyFrom(const AnyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.AnyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyData::IsInitialized() const {
  return true;
}

void AnyData::InternalSwap(AnyData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
  map_data_.Swap(&other->map_data_);
  repeated_data_.InternalSwap(&other->repeated_data_);
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nested_data_, other->nested_data_);
  swap(struct_data_, other->struct_data_);
  swap(attr_, other->attr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StringtoIntMap_MapEntry_DoNotUse::StringtoIntMap_MapEntry_DoNotUse() {}
StringtoIntMap_MapEntry_DoNotUse::StringtoIntMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StringtoIntMap_MapEntry_DoNotUse::MergeFrom(const StringtoIntMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StringtoIntMap_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void StringtoIntMap_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void StringtoIntMap::InitAsDefaultInstance() {
}
class StringtoIntMap::_Internal {
 public:
};

StringtoIntMap::StringtoIntMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.StringtoIntMap)
}
StringtoIntMap::StringtoIntMap(const StringtoIntMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.StringtoIntMap)
}

void StringtoIntMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringtoIntMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
}

StringtoIntMap::~StringtoIntMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.StringtoIntMap)
  SharedDtor();
}

void StringtoIntMap::SharedDtor() {
}

void StringtoIntMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringtoIntMap& StringtoIntMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringtoIntMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void StringtoIntMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.StringtoIntMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear();
}

const char* StringtoIntMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, int32> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringtoIntMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.StringtoIntMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> map = 1;
  if (!this->_internal_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.StringtoIntMap.MapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StringtoIntMap_MapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it) {
        target = StringtoIntMap_MapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.StringtoIntMap)
  return target;
}

size_t StringtoIntMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.StringtoIntMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += StringtoIntMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringtoIntMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.StringtoIntMap)
  GOOGLE_DCHECK_NE(&from, this);
  const StringtoIntMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringtoIntMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.StringtoIntMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.StringtoIntMap)
    MergeFrom(*source);
  }
}

void StringtoIntMap::MergeFrom(const StringtoIntMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.StringtoIntMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
}

void StringtoIntMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.StringtoIntMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringtoIntMap::CopyFrom(const StringtoIntMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.StringtoIntMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringtoIntMap::IsInitialized() const {
  return true;
}

void StringtoIntMap::InternalSwap(StringtoIntMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringtoIntMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

IntToStringMap_MapEntry_DoNotUse::IntToStringMap_MapEntry_DoNotUse() {}
IntToStringMap_MapEntry_DoNotUse::IntToStringMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IntToStringMap_MapEntry_DoNotUse::MergeFrom(const IntToStringMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IntToStringMap_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void IntToStringMap_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void IntToStringMap::InitAsDefaultInstance() {
}
class IntToStringMap::_Internal {
 public:
};

IntToStringMap::IntToStringMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.IntToStringMap)
}
IntToStringMap::IntToStringMap(const IntToStringMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.IntToStringMap)
}

void IntToStringMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntToStringMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
}

IntToStringMap::~IntToStringMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.IntToStringMap)
  SharedDtor();
}

void IntToStringMap::SharedDtor() {
}

void IntToStringMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntToStringMap& IntToStringMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntToStringMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void IntToStringMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.IntToStringMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear();
}

const char* IntToStringMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, string> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntToStringMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.IntToStringMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> map = 1;
  if (!this->_internal_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.IntToStringMap.MapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = IntToStringMap_MapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it) {
        target = IntToStringMap_MapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.IntToStringMap)
  return target;
}

size_t IntToStringMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.IntToStringMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += IntToStringMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntToStringMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.IntToStringMap)
  GOOGLE_DCHECK_NE(&from, this);
  const IntToStringMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntToStringMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.IntToStringMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.IntToStringMap)
    MergeFrom(*source);
  }
}

void IntToStringMap::MergeFrom(const IntToStringMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.IntToStringMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
}

void IntToStringMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.IntToStringMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntToStringMap::CopyFrom(const IntToStringMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.IntToStringMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntToStringMap::IsInitialized() const {
  return true;
}

void IntToStringMap::InternalSwap(IntToStringMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntToStringMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MixedMap_MapEntry_DoNotUse::MixedMap_MapEntry_DoNotUse() {}
MixedMap_MapEntry_DoNotUse::MixedMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MixedMap_MapEntry_DoNotUse::MergeFrom(const MixedMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MixedMap_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MixedMap_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MixedMap::InitAsDefaultInstance() {
}
class MixedMap::_Internal {
 public:
};

MixedMap::MixedMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MixedMap)
}
MixedMap::MixedMap(const MixedMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  int_value_ = from.int_value_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MixedMap)
}

void MixedMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MixedMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  int_value_ = 0;
}

MixedMap::~MixedMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MixedMap)
  SharedDtor();
}

void MixedMap::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MixedMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MixedMap& MixedMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MixedMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void MixedMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MixedMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  int_value_ = 0;
  _internal_metadata_.Clear();
}

const char* MixedMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_util_converter.testing.MixedMap.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, float> map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 int_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MixedMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MixedMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MixedMap.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // map<string, float> map = 2;
  if (!this->_internal_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MixedMap.MapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MixedMap_MapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it) {
        target = MixedMap_MapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 int_value = 3;
  if (this->int_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_int_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MixedMap)
  return target;
}

size_t MixedMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MixedMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += MixedMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 int_value = 3;
  if (this->int_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MixedMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MixedMap)
  GOOGLE_DCHECK_NE(&from, this);
  const MixedMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MixedMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MixedMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MixedMap)
    MergeFrom(*source);
  }
}

void MixedMap::MergeFrom(const MixedMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MixedMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.int_value() != 0) {
    _internal_set_int_value(from._internal_int_value());
  }
}

void MixedMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MixedMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixedMap::CopyFrom(const MixedMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MixedMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixedMap::IsInitialized() const {
  return true;
}

void MixedMap::InternalSwap(MixedMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(int_value_, other->int_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixedMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MixedMap2_MapEntry_DoNotUse::MixedMap2_MapEntry_DoNotUse() {}
MixedMap2_MapEntry_DoNotUse::MixedMap2_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MixedMap2_MapEntry_DoNotUse::MergeFrom(const MixedMap2_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MixedMap2_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MixedMap2_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MixedMap2::InitAsDefaultInstance() {
}
class MixedMap2::_Internal {
 public:
};

MixedMap2::MixedMap2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MixedMap2)
}
MixedMap2::MixedMap2(const MixedMap2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ee_ = from.ee_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MixedMap2)
}

void MixedMap2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MixedMap2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ee_ = 0;
}

MixedMap2::~MixedMap2() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MixedMap2)
  SharedDtor();
}

void MixedMap2::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MixedMap2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MixedMap2& MixedMap2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MixedMap2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void MixedMap2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MixedMap2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ee_ = 0;
  _internal_metadata_.Clear();
}

const char* MixedMap2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, bool> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap2.E ee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ee(static_cast<::proto_util_converter::testing::MixedMap2_E>(val));
        } else goto handle_unusual;
        continue;
      // string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_util_converter.testing.MixedMap2.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MixedMap2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MixedMap2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, bool> map = 1;
  if (!this->_internal_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MixedMap2_MapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it) {
        target = MixedMap2_MapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // .proto_util_converter.testing.MixedMap2.E ee = 2;
  if (this->ee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ee(), target);
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MixedMap2.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MixedMap2)
  return target;
}

size_t MixedMap2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MixedMap2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += MixedMap2_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .proto_util_converter.testing.MixedMap2.E ee = 2;
  if (this->ee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MixedMap2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MixedMap2)
  GOOGLE_DCHECK_NE(&from, this);
  const MixedMap2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MixedMap2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MixedMap2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MixedMap2)
    MergeFrom(*source);
  }
}

void MixedMap2::MergeFrom(const MixedMap2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MixedMap2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.ee() != 0) {
    _internal_set_ee(from._internal_ee());
  }
}

void MixedMap2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MixedMap2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixedMap2::CopyFrom(const MixedMap2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MixedMap2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixedMap2::IsInitialized() const {
  return true;
}

void MixedMap2::InternalSwap(MixedMap2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ee_, other->ee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixedMap2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageMap_M::InitAsDefaultInstance() {
}
class MessageMap_M::_Internal {
 public:
};

MessageMap_M::MessageMap_M()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MessageMap.M)
}
MessageMap_M::MessageMap_M(const MessageMap_M& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inner_text().empty()) {
    inner_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inner_text_);
  }
  inner_int_ = from.inner_int_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MessageMap.M)
}

void MessageMap_M::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageMap_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  inner_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inner_int_ = 0;
}

MessageMap_M::~MessageMap_M() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MessageMap.M)
  SharedDtor();
}

void MessageMap_M::SharedDtor() {
  inner_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageMap_M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageMap_M& MessageMap_M::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageMap_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void MessageMap_M::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MessageMap.M)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inner_int_ = 0;
  _internal_metadata_.Clear();
}

const char* MessageMap_M::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 inner_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          inner_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inner_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_inner_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_util_converter.testing.MessageMap.M.inner_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageMap_M::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MessageMap.M)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inner_int = 1;
  if (this->inner_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_inner_int(), target);
  }

  // string inner_text = 2;
  if (this->inner_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inner_text().data(), static_cast<int>(this->_internal_inner_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MessageMap.M.inner_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_inner_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MessageMap.M)
  return target;
}

size_t MessageMap_M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MessageMap.M)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inner_text = 2;
  if (this->inner_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inner_text());
  }

  // int32 inner_int = 1;
  if (this->inner_int() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inner_int());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageMap_M::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MessageMap.M)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageMap_M* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageMap_M>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MessageMap.M)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MessageMap.M)
    MergeFrom(*source);
  }
}

void MessageMap_M::MergeFrom(const MessageMap_M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MessageMap.M)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_text().size() > 0) {

    inner_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inner_text_);
  }
  if (from.inner_int() != 0) {
    _internal_set_inner_int(from._internal_inner_int());
  }
}

void MessageMap_M::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MessageMap.M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMap_M::CopyFrom(const MessageMap_M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MessageMap.M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMap_M::IsInitialized() const {
  return true;
}

void MessageMap_M::InternalSwap(MessageMap_M* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inner_text_.Swap(&other->inner_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inner_int_, other->inner_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMap_M::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MessageMap_MapEntry_DoNotUse::MessageMap_MapEntry_DoNotUse() {}
MessageMap_MapEntry_DoNotUse::MessageMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MessageMap_MapEntry_DoNotUse::MergeFrom(const MessageMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MessageMap_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MessageMap_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MessageMap::InitAsDefaultInstance() {
}
class MessageMap::_Internal {
 public:
};

MessageMap::MessageMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MessageMap)
}
MessageMap::MessageMap(const MessageMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MessageMap)
}

void MessageMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
}

MessageMap::~MessageMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MessageMap)
  SharedDtor();
}

void MessageMap::SharedDtor() {
}

void MessageMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageMap& MessageMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void MessageMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MessageMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear();
}

const char* MessageMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .proto_util_converter.testing.MessageMap.M> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MessageMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MessageMap.M> map = 1;
  if (!this->_internal_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MessageMap.MapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MessageMap_MapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it) {
        target = MessageMap_MapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MessageMap)
  return target;
}

size_t MessageMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MessageMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MessageMap.M> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += MessageMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MessageMap)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MessageMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MessageMap)
    MergeFrom(*source);
  }
}

void MessageMap::MergeFrom(const MessageMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MessageMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
}

void MessageMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MessageMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMap::CopyFrom(const MessageMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MessageMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMap::IsInitialized() const {
  return true;
}

void MessageMap::InternalSwap(MessageMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoubleValueMessage::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_DoubleValueMessage_default_instance_._instance.get_mutable()->double__ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class DoubleValueMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& double_(const DoubleValueMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
DoubleValueMessage::_Internal::double_(const DoubleValueMessage* msg) {
  return *msg->double__;
}
void DoubleValueMessage::clear_double_() {
  if (GetArenaNoVirtual() == nullptr && double__ != nullptr) {
    delete double__;
  }
  double__ = nullptr;
}
DoubleValueMessage::DoubleValueMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.DoubleValueMessage)
}
DoubleValueMessage::DoubleValueMessage(const DoubleValueMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_double_()) {
    double__ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.double__);
  } else {
    double__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.DoubleValueMessage)
}

void DoubleValueMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  double__ = nullptr;
}

DoubleValueMessage::~DoubleValueMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.DoubleValueMessage)
  SharedDtor();
}

void DoubleValueMessage::SharedDtor() {
  if (this != internal_default_instance()) delete double__;
}

void DoubleValueMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleValueMessage& DoubleValueMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleValueMessage_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void DoubleValueMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.DoubleValueMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && double__ != nullptr) {
    delete double__;
  }
  double__ = nullptr;
  _internal_metadata_.Clear();
}

const char* DoubleValueMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleValueMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.DoubleValueMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue double = 1;
  if (this->has_double_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::double_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.DoubleValueMessage)
  return target;
}

size_t DoubleValueMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.DoubleValueMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue double = 1;
  if (this->has_double_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleValueMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.DoubleValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleValueMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleValueMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.DoubleValueMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.DoubleValueMessage)
    MergeFrom(*source);
  }
}

void DoubleValueMessage::MergeFrom(const DoubleValueMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.DoubleValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_double_()) {
    _internal_mutable_double_()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_double_());
  }
}

void DoubleValueMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.DoubleValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleValueMessage::CopyFrom(const DoubleValueMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.DoubleValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleValueMessage::IsInitialized() const {
  return true;
}

void DoubleValueMessage::InternalSwap(DoubleValueMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(double__, other->double__);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleValueMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::DefaultValueTestCases* Arena::CreateMaybeMessage< ::proto_util_converter::testing::DefaultValueTestCases >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::DefaultValueTestCases >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::DoubleMessage* Arena::CreateMaybeMessage< ::proto_util_converter::testing::DoubleMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::DoubleMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StructMessage* Arena::CreateMaybeMessage< ::proto_util_converter::testing::StructMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::StructMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::ValueMessage* Arena::CreateMaybeMessage< ::proto_util_converter::testing::ValueMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::ValueMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::ListValueMessage* Arena::CreateMaybeMessage< ::proto_util_converter::testing::ListValueMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::ListValueMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::RequestMessage* Arena::CreateMaybeMessage< ::proto_util_converter::testing::RequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::RequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyMessage* Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::AnyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyData* Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyData >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::AnyData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StringtoIntMap* Arena::CreateMaybeMessage< ::proto_util_converter::testing::StringtoIntMap >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::StringtoIntMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::IntToStringMap* Arena::CreateMaybeMessage< ::proto_util_converter::testing::IntToStringMap >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::IntToStringMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MixedMap* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MixedMap >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MixedMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MixedMap2* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MixedMap2 >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MixedMap2 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MessageMap_M* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MessageMap_M >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MessageMap_M >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MessageMap* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MessageMap >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MessageMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::DoubleValueMessage* Arena::CreateMaybeMessage< ::proto_util_converter::testing::DoubleValueMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::DoubleValueMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
