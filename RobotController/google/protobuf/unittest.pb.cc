// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest.proto

#include "google/protobuf/unittest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedGroup_extension_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypes_OptionalGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypes_RepeatedGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestDupFieldNumber_Bar_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestDupFieldNumber_Foo_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestDynamicExtensions_DynamicMessageType_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtensionOrderings1_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtensionOrderings2_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtensionOrderings2_TestExtensionOrderings3_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldOrderings_NestedMessage_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGroup_OptionalGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestHugeFieldNumbers_OptionalGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestIsInitialized_SubMessage_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestIsInitialized_SubMessage_SubGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestNestedExtension_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestNestedMessageHasBits_NestedMessage_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestOneof_FooGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestOneof2_FooGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestOneof2_NestedMessage_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestOneofBackwardsCompatible_FooGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestParsingMerge_OptionalGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group1_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group2_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestParsingMerge_RepeatedGroup_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRecursiveMessage_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRequired_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRequiredOneof_NestedMessage_google_2fprotobuf_2funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fimport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImportMessage_google_2fprotobuf_2funittest_5fimport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fimport_5fpublic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicImportMessage_google_2fprotobuf_2funittest_5fimport_5fpublic_2eproto;
namespace protobuf_unittest {
class TestAllTypes_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypes_NestedMessage> _instance;
} _TestAllTypes_NestedMessage_default_instance_;
class TestAllTypes_OptionalGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypes_OptionalGroup> _instance;
} _TestAllTypes_OptionalGroup_default_instance_;
class TestAllTypes_RepeatedGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypes_RepeatedGroup> _instance;
} _TestAllTypes_RepeatedGroup_default_instance_;
class TestAllTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypes> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 oneof_uint32_;
  const ::protobuf_unittest::TestAllTypes_NestedMessage* oneof_nested_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
} _TestAllTypes_default_instance_;
class NestedTestAllTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NestedTestAllTypes> _instance;
} _NestedTestAllTypes_default_instance_;
class TestDeprecatedFieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestDeprecatedFields> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 deprecated_int32_in_oneof_;
} _TestDeprecatedFields_default_instance_;
class TestDeprecatedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestDeprecatedMessage> _instance;
} _TestDeprecatedMessage_default_instance_;
class ForeignMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForeignMessage> _instance;
} _ForeignMessage_default_instance_;
class TestReservedFieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestReservedFields> _instance;
} _TestReservedFields_default_instance_;
class TestAllExtensionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllExtensions> _instance;
} _TestAllExtensions_default_instance_;
class OptionalGroup_extensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionalGroup_extension> _instance;
} _OptionalGroup_extension_default_instance_;
class RepeatedGroup_extensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedGroup_extension> _instance;
} _RepeatedGroup_extension_default_instance_;
class TestGroup_OptionalGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestGroup_OptionalGroup> _instance;
} _TestGroup_OptionalGroup_default_instance_;
class TestGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestGroup> _instance;
} _TestGroup_default_instance_;
class TestGroupExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestGroupExtension> _instance;
} _TestGroupExtension_default_instance_;
class TestNestedExtension_OptionalGroup_extensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestNestedExtension_OptionalGroup_extension> _instance;
} _TestNestedExtension_OptionalGroup_extension_default_instance_;
class TestNestedExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestNestedExtension> _instance;
} _TestNestedExtension_default_instance_;
class TestRequiredDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRequired> _instance;
} _TestRequired_default_instance_;
class TestRequiredForeignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRequiredForeign> _instance;
} _TestRequiredForeign_default_instance_;
class TestRequiredMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRequiredMessage> _instance;
} _TestRequiredMessage_default_instance_;
class TestForeignNestedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestForeignNested> _instance;
} _TestForeignNested_default_instance_;
class TestEmptyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEmptyMessage> _instance;
} _TestEmptyMessage_default_instance_;
class TestEmptyMessageWithExtensionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEmptyMessageWithExtensions> _instance;
} _TestEmptyMessageWithExtensions_default_instance_;
class TestPickleNestedMessage_NestedMessage_NestedNestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPickleNestedMessage_NestedMessage_NestedNestedMessage> _instance;
} _TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_;
class TestPickleNestedMessage_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPickleNestedMessage_NestedMessage> _instance;
} _TestPickleNestedMessage_NestedMessage_default_instance_;
class TestPickleNestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPickleNestedMessage> _instance;
} _TestPickleNestedMessage_default_instance_;
class TestMultipleExtensionRangesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMultipleExtensionRanges> _instance;
} _TestMultipleExtensionRanges_default_instance_;
class TestReallyLargeTagNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestReallyLargeTagNumber> _instance;
} _TestReallyLargeTagNumber_default_instance_;
class TestRecursiveMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRecursiveMessage> _instance;
} _TestRecursiveMessage_default_instance_;
class TestMutualRecursionA_SubMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMutualRecursionA_SubMessage> _instance;
} _TestMutualRecursionA_SubMessage_default_instance_;
class TestMutualRecursionA_SubGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMutualRecursionA_SubGroup> _instance;
} _TestMutualRecursionA_SubGroup_default_instance_;
class TestMutualRecursionADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMutualRecursionA> _instance;
} _TestMutualRecursionA_default_instance_;
class TestMutualRecursionBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMutualRecursionB> _instance;
} _TestMutualRecursionB_default_instance_;
class TestIsInitialized_SubMessage_SubGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestIsInitialized_SubMessage_SubGroup> _instance;
} _TestIsInitialized_SubMessage_SubGroup_default_instance_;
class TestIsInitialized_SubMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestIsInitialized_SubMessage> _instance;
} _TestIsInitialized_SubMessage_default_instance_;
class TestIsInitializedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestIsInitialized> _instance;
} _TestIsInitialized_default_instance_;
class TestDupFieldNumber_FooDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestDupFieldNumber_Foo> _instance;
} _TestDupFieldNumber_Foo_default_instance_;
class TestDupFieldNumber_BarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestDupFieldNumber_Bar> _instance;
} _TestDupFieldNumber_Bar_default_instance_;
class TestDupFieldNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestDupFieldNumber> _instance;
} _TestDupFieldNumber_default_instance_;
class TestEagerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEagerMessage> _instance;
} _TestEagerMessage_default_instance_;
class TestLazyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestLazyMessage> _instance;
} _TestLazyMessage_default_instance_;
class TestNestedMessageHasBits_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestNestedMessageHasBits_NestedMessage> _instance;
} _TestNestedMessageHasBits_NestedMessage_default_instance_;
class TestNestedMessageHasBitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestNestedMessageHasBits> _instance;
} _TestNestedMessageHasBits_default_instance_;
class TestCamelCaseFieldNamesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestCamelCaseFieldNames> _instance;
} _TestCamelCaseFieldNames_default_instance_;
class TestFieldOrderings_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldOrderings_NestedMessage> _instance;
} _TestFieldOrderings_NestedMessage_default_instance_;
class TestFieldOrderingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldOrderings> _instance;
} _TestFieldOrderings_default_instance_;
class TestExtensionOrderings1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestExtensionOrderings1> _instance;
} _TestExtensionOrderings1_default_instance_;
class TestExtensionOrderings2_TestExtensionOrderings3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestExtensionOrderings2_TestExtensionOrderings3> _instance;
} _TestExtensionOrderings2_TestExtensionOrderings3_default_instance_;
class TestExtensionOrderings2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestExtensionOrderings2> _instance;
} _TestExtensionOrderings2_default_instance_;
class TestExtremeDefaultValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestExtremeDefaultValues> _instance;
} _TestExtremeDefaultValues_default_instance_;
class SparseEnumMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseEnumMessage> _instance;
} _SparseEnumMessage_default_instance_;
class OneStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OneString> _instance;
} _OneString_default_instance_;
class MoreStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoreString> _instance;
} _MoreString_default_instance_;
class OneBytesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OneBytes> _instance;
} _OneBytes_default_instance_;
class MoreBytesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoreBytes> _instance;
} _MoreBytes_default_instance_;
class Int32MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int32Message> _instance;
} _Int32Message_default_instance_;
class Uint32MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Uint32Message> _instance;
} _Uint32Message_default_instance_;
class Int64MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int64Message> _instance;
} _Int64Message_default_instance_;
class Uint64MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Uint64Message> _instance;
} _Uint64Message_default_instance_;
class BoolMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolMessage> _instance;
} _BoolMessage_default_instance_;
class TestOneof_FooGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestOneof_FooGroup> _instance;
} _TestOneof_FooGroup_default_instance_;
class TestOneofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestOneof> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 foo_int_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_string_;
  const ::protobuf_unittest::TestAllTypes* foo_message_;
  const ::protobuf_unittest::TestOneof_FooGroup* foogroup_;
} _TestOneof_default_instance_;
class TestOneofBackwardsCompatible_FooGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestOneofBackwardsCompatible_FooGroup> _instance;
} _TestOneofBackwardsCompatible_FooGroup_default_instance_;
class TestOneofBackwardsCompatibleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestOneofBackwardsCompatible> _instance;
} _TestOneofBackwardsCompatible_default_instance_;
class TestOneof2_FooGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestOneof2_FooGroup> _instance;
} _TestOneof2_FooGroup_default_instance_;
class TestOneof2_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestOneof2_NestedMessage> _instance;
} _TestOneof2_NestedMessage_default_instance_;
class TestOneof2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestOneof2> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 foo_int_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_cord_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_string_piece_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_bytes_;
  int foo_enum_;
  const ::protobuf_unittest::TestOneof2_NestedMessage* foo_message_;
  const ::protobuf_unittest::TestOneof2_FooGroup* foogroup_;
  const ::protobuf_unittest::TestOneof2_NestedMessage* foo_lazy_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 bar_int_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_cord_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_string_piece_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_bytes_;
  int bar_enum_;
} _TestOneof2_default_instance_;
class TestRequiredOneof_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRequiredOneof_NestedMessage> _instance;
} _TestRequiredOneof_NestedMessage_default_instance_;
class TestRequiredOneofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRequiredOneof> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 foo_int_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_string_;
  const ::protobuf_unittest::TestRequiredOneof_NestedMessage* foo_message_;
} _TestRequiredOneof_default_instance_;
class TestPackedTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPackedTypes> _instance;
} _TestPackedTypes_default_instance_;
class TestUnpackedTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestUnpackedTypes> _instance;
} _TestUnpackedTypes_default_instance_;
class TestPackedExtensionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPackedExtensions> _instance;
} _TestPackedExtensions_default_instance_;
class TestUnpackedExtensionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestUnpackedExtensions> _instance;
} _TestUnpackedExtensions_default_instance_;
class TestDynamicExtensions_DynamicMessageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestDynamicExtensions_DynamicMessageType> _instance;
} _TestDynamicExtensions_DynamicMessageType_default_instance_;
class TestDynamicExtensionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestDynamicExtensions> _instance;
} _TestDynamicExtensions_default_instance_;
class TestRepeatedScalarDifferentTagSizesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRepeatedScalarDifferentTagSizes> _instance;
} _TestRepeatedScalarDifferentTagSizes_default_instance_;
class TestParsingMerge_RepeatedFieldsGenerator_Group1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestParsingMerge_RepeatedFieldsGenerator_Group1> _instance;
} _TestParsingMerge_RepeatedFieldsGenerator_Group1_default_instance_;
class TestParsingMerge_RepeatedFieldsGenerator_Group2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestParsingMerge_RepeatedFieldsGenerator_Group2> _instance;
} _TestParsingMerge_RepeatedFieldsGenerator_Group2_default_instance_;
class TestParsingMerge_RepeatedFieldsGeneratorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestParsingMerge_RepeatedFieldsGenerator> _instance;
} _TestParsingMerge_RepeatedFieldsGenerator_default_instance_;
class TestParsingMerge_OptionalGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestParsingMerge_OptionalGroup> _instance;
} _TestParsingMerge_OptionalGroup_default_instance_;
class TestParsingMerge_RepeatedGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestParsingMerge_RepeatedGroup> _instance;
} _TestParsingMerge_RepeatedGroup_default_instance_;
class TestParsingMergeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestParsingMerge> _instance;
} _TestParsingMerge_default_instance_;
class TestCommentInjectionMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestCommentInjectionMessage> _instance;
} _TestCommentInjectionMessage_default_instance_;
class FooRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FooRequest> _instance;
} _FooRequest_default_instance_;
class FooResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FooResponse> _instance;
} _FooResponse_default_instance_;
class FooClientMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FooClientMessage> _instance;
} _FooClientMessage_default_instance_;
class FooServerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FooServerMessage> _instance;
} _FooServerMessage_default_instance_;
class BarRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BarRequest> _instance;
} _BarRequest_default_instance_;
class BarResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BarResponse> _instance;
} _BarResponse_default_instance_;
class TestJsonNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestJsonName> _instance;
} _TestJsonName_default_instance_;
class TestHugeFieldNumbers_OptionalGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestHugeFieldNumbers_OptionalGroup> _instance;
} _TestHugeFieldNumbers_OptionalGroup_default_instance_;
class TestHugeFieldNumbers_StringStringMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestHugeFieldNumbers_StringStringMapEntry_DoNotUse> _instance;
} _TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_default_instance_;
class TestHugeFieldNumbersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestHugeFieldNumbers> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 oneof_uint32_;
  const ::protobuf_unittest::TestAllTypes* oneof_test_all_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
} _TestHugeFieldNumbers_default_instance_;
class TestExtensionInsideTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestExtensionInsideTable> _instance;
} _TestExtensionInsideTable_default_instance_;
}  // namespace protobuf_unittest
static void InitDefaultsscc_info_BarRequest_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_BarRequest_default_instance_;
    new (ptr) ::protobuf_unittest::BarRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::BarRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BarRequest_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BarRequest_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_BarResponse_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_BarResponse_default_instance_;
    new (ptr) ::protobuf_unittest::BarResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::BarResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BarResponse_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BarResponse_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_BoolMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_BoolMessage_default_instance_;
    new (ptr) ::protobuf_unittest::BoolMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::BoolMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoolMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_FooClientMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_FooClientMessage_default_instance_;
    new (ptr) ::protobuf_unittest::FooClientMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::FooClientMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FooClientMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FooClientMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_FooRequest_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_FooRequest_default_instance_;
    new (ptr) ::protobuf_unittest::FooRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::FooRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FooRequest_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FooRequest_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_FooResponse_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_FooResponse_default_instance_;
    new (ptr) ::protobuf_unittest::FooResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::FooResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FooResponse_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FooResponse_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_FooServerMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_FooServerMessage_default_instance_;
    new (ptr) ::protobuf_unittest::FooServerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::FooServerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FooServerMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FooServerMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_ForeignMessage_default_instance_;
    new (ptr) ::protobuf_unittest::ForeignMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::ForeignMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_Int32Message_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_Int32Message_default_instance_;
    new (ptr) ::protobuf_unittest::Int32Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::Int32Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Message_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Int32Message_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_Int64Message_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_Int64Message_default_instance_;
    new (ptr) ::protobuf_unittest::Int64Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::Int64Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Message_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Int64Message_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_MoreBytes_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_MoreBytes_default_instance_;
    new (ptr) ::protobuf_unittest::MoreBytes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::MoreBytes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoreBytes_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoreBytes_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_MoreString_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_MoreString_default_instance_;
    new (ptr) ::protobuf_unittest::MoreString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::MoreString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoreString_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoreString_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_NestedTestAllTypes_default_instance_;
    new (ptr) ::protobuf_unittest::NestedTestAllTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::NestedTestAllTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_OneBytes_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_OneBytes_default_instance_;
    new (ptr) ::protobuf_unittest::OneBytes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::OneBytes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OneBytes_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OneBytes_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_OneString_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_OneString_default_instance_;
    new (ptr) ::protobuf_unittest::OneString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::OneString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OneString_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OneString_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_OptionalGroup_extension_default_instance_;
    new (ptr) ::protobuf_unittest::OptionalGroup_extension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::OptionalGroup_extension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedGroup_extension_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_RepeatedGroup_extension_default_instance_;
    new (ptr) ::protobuf_unittest::RepeatedGroup_extension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::RepeatedGroup_extension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedGroup_extension_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedGroup_extension_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_SparseEnumMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_SparseEnumMessage_default_instance_;
    new (ptr) ::protobuf_unittest::SparseEnumMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::SparseEnumMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseEnumMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SparseEnumMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestAllExtensions_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestAllExtensions_default_instance_;
    new (ptr) ::protobuf_unittest::TestAllExtensions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestAllExtensions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllExtensions_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllExtensions_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_.DefaultConstruct();
  *::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_.get_mutable() = std::string("hello", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_.get_mutable());
  ::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_.DefaultConstruct();
  *::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_.get_mutable() = std::string("world", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_.get_mutable());
  ::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_.DefaultConstruct();
  *::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_.get_mutable() = std::string("abc", 3);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_.get_mutable());
  ::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_.DefaultConstruct();
  *::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_.get_mutable() = std::string("123", 3);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_.get_mutable());
  {
    void* ptr = &::protobuf_unittest::_TestAllTypes_default_instance_;
    new (ptr) ::protobuf_unittest::TestAllTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestAllTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_ImportMessage_google_2fprotobuf_2funittest_5fimport_2eproto.base,
      &scc_info_PublicImportMessage_google_2fprotobuf_2funittest_5fimport_5fpublic_2eproto.base,
      &scc_info_TestAllTypes_RepeatedGroup_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestAllTypes_NestedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestAllTypes_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestAllTypes_NestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypes_OptionalGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestAllTypes_OptionalGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestAllTypes_OptionalGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestAllTypes_OptionalGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypes_OptionalGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypes_OptionalGroup_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypes_RepeatedGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestAllTypes_RepeatedGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestAllTypes_RepeatedGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestAllTypes_RepeatedGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypes_RepeatedGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypes_RepeatedGroup_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestCamelCaseFieldNames_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestCamelCaseFieldNames_default_instance_;
    new (ptr) ::protobuf_unittest::TestCamelCaseFieldNames();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestCamelCaseFieldNames::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestCamelCaseFieldNames_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestCamelCaseFieldNames_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestCommentInjectionMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_.DefaultConstruct();
  *::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_.get_mutable() = std::string("*/ <- Neither should this.", 26);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_.get_mutable());
  {
    void* ptr = &::protobuf_unittest::_TestCommentInjectionMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestCommentInjectionMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestCommentInjectionMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestCommentInjectionMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestCommentInjectionMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestDeprecatedFields_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestDeprecatedFields_default_instance_;
    new (ptr) ::protobuf_unittest::TestDeprecatedFields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestDeprecatedFields::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestDeprecatedFields_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestDeprecatedFields_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestDeprecatedMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestDeprecatedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestDeprecatedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestDeprecatedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestDeprecatedMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestDeprecatedMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestDupFieldNumber_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestDupFieldNumber_default_instance_;
    new (ptr) ::protobuf_unittest::TestDupFieldNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestDupFieldNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestDupFieldNumber_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestDupFieldNumber_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestDupFieldNumber_Foo_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestDupFieldNumber_Bar_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestDupFieldNumber_Bar_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestDupFieldNumber_Bar_default_instance_;
    new (ptr) ::protobuf_unittest::TestDupFieldNumber_Bar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestDupFieldNumber_Bar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestDupFieldNumber_Bar_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestDupFieldNumber_Bar_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestDupFieldNumber_Foo_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestDupFieldNumber_Foo_default_instance_;
    new (ptr) ::protobuf_unittest::TestDupFieldNumber_Foo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestDupFieldNumber_Foo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestDupFieldNumber_Foo_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestDupFieldNumber_Foo_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestDynamicExtensions_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestDynamicExtensions_default_instance_;
    new (ptr) ::protobuf_unittest::TestDynamicExtensions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestDynamicExtensions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestDynamicExtensions_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestDynamicExtensions_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestDynamicExtensions_DynamicMessageType_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestDynamicExtensions_DynamicMessageType_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestDynamicExtensions_DynamicMessageType_default_instance_;
    new (ptr) ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestDynamicExtensions_DynamicMessageType_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestDynamicExtensions_DynamicMessageType_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestEagerMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEagerMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestEagerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestEagerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestEagerMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestEagerMessage_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestEmptyMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEmptyMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestEmptyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestEmptyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEmptyMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestEmptyMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestEmptyMessageWithExtensions_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEmptyMessageWithExtensions_default_instance_;
    new (ptr) ::protobuf_unittest::TestEmptyMessageWithExtensions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestEmptyMessageWithExtensions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEmptyMessageWithExtensions_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestEmptyMessageWithExtensions_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestExtensionInsideTable_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestExtensionInsideTable_default_instance_;
    new (ptr) ::protobuf_unittest::TestExtensionInsideTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestExtensionInsideTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtensionInsideTable_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestExtensionInsideTable_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestExtensionOrderings1_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestExtensionOrderings1_default_instance_;
    new (ptr) ::protobuf_unittest::TestExtensionOrderings1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestExtensionOrderings1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtensionOrderings1_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestExtensionOrderings1_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestExtensionOrderings2_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestExtensionOrderings2_default_instance_;
    new (ptr) ::protobuf_unittest::TestExtensionOrderings2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestExtensionOrderings2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtensionOrderings2_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestExtensionOrderings2_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestExtensionOrderings2_TestExtensionOrderings3_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestExtensionOrderings2_TestExtensionOrderings3_default_instance_;
    new (ptr) ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtensionOrderings2_TestExtensionOrderings3_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestExtensionOrderings2_TestExtensionOrderings3_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestExtremeDefaultValues_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_.DefaultConstruct();
  *::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_.get_mutable() = std::string("\000\001\007\010\014\n\r\t\013\\\'\"\376", 13);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_.get_mutable());
  ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_.DefaultConstruct();
  *::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_.get_mutable() = std::string("\341\210\264", 3);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_.get_mutable());
  ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_.DefaultConstruct();
  *::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_.get_mutable() = std::string("\? \? \?\? \?\? \?\?\? \?\?/ \?\?-", 21);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_.get_mutable());
  ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_.DefaultConstruct();
  *::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_.get_mutable() = std::string("hel\000lo", 6);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_.get_mutable());
  ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_.DefaultConstruct();
  *::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_.get_mutable() = std::string("wor\000ld", 6);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_.get_mutable());
  ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_.DefaultConstruct();
  *::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_.get_mutable() = std::string("ab\000c", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_.get_mutable());
  ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_.DefaultConstruct();
  *::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_.get_mutable() = std::string("12\0003", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_.get_mutable());
  ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_.DefaultConstruct();
  *::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_.get_mutable() = std::string("${unknown}", 10);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_.get_mutable());
  {
    void* ptr = &::protobuf_unittest::_TestExtremeDefaultValues_default_instance_;
    new (ptr) ::protobuf_unittest::TestExtremeDefaultValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestExtremeDefaultValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtremeDefaultValues_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestExtremeDefaultValues_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldOrderings_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestFieldOrderings_default_instance_;
    new (ptr) ::protobuf_unittest::TestFieldOrderings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestFieldOrderings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestFieldOrderings_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestFieldOrderings_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestFieldOrderings_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestFieldOrderings_NestedMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestFieldOrderings_NestedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestFieldOrderings_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestFieldOrderings_NestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldOrderings_NestedMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldOrderings_NestedMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestForeignNested_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestForeignNested_default_instance_;
    new (ptr) ::protobuf_unittest::TestForeignNested();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestForeignNested::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestForeignNested_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestForeignNested_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestGroup_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestGroup_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestGroup_OptionalGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestGroup_OptionalGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestGroup_OptionalGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestGroup_OptionalGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGroup_OptionalGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestGroup_OptionalGroup_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestGroupExtension_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestGroupExtension_default_instance_;
    new (ptr) ::protobuf_unittest::TestGroupExtension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestGroupExtension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGroupExtension_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestGroupExtension_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestHugeFieldNumbers_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestHugeFieldNumbers_default_instance_;
    new (ptr) ::protobuf_unittest::TestHugeFieldNumbers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestHugeFieldNumbers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TestHugeFieldNumbers_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TestHugeFieldNumbers_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestHugeFieldNumbers_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestHugeFieldNumbers_OptionalGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestHugeFieldNumbers_OptionalGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestHugeFieldNumbers_OptionalGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestHugeFieldNumbers_OptionalGroup_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse();
  }
  ::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestIsInitialized_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestIsInitialized_default_instance_;
    new (ptr) ::protobuf_unittest::TestIsInitialized();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestIsInitialized::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestIsInitialized_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestIsInitialized_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestIsInitialized_SubMessage_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestIsInitialized_SubMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestIsInitialized_SubMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestIsInitialized_SubMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestIsInitialized_SubMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestIsInitialized_SubMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestIsInitialized_SubMessage_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestIsInitialized_SubMessage_SubGroup_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestIsInitialized_SubMessage_SubGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestIsInitialized_SubMessage_SubGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestIsInitialized_SubMessage_SubGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestIsInitialized_SubMessage_SubGroup_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestJsonName_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestJsonName_default_instance_;
    new (ptr) ::protobuf_unittest::TestJsonName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestJsonName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestJsonName_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestJsonName_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestLazyMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestLazyMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestLazyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestLazyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestLazyMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestLazyMessage_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMultipleExtensionRanges_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMultipleExtensionRanges_default_instance_;
    new (ptr) ::protobuf_unittest::TestMultipleExtensionRanges();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestMultipleExtensionRanges::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMultipleExtensionRanges_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMultipleExtensionRanges_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMutualRecursionA_SubMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestMutualRecursionA_SubMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::protobuf_unittest::_TestMutualRecursionA_SubGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestMutualRecursionA_SubGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::protobuf_unittest::_TestMutualRecursionA_default_instance_;
    new (ptr) ::protobuf_unittest::TestMutualRecursionA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::protobuf_unittest::_TestMutualRecursionB_default_instance_;
    new (ptr) ::protobuf_unittest::TestMutualRecursionB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestMutualRecursionA_SubMessage::InitAsDefaultInstance();
  ::protobuf_unittest::TestMutualRecursionA_SubGroup::InitAsDefaultInstance();
  ::protobuf_unittest::TestMutualRecursionA::InitAsDefaultInstance();
  ::protobuf_unittest::TestMutualRecursionB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestNestedExtension_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestNestedExtension_default_instance_;
    new (ptr) ::protobuf_unittest::TestNestedExtension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestNestedExtension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestNestedExtension_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestNestedExtension_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestNestedExtension_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestNestedExtension_OptionalGroup_extension_default_instance_;
    new (ptr) ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestNestedExtension_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestNestedExtension_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestNestedMessageHasBits_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestNestedMessageHasBits_default_instance_;
    new (ptr) ::protobuf_unittest::TestNestedMessageHasBits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestNestedMessageHasBits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestNestedMessageHasBits_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestNestedMessageHasBits_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestNestedMessageHasBits_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestNestedMessageHasBits_NestedMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestNestedMessageHasBits_NestedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestNestedMessageHasBits_NestedMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestNestedMessageHasBits_NestedMessage_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestOneof_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestOneof_default_instance_;
    new (ptr) ::protobuf_unittest::TestOneof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestOneof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestOneof_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestOneof_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestOneof_FooGroup_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestOneof_FooGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestOneof_FooGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestOneof_FooGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestOneof_FooGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestOneof_FooGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestOneof_FooGroup_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestOneof2_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_.DefaultConstruct();
  *::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_.get_mutable() = std::string("STRING", 6);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_.get_mutable());
  ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_cord_.DefaultConstruct();
  *::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_cord_.get_mutable() = std::string("CORD", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_cord_.get_mutable());
  ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_piece_.DefaultConstruct();
  *::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_piece_.get_mutable() = std::string("SPIECE", 6);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_piece_.get_mutable());
  ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_bytes_.DefaultConstruct();
  *::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_bytes_.get_mutable() = std::string("BYTES", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_bytes_.get_mutable());
  ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_.DefaultConstruct();
  *::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_.get_mutable() = std::string("BAZ", 3);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_.get_mutable());
  {
    void* ptr = &::protobuf_unittest::_TestOneof2_default_instance_;
    new (ptr) ::protobuf_unittest::TestOneof2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestOneof2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestOneof2_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestOneof2_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestOneof2_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestOneof2_FooGroup_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestOneof2_FooGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestOneof2_FooGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestOneof2_FooGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestOneof2_FooGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestOneof2_FooGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestOneof2_FooGroup_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestOneof2_NestedMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestOneof2_NestedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestOneof2_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestOneof2_NestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestOneof2_NestedMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestOneof2_NestedMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestOneofBackwardsCompatible_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestOneofBackwardsCompatible_default_instance_;
    new (ptr) ::protobuf_unittest::TestOneofBackwardsCompatible();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestOneofBackwardsCompatible::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestOneofBackwardsCompatible_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestOneofBackwardsCompatible_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestOneofBackwardsCompatible_FooGroup_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestOneofBackwardsCompatible_FooGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestOneofBackwardsCompatible_FooGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestOneofBackwardsCompatible_FooGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestOneofBackwardsCompatible_FooGroup_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestPackedExtensions_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestPackedExtensions_default_instance_;
    new (ptr) ::protobuf_unittest::TestPackedExtensions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestPackedExtensions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPackedExtensions_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPackedExtensions_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestPackedTypes_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestPackedTypes_default_instance_;
    new (ptr) ::protobuf_unittest::TestPackedTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestPackedTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPackedTypes_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPackedTypes_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestParsingMerge_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestParsingMerge_default_instance_;
    new (ptr) ::protobuf_unittest::TestParsingMerge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestParsingMerge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TestParsingMerge_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TestParsingMerge_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestParsingMerge_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestParsingMerge_RepeatedGroup_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestParsingMerge_OptionalGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestParsingMerge_OptionalGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestParsingMerge_OptionalGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestParsingMerge_OptionalGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestParsingMerge_OptionalGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestParsingMerge_OptionalGroup_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestParsingMerge_RepeatedFieldsGenerator_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_default_instance_;
    new (ptr) ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TestParsingMerge_RepeatedFieldsGenerator_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TestParsingMerge_RepeatedFieldsGenerator_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group1_google_2fprotobuf_2funittest_2eproto.base,
      &scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group2_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestParsingMerge_RepeatedFieldsGenerator_Group1_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_Group1_default_instance_;
    new (ptr) ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group1_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestParsingMerge_RepeatedFieldsGenerator_Group1_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestParsingMerge_RepeatedFieldsGenerator_Group2_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_Group2_default_instance_;
    new (ptr) ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group2_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestParsingMerge_RepeatedFieldsGenerator_Group2_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestParsingMerge_RepeatedGroup_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestParsingMerge_RepeatedGroup_default_instance_;
    new (ptr) ::protobuf_unittest::TestParsingMerge_RepeatedGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestParsingMerge_RepeatedGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestParsingMerge_RepeatedGroup_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestParsingMerge_RepeatedGroup_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestPickleNestedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestPickleNestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestPickleNestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestPickleNestedMessage_NestedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestPickleNestedMessage_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestPickleNestedMessage_NestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestReallyLargeTagNumber_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestReallyLargeTagNumber_default_instance_;
    new (ptr) ::protobuf_unittest::TestReallyLargeTagNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestReallyLargeTagNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestReallyLargeTagNumber_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestReallyLargeTagNumber_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestRecursiveMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestRecursiveMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestRecursiveMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestRecursiveMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRecursiveMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestRecursiveMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestRepeatedScalarDifferentTagSizes_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestRepeatedScalarDifferentTagSizes_default_instance_;
    new (ptr) ::protobuf_unittest::TestRepeatedScalarDifferentTagSizes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestRepeatedScalarDifferentTagSizes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRepeatedScalarDifferentTagSizes_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestRepeatedScalarDifferentTagSizes_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestRequired_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestRequired_default_instance_;
    new (ptr) ::protobuf_unittest::TestRequired();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestRequired::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRequired_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestRequired_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestRequiredForeign_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestRequiredForeign_default_instance_;
    new (ptr) ::protobuf_unittest::TestRequiredForeign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestRequiredForeign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestRequiredForeign_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestRequiredForeign_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestRequired_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestRequiredMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestRequiredMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestRequiredMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestRequiredMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestRequiredMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestRequiredMessage_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestRequired_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestRequiredOneof_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestRequiredOneof_default_instance_;
    new (ptr) ::protobuf_unittest::TestRequiredOneof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestRequiredOneof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestRequiredOneof_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestRequiredOneof_google_2fprotobuf_2funittest_2eproto}, {
      &scc_info_TestRequiredOneof_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestRequiredOneof_NestedMessage_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestRequiredOneof_NestedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestRequiredOneof_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestRequiredOneof_NestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRequiredOneof_NestedMessage_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestRequiredOneof_NestedMessage_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestReservedFields_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestReservedFields_default_instance_;
    new (ptr) ::protobuf_unittest::TestReservedFields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestReservedFields::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestReservedFields_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestReservedFields_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestUnpackedExtensions_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestUnpackedExtensions_default_instance_;
    new (ptr) ::protobuf_unittest::TestUnpackedExtensions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestUnpackedExtensions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestUnpackedExtensions_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestUnpackedExtensions_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestUnpackedTypes_default_instance_;
    new (ptr) ::protobuf_unittest::TestUnpackedTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestUnpackedTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_Uint32Message_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_Uint32Message_default_instance_;
    new (ptr) ::protobuf_unittest::Uint32Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::Uint32Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uint32Message_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Uint32Message_google_2fprotobuf_2funittest_2eproto}, {}};

static void InitDefaultsscc_info_Uint64Message_google_2fprotobuf_2funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_Uint64Message_default_instance_;
    new (ptr) ::protobuf_unittest::Uint64Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::Uint64Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uint64Message_google_2fprotobuf_2funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Uint64Message_google_2fprotobuf_2funittest_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2funittest_2eproto[94];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_google_2fprotobuf_2funittest_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2funittest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_NestedMessage, bb_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_OptionalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_OptionalGroup, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_RepeatedGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_RepeatedGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_RepeatedGroup, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_import_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_import_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_public_import_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_lazy_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeatedgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_import_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_import_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_lazy_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_import_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_cord_),
  offsetof(::protobuf_unittest::TestAllTypesDefaultTypeInternal, oneof_uint32_),
  offsetof(::protobuf_unittest::TestAllTypesDefaultTypeInternal, oneof_nested_message_),
  offsetof(::protobuf_unittest::TestAllTypesDefaultTypeInternal, oneof_string_),
  offsetof(::protobuf_unittest::TestAllTypesDefaultTypeInternal, oneof_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, oneof_field_),
  15,
  14,
  16,
  17,
  19,
  18,
  20,
  21,
  23,
  22,
  24,
  25,
  26,
  0,
  1,
  8,
  9,
  10,
  11,
  28,
  29,
  30,
  2,
  3,
  12,
  13,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  31,
  32,
  34,
  33,
  35,
  36,
  38,
  37,
  39,
  40,
  42,
  41,
  43,
  4,
  5,
  44,
  45,
  27,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, child_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, payload_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, repeated_child_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, deprecated_int32_),
  offsetof(::protobuf_unittest::TestDeprecatedFieldsDefaultTypeInternal, deprecated_int32_in_oneof_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, oneof_fields_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ForeignMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ForeignMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ForeignMessage, c_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ForeignMessage, d_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReservedFields, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReservedFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllExtensions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllExtensions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllExtensions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OptionalGroup_extension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OptionalGroup_extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OptionalGroup_extension, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RepeatedGroup_extension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RepeatedGroup_extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RepeatedGroup_extension, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup_OptionalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup_OptionalGroup, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup, optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup, optional_foreign_enum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroupExtension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroupExtension, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroupExtension, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedExtension_OptionalGroup_extension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedExtension_OptionalGroup_extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedExtension_OptionalGroup_extension, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedExtension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, b_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy4_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy5_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy6_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy7_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy8_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy9_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy10_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy11_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy12_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy13_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy14_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy15_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy16_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy17_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy18_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy19_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy20_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy21_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy22_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy23_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy24_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy25_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy26_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy27_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy28_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy29_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy30_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy31_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, c_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, optional_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, repeated_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, dummy_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, optional_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, repeated_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, required_message_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestForeignNested, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestForeignNested, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestForeignNested, foreign_nested_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmptyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmptyMessageWithExtensions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmptyMessageWithExtensions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmptyMessageWithExtensions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage, cc_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage, bb_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMultipleExtensionRanges, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMultipleExtensionRanges, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMultipleExtensionRanges, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReallyLargeTagNumber, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReallyLargeTagNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReallyLargeTagNumber, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReallyLargeTagNumber, bb_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRecursiveMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRecursiveMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRecursiveMessage, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRecursiveMessage, i_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubMessage, b_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubGroup, sub_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubGroup, not_in_this_scc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA, bb_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA, subgroup_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionB, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionB, optional_int32_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup, i_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage, subgroup_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized, sub_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Foo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Foo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Foo, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Bar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Bar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Bar, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, foo_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, bar_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMessage, sub_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestLazyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestLazyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestLazyMessage, sub_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage, nestedmessage_repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage, nestedmessage_repeated_foreignmessage_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits, optional_nested_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, primitivefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, stringfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, enumfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, messagefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, stringpiecefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, cordfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedprimitivefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedstringfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedenumfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedmessagefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedstringpiecefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedcordfield_),
  4,
  0,
  5,
  3,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings_NestedMessage, oo_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings_NestedMessage, bb_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, my_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, my_int_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, my_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, optional_nested_message_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings1, my_string_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3, my_string_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2, my_string_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, escaped_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, large_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, large_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, small_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, small_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, really_small_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, really_small_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, utf8_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, zero_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, one_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, small_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, negative_one_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, negative_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, large_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, small_negative_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, inf_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, neg_inf_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, nan_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, inf_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, neg_inf_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, nan_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, cpp_trigraph_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, string_with_zero_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, bytes_with_zero_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, string_piece_with_zero_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, cord_with_zero_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, replacement_string_),
  0,
  10,
  9,
  11,
  12,
  25,
  26,
  1,
  8,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::SparseEnumMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::SparseEnumMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::SparseEnumMessage, sparse_enum_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneString, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreString, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneBytes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneBytes, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreBytes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreBytes, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int32Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int32Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int32Message, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint32Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint32Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint32Message, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int64Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int64Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int64Message, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint64Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint64Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint64Message, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BoolMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BoolMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BoolMessage, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof_FooGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof_FooGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof_FooGroup, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof_FooGroup, b_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protobuf_unittest::TestOneofDefaultTypeInternal, foo_int_),
  offsetof(::protobuf_unittest::TestOneofDefaultTypeInternal, foo_string_),
  offsetof(::protobuf_unittest::TestOneofDefaultTypeInternal, foo_message_),
  offsetof(::protobuf_unittest::TestOneofDefaultTypeInternal, foogroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof, foo_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup, b_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, foo_int_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, foo_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, foo_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, foogroup_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_FooGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_FooGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_FooGroup, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_FooGroup, b_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_NestedMessage, qux_int_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_NestedMessage, corge_int_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, foo_int_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, foo_string_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, foo_cord_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, foo_string_piece_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, foo_bytes_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, foo_enum_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, foo_message_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, foogroup_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, foo_lazy_message_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, bar_int_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, bar_string_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, bar_cord_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, bar_string_piece_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, bar_bytes_),
  offsetof(::protobuf_unittest::TestOneof2DefaultTypeInternal, bar_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, baz_int_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, baz_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, foo_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, bar_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof_NestedMessage, required_double_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protobuf_unittest::TestRequiredOneofDefaultTypeInternal, foo_int_),
  offsetof(::protobuf_unittest::TestRequiredOneofDefaultTypeInternal, foo_string_),
  offsetof(::protobuf_unittest::TestRequiredOneofDefaultTypeInternal, foo_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof, foo_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_enum_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_enum_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedExtensions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedExtensions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedExtensions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedExtensions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedExtensions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedExtensions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType, dynamic_field_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, scalar_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, enum_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, dynamic_enum_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, message_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, dynamic_message_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, repeated_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, packed_extension_),
  2,
  3,
  4,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_uint64_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1, field1_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2, field1_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, field1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, field2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, field3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, group1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, group2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, ext1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, ext2_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_OptionalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_OptionalGroup, optional_group_all_types_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedGroup, repeated_group_all_types_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, required_all_types_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, optional_all_types_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, repeated_all_types_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, repeatedgroup_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCommentInjectionMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCommentInjectionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCommentInjectionMessage, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooClientMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooServerMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BarRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BarResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, field_name1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, fieldname2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, fieldname3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, _field_name4_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, field_name5_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, field_name6_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup, group_a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, _extensions_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, fixed_32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, packed_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, string_string_map_),
  offsetof(::protobuf_unittest::TestHugeFieldNumbersDefaultTypeInternal, oneof_uint32_),
  offsetof(::protobuf_unittest::TestHugeFieldNumbersDefaultTypeInternal, oneof_test_all_types_),
  offsetof(::protobuf_unittest::TestHugeFieldNumbersDefaultTypeInternal, oneof_string_),
  offsetof(::protobuf_unittest::TestHugeFieldNumbersDefaultTypeInternal, oneof_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, oneof_field_),
  4,
  5,
  ~0u,
  ~0u,
  6,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field4_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field6_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field7_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field8_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field9_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field10_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::protobuf_unittest::TestAllTypes_NestedMessage)},
  { 7, 13, sizeof(::protobuf_unittest::TestAllTypes_OptionalGroup)},
  { 14, 20, sizeof(::protobuf_unittest::TestAllTypes_RepeatedGroup)},
  { 21, 102, sizeof(::protobuf_unittest::TestAllTypes)},
  { 177, 185, sizeof(::protobuf_unittest::NestedTestAllTypes)},
  { 188, 196, sizeof(::protobuf_unittest::TestDeprecatedFields)},
  { 198, 203, sizeof(::protobuf_unittest::TestDeprecatedMessage)},
  { 203, 210, sizeof(::protobuf_unittest::ForeignMessage)},
  { 212, 217, sizeof(::protobuf_unittest::TestReservedFields)},
  { 217, 222, sizeof(::protobuf_unittest::TestAllExtensions)},
  { 222, 228, sizeof(::protobuf_unittest::OptionalGroup_extension)},
  { 229, 235, sizeof(::protobuf_unittest::RepeatedGroup_extension)},
  { 236, 242, sizeof(::protobuf_unittest::TestGroup_OptionalGroup)},
  { 243, 250, sizeof(::protobuf_unittest::TestGroup)},
  { 252, 257, sizeof(::protobuf_unittest::TestGroupExtension)},
  { 257, 263, sizeof(::protobuf_unittest::TestNestedExtension_OptionalGroup_extension)},
  { 264, 269, sizeof(::protobuf_unittest::TestNestedExtension)},
  { 269, 307, sizeof(::protobuf_unittest::TestRequired)},
  { 340, 348, sizeof(::protobuf_unittest::TestRequiredForeign)},
  { 351, 359, sizeof(::protobuf_unittest::TestRequiredMessage)},
  { 362, 368, sizeof(::protobuf_unittest::TestForeignNested)},
  { 369, 374, sizeof(::protobuf_unittest::TestEmptyMessage)},
  { 374, 379, sizeof(::protobuf_unittest::TestEmptyMessageWithExtensions)},
  { 379, 385, sizeof(::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage)},
  { 386, 392, sizeof(::protobuf_unittest::TestPickleNestedMessage_NestedMessage)},
  { 393, 398, sizeof(::protobuf_unittest::TestPickleNestedMessage)},
  { 398, 403, sizeof(::protobuf_unittest::TestMultipleExtensionRanges)},
  { 403, 410, sizeof(::protobuf_unittest::TestReallyLargeTagNumber)},
  { 412, 419, sizeof(::protobuf_unittest::TestRecursiveMessage)},
  { 421, 427, sizeof(::protobuf_unittest::TestMutualRecursionA_SubMessage)},
  { 428, 435, sizeof(::protobuf_unittest::TestMutualRecursionA_SubGroup)},
  { 437, 444, sizeof(::protobuf_unittest::TestMutualRecursionA)},
  { 446, 453, sizeof(::protobuf_unittest::TestMutualRecursionB)},
  { 455, 461, sizeof(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup)},
  { 462, 468, sizeof(::protobuf_unittest::TestIsInitialized_SubMessage)},
  { 469, 475, sizeof(::protobuf_unittest::TestIsInitialized)},
  { 476, 482, sizeof(::protobuf_unittest::TestDupFieldNumber_Foo)},
  { 483, 489, sizeof(::protobuf_unittest::TestDupFieldNumber_Bar)},
  { 490, 498, sizeof(::protobuf_unittest::TestDupFieldNumber)},
  { 501, 507, sizeof(::protobuf_unittest::TestEagerMessage)},
  { 508, 514, sizeof(::protobuf_unittest::TestLazyMessage)},
  { 515, 522, sizeof(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage)},
  { 524, 530, sizeof(::protobuf_unittest::TestNestedMessageHasBits)},
  { 531, 548, sizeof(::protobuf_unittest::TestCamelCaseFieldNames)},
  { 560, 567, sizeof(::protobuf_unittest::TestFieldOrderings_NestedMessage)},
  { 569, 578, sizeof(::protobuf_unittest::TestFieldOrderings)},
  { 582, 588, sizeof(::protobuf_unittest::TestExtensionOrderings1)},
  { 589, 595, sizeof(::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3)},
  { 596, 602, sizeof(::protobuf_unittest::TestExtensionOrderings2)},
  { 603, 635, sizeof(::protobuf_unittest::TestExtremeDefaultValues)},
  { 662, 668, sizeof(::protobuf_unittest::SparseEnumMessage)},
  { 669, 675, sizeof(::protobuf_unittest::OneString)},
  { 676, 682, sizeof(::protobuf_unittest::MoreString)},
  { 683, 689, sizeof(::protobuf_unittest::OneBytes)},
  { 690, 696, sizeof(::protobuf_unittest::MoreBytes)},
  { 697, 703, sizeof(::protobuf_unittest::Int32Message)},
  { 704, 710, sizeof(::protobuf_unittest::Uint32Message)},
  { 711, 717, sizeof(::protobuf_unittest::Int64Message)},
  { 718, 724, sizeof(::protobuf_unittest::Uint64Message)},
  { 725, 731, sizeof(::protobuf_unittest::BoolMessage)},
  { 732, 739, sizeof(::protobuf_unittest::TestOneof_FooGroup)},
  { 741, 751, sizeof(::protobuf_unittest::TestOneof)},
  { 755, 762, sizeof(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup)},
  { 764, 773, sizeof(::protobuf_unittest::TestOneofBackwardsCompatible)},
  { 777, 784, sizeof(::protobuf_unittest::TestOneof2_FooGroup)},
  { 786, 793, sizeof(::protobuf_unittest::TestOneof2_NestedMessage)},
  { 795, 819, sizeof(::protobuf_unittest::TestOneof2)},
  { 836, 842, sizeof(::protobuf_unittest::TestRequiredOneof_NestedMessage)},
  { 843, 852, sizeof(::protobuf_unittest::TestRequiredOneof)},
  { 855, 874, sizeof(::protobuf_unittest::TestPackedTypes)},
  { 888, 907, sizeof(::protobuf_unittest::TestUnpackedTypes)},
  { 921, 926, sizeof(::protobuf_unittest::TestPackedExtensions)},
  { 926, 931, sizeof(::protobuf_unittest::TestUnpackedExtensions)},
  { 931, 937, sizeof(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType)},
  { 938, 950, sizeof(::protobuf_unittest::TestDynamicExtensions)},
  { 957, 968, sizeof(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes)},
  { 974, 980, sizeof(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1)},
  { 981, 987, sizeof(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2)},
  { 988, 1000, sizeof(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator)},
  { 1007, 1013, sizeof(::protobuf_unittest::TestParsingMerge_OptionalGroup)},
  { 1014, 1020, sizeof(::protobuf_unittest::TestParsingMerge_RepeatedGroup)},
  { 1021, 1031, sizeof(::protobuf_unittest::TestParsingMerge)},
  { 1036, 1042, sizeof(::protobuf_unittest::TestCommentInjectionMessage)},
  { 1043, 1048, sizeof(::protobuf_unittest::FooRequest)},
  { 1048, 1053, sizeof(::protobuf_unittest::FooResponse)},
  { 1053, 1058, sizeof(::protobuf_unittest::FooClientMessage)},
  { 1058, 1063, sizeof(::protobuf_unittest::FooServerMessage)},
  { 1063, 1068, sizeof(::protobuf_unittest::BarRequest)},
  { 1068, 1073, sizeof(::protobuf_unittest::BarResponse)},
  { 1073, 1084, sizeof(::protobuf_unittest::TestJsonName)},
  { 1090, 1096, sizeof(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup)},
  { 1097, 1104, sizeof(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse)},
  { 1106, 1126, sizeof(::protobuf_unittest::TestHugeFieldNumbers)},
  { 1140, 1154, sizeof(::protobuf_unittest::TestExtensionInsideTable)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestAllTypes_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestAllTypes_OptionalGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestAllTypes_RepeatedGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestAllTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_NestedTestAllTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestDeprecatedFields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestDeprecatedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_ForeignMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestReservedFields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestAllExtensions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_OptionalGroup_extension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_RepeatedGroup_extension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestGroup_OptionalGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestGroupExtension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestNestedExtension_OptionalGroup_extension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestNestedExtension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestRequired_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestRequiredForeign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestRequiredMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestForeignNested_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEmptyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEmptyMessageWithExtensions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestPickleNestedMessage_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestPickleNestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMultipleExtensionRanges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestReallyLargeTagNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestRecursiveMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMutualRecursionA_SubMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMutualRecursionA_SubGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMutualRecursionA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMutualRecursionB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestIsInitialized_SubMessage_SubGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestIsInitialized_SubMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestIsInitialized_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestDupFieldNumber_Foo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestDupFieldNumber_Bar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestDupFieldNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEagerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestLazyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestNestedMessageHasBits_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestNestedMessageHasBits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestCamelCaseFieldNames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestFieldOrderings_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestFieldOrderings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestExtensionOrderings1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestExtensionOrderings2_TestExtensionOrderings3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestExtensionOrderings2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestExtremeDefaultValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_SparseEnumMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_OneString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_MoreString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_OneBytes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_MoreBytes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_Int32Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_Uint32Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_Int64Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_Uint64Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_BoolMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestOneof_FooGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestOneof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestOneofBackwardsCompatible_FooGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestOneofBackwardsCompatible_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestOneof2_FooGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestOneof2_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestOneof2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestRequiredOneof_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestRequiredOneof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestPackedTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestUnpackedTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestPackedExtensions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestUnpackedExtensions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestDynamicExtensions_DynamicMessageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestDynamicExtensions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestRepeatedScalarDifferentTagSizes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_Group1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_Group2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestParsingMerge_OptionalGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestParsingMerge_RepeatedGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestParsingMerge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestCommentInjectionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_FooRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_FooResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_FooClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_FooServerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_BarRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_BarResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestJsonName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestHugeFieldNumbers_OptionalGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestHugeFieldNumbers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestExtensionInsideTable_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2funittest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036google/protobuf/unittest.proto\022\021protob"
  "uf_unittest\032%google/protobuf/unittest_im"
  "port.proto\"\355\030\n\014TestAllTypes\022\026\n\016optional_"
  "int32\030\001 \001(\005\022\026\n\016optional_int64\030\002 \001(\003\022\027\n\017o"
  "ptional_uint32\030\003 \001(\r\022\027\n\017optional_uint64\030"
  "\004 \001(\004\022\027\n\017optional_sint32\030\005 \001(\021\022\027\n\017option"
  "al_sint64\030\006 \001(\022\022\030\n\020optional_fixed32\030\007 \001("
  "\007\022\030\n\020optional_fixed64\030\010 \001(\006\022\031\n\021optional_"
  "sfixed32\030\t \001(\017\022\031\n\021optional_sfixed64\030\n \001("
  "\020\022\026\n\016optional_float\030\013 \001(\002\022\027\n\017optional_do"
  "uble\030\014 \001(\001\022\025\n\roptional_bool\030\r \001(\010\022\027\n\017opt"
  "ional_string\030\016 \001(\t\022\026\n\016optional_bytes\030\017 \001"
  "(\014\022D\n\roptionalgroup\030\020 \001(\n2-.protobuf_uni"
  "ttest.TestAllTypes.OptionalGroup\022N\n\027opti"
  "onal_nested_message\030\022 \001(\0132-.protobuf_uni"
  "ttest.TestAllTypes.NestedMessage\022C\n\030opti"
  "onal_foreign_message\030\023 \001(\0132!.protobuf_un"
  "ittest.ForeignMessage\022H\n\027optional_import"
  "_message\030\024 \001(\0132\'.protobuf_unittest_impor"
  "t.ImportMessage\022H\n\024optional_nested_enum\030"
  "\025 \001(\0162*.protobuf_unittest.TestAllTypes.N"
  "estedEnum\022=\n\025optional_foreign_enum\030\026 \001(\016"
  "2\036.protobuf_unittest.ForeignEnum\022B\n\024opti"
  "onal_import_enum\030\027 \001(\0162$.protobuf_unitte"
  "st_import.ImportEnum\022!\n\025optional_string_"
  "piece\030\030 \001(\tB\002\010\002\022\031\n\roptional_cord\030\031 \001(\tB\002"
  "\010\001\022U\n\036optional_public_import_message\030\032 \001"
  "(\0132-.protobuf_unittest_import.PublicImpo"
  "rtMessage\022P\n\025optional_lazy_message\030\033 \001(\013"
  "2-.protobuf_unittest.TestAllTypes.Nested"
  "MessageB\002(\001\022\026\n\016repeated_int32\030\037 \003(\005\022\026\n\016r"
  "epeated_int64\030  \003(\003\022\027\n\017repeated_uint32\030!"
  " \003(\r\022\027\n\017repeated_uint64\030\" \003(\004\022\027\n\017repeate"
  "d_sint32\030# \003(\021\022\027\n\017repeated_sint64\030$ \003(\022\022"
  "\030\n\020repeated_fixed32\030% \003(\007\022\030\n\020repeated_fi"
  "xed64\030& \003(\006\022\031\n\021repeated_sfixed32\030\' \003(\017\022\031"
  "\n\021repeated_sfixed64\030( \003(\020\022\026\n\016repeated_fl"
  "oat\030) \003(\002\022\027\n\017repeated_double\030* \003(\001\022\025\n\rre"
  "peated_bool\030+ \003(\010\022\027\n\017repeated_string\030, \003"
  "(\t\022\026\n\016repeated_bytes\030- \003(\014\022D\n\rrepeatedgr"
  "oup\030. \003(\n2-.protobuf_unittest.TestAllTyp"
  "es.RepeatedGroup\022N\n\027repeated_nested_mess"
  "age\0300 \003(\0132-.protobuf_unittest.TestAllTyp"
  "es.NestedMessage\022C\n\030repeated_foreign_mes"
  "sage\0301 \003(\0132!.protobuf_unittest.ForeignMe"
  "ssage\022H\n\027repeated_import_message\0302 \003(\0132\'"
  ".protobuf_unittest_import.ImportMessage\022"
  "H\n\024repeated_nested_enum\0303 \003(\0162*.protobuf"
  "_unittest.TestAllTypes.NestedEnum\022=\n\025rep"
  "eated_foreign_enum\0304 \003(\0162\036.protobuf_unit"
  "test.ForeignEnum\022B\n\024repeated_import_enum"
  "\0305 \003(\0162$.protobuf_unittest_import.Import"
  "Enum\022!\n\025repeated_string_piece\0306 \003(\tB\002\010\002\022"
  "\031\n\rrepeated_cord\0307 \003(\tB\002\010\001\022P\n\025repeated_l"
  "azy_message\0309 \003(\0132-.protobuf_unittest.Te"
  "stAllTypes.NestedMessageB\002(\001\022\031\n\rdefault_"
  "int32\030= \001(\005:\00241\022\031\n\rdefault_int64\030> \001(\003:\002"
  "42\022\032\n\016default_uint32\030\? \001(\r:\00243\022\032\n\016defaul"
  "t_uint64\030@ \001(\004:\00244\022\033\n\016default_sint32\030A \001"
  "(\021:\003-45\022\032\n\016default_sint64\030B \001(\022:\00246\022\033\n\017d"
  "efault_fixed32\030C \001(\007:\00247\022\033\n\017default_fixe"
  "d64\030D \001(\006:\00248\022\034\n\020default_sfixed32\030E \001(\017:"
  "\00249\022\035\n\020default_sfixed64\030F \001(\020:\003-50\022\033\n\rde"
  "fault_float\030G \001(\002:\00451.5\022\035\n\016default_doubl"
  "e\030H \001(\001:\00552000\022\032\n\014default_bool\030I \001(\010:\004tr"
  "ue\022\035\n\016default_string\030J \001(\t:\005hello\022\034\n\rdef"
  "ault_bytes\030K \001(\014:\005world\022L\n\023default_neste"
  "d_enum\030Q \001(\0162*.protobuf_unittest.TestAll"
  "Types.NestedEnum:\003BAR\022I\n\024default_foreign"
  "_enum\030R \001(\0162\036.protobuf_unittest.ForeignE"
  "num:\013FOREIGN_BAR\022M\n\023default_import_enum\030"
  "S \001(\0162$.protobuf_unittest_import.ImportE"
  "num:\nIMPORT_BAR\022%\n\024default_string_piece\030"
  "T \001(\t:\003abcB\002\010\002\022\035\n\014default_cord\030U \001(\t:\00312"
  "3B\002\010\001\022\026\n\014oneof_uint32\030o \001(\rH\000\022M\n\024oneof_n"
  "ested_message\030p \001(\0132-.protobuf_unittest."
  "TestAllTypes.NestedMessageH\000\022\026\n\014oneof_st"
  "ring\030q \001(\tH\000\022\025\n\013oneof_bytes\030r \001(\014H\000\032\033\n\rN"
  "estedMessage\022\n\n\002bb\030\001 \001(\005\032\032\n\rOptionalGrou"
  "p\022\t\n\001a\030\021 \001(\005\032\032\n\rRepeatedGroup\022\t\n\001a\030/ \001(\005"
  "\"9\n\nNestedEnum\022\007\n\003FOO\020\001\022\007\n\003BAR\020\002\022\007\n\003BAZ\020"
  "\003\022\020\n\003NEG\020\377\377\377\377\377\377\377\377\377\001B\r\n\013oneof_field\"\273\001\n\022N"
  "estedTestAllTypes\0224\n\005child\030\001 \001(\0132%.proto"
  "buf_unittest.NestedTestAllTypes\0220\n\007paylo"
  "ad\030\002 \001(\0132\037.protobuf_unittest.TestAllType"
  "s\022=\n\016repeated_child\030\003 \003(\0132%.protobuf_uni"
  "ttest.NestedTestAllTypes\"m\n\024TestDeprecat"
  "edFields\022\034\n\020deprecated_int32\030\001 \001(\005B\002\030\001\022\'"
  "\n\031deprecated_int32_in_oneof\030\002 \001(\005B\002\030\001H\000B"
  "\016\n\014oneof_fields\"\033\n\025TestDeprecatedMessage"
  ":\002\030\001\"&\n\016ForeignMessage\022\t\n\001c\030\001 \001(\005\022\t\n\001d\030\002"
  " \001(\005\"0\n\022TestReservedFieldsJ\004\010\002\020\003J\004\010\017\020\020J\004"
  "\010\t\020\014R\003barR\003baz\"\035\n\021TestAllExtensions*\010\010\001\020"
  "\200\200\200\200\002\"$\n\027OptionalGroup_extension\022\t\n\001a\030\021 "
  "\001(\005\"$\n\027RepeatedGroup_extension\022\t\n\001a\030/ \001("
  "\005\"\251\001\n\tTestGroup\022A\n\roptionalgroup\030\020 \001(\n2*"
  ".protobuf_unittest.TestGroup.OptionalGro"
  "up\022=\n\025optional_foreign_enum\030\026 \001(\0162\036.prot"
  "obuf_unittest.ForeignEnum\032\032\n\rOptionalGro"
  "up\022\t\n\001a\030\021 \001(\005\"\036\n\022TestGroupExtension*\010\010\001\020"
  "\200\200\200\200\002\"\267\003\n\023TestNestedExtension\032$\n\027Optiona"
  "lGroup_extension\022\t\n\001a\030\021 \001(\00529\n\004test\022$.pr"
  "otobuf_unittest.TestAllExtensions\030\352\007 \001(\t"
  ":\004test2F\n\027nested_string_extension\022$.prot"
  "obuf_unittest.TestAllExtensions\030\353\007 \001(\t2\206"
  "\001\n\027optionalgroup_extension\022%.protobuf_un"
  "ittest.TestGroupExtension\030\020 \001(\n2>.protob"
  "uf_unittest.TestNestedExtension.Optional"
  "Group_extension2n\n\037optional_foreign_enum"
  "_extension\022%.protobuf_unittest.TestGroup"
  "Extension\030\026 \001(\0162\036.protobuf_unittest.Fore"
  "ignEnum\"\325\005\n\014TestRequired\022\t\n\001a\030\001 \002(\005\022\016\n\006d"
  "ummy2\030\002 \001(\005\022\t\n\001b\030\003 \002(\005\022\016\n\006dummy4\030\004 \001(\005\022\016"
  "\n\006dummy5\030\005 \001(\005\022\016\n\006dummy6\030\006 \001(\005\022\016\n\006dummy7"
  "\030\007 \001(\005\022\016\n\006dummy8\030\010 \001(\005\022\016\n\006dummy9\030\t \001(\005\022\017"
  "\n\007dummy10\030\n \001(\005\022\017\n\007dummy11\030\013 \001(\005\022\017\n\007dumm"
  "y12\030\014 \001(\005\022\017\n\007dummy13\030\r \001(\005\022\017\n\007dummy14\030\016 "
  "\001(\005\022\017\n\007dummy15\030\017 \001(\005\022\017\n\007dummy16\030\020 \001(\005\022\017\n"
  "\007dummy17\030\021 \001(\005\022\017\n\007dummy18\030\022 \001(\005\022\017\n\007dummy"
  "19\030\023 \001(\005\022\017\n\007dummy20\030\024 \001(\005\022\017\n\007dummy21\030\025 \001"
  "(\005\022\017\n\007dummy22\030\026 \001(\005\022\017\n\007dummy23\030\027 \001(\005\022\017\n\007"
  "dummy24\030\030 \001(\005\022\017\n\007dummy25\030\031 \001(\005\022\017\n\007dummy2"
  "6\030\032 \001(\005\022\017\n\007dummy27\030\033 \001(\005\022\017\n\007dummy28\030\034 \001("
  "\005\022\017\n\007dummy29\030\035 \001(\005\022\017\n\007dummy30\030\036 \001(\005\022\017\n\007d"
  "ummy31\030\037 \001(\005\022\017\n\007dummy32\030  \001(\005\022\t\n\001c\030! \002(\005"
  "2V\n\006single\022$.protobuf_unittest.TestAllEx"
  "tensions\030\350\007 \001(\0132\037.protobuf_unittest.Test"
  "Required2U\n\005multi\022$.protobuf_unittest.Te"
  "stAllExtensions\030\351\007 \003(\0132\037.protobuf_unitte"
  "st.TestRequired\"\232\001\n\023TestRequiredForeign\022"
  "9\n\020optional_message\030\001 \001(\0132\037.protobuf_uni"
  "ttest.TestRequired\0229\n\020repeated_message\030\002"
  " \003(\0132\037.protobuf_unittest.TestRequired\022\r\n"
  "\005dummy\030\003 \001(\005\"\306\001\n\023TestRequiredMessage\0229\n\020"
  "optional_message\030\001 \001(\0132\037.protobuf_unitte"
  "st.TestRequired\0229\n\020repeated_message\030\002 \003("
  "\0132\037.protobuf_unittest.TestRequired\0229\n\020re"
  "quired_message\030\003 \002(\0132\037.protobuf_unittest"
  ".TestRequired\"Z\n\021TestForeignNested\022E\n\016fo"
  "reign_nested\030\001 \001(\0132-.protobuf_unittest.T"
  "estAllTypes.NestedMessage\"\022\n\020TestEmptyMe"
  "ssage\"*\n\036TestEmptyMessageWithExtensions*"
  "\010\010\001\020\200\200\200\200\002\"Y\n\027TestPickleNestedMessage\032>\n\r"
  "NestedMessage\022\n\n\002bb\030\001 \001(\005\032!\n\023NestedNeste"
  "dMessage\022\n\n\002cc\030\001 \001(\005\"7\n\033TestMultipleExte"
  "nsionRanges*\004\010*\020+*\006\010\257 \020\224!*\n\010\200\200\004\020\200\200\200\200\002\"4\n"
  "\030TestReallyLargeTagNumber\022\t\n\001a\030\001 \001(\005\022\r\n\002"
  "bb\030\377\377\377\177 \001(\005\"U\n\024TestRecursiveMessage\0222\n\001a"
  "\030\001 \001(\0132\'.protobuf_unittest.TestRecursive"
  "Message\022\t\n\001i\030\002 \001(\005\"\341\002\n\024TestMutualRecursi"
  "onA\0223\n\002bb\030\001 \001(\0132\'.protobuf_unittest.Test"
  "MutualRecursionB\022B\n\010subgroup\030\002 \001(\n20.pro"
  "tobuf_unittest.TestMutualRecursionA.SubG"
  "roup\032@\n\nSubMessage\0222\n\001b\030\001 \001(\0132\'.protobuf"
  "_unittest.TestMutualRecursionB\032\215\001\n\010SubGr"
  "oup\022G\n\013sub_message\030\003 \001(\01322.protobuf_unit"
  "test.TestMutualRecursionA.SubMessage\0228\n\017"
  "not_in_this_scc\030\004 \001(\0132\037.protobuf_unittes"
  "t.TestAllTypes\"b\n\024TestMutualRecursionB\0222"
  "\n\001a\030\001 \001(\0132\'.protobuf_unittest.TestMutual"
  "RecursionA\022\026\n\016optional_int32\030\002 \001(\005\"\312\001\n\021T"
  "estIsInitialized\022D\n\013sub_message\030\001 \001(\0132/."
  "protobuf_unittest.TestIsInitialized.SubM"
  "essage\032o\n\nSubMessage\022J\n\010subgroup\030\001 \001(\n28"
  ".protobuf_unittest.TestIsInitialized.Sub"
  "Message.SubGroup\032\025\n\010SubGroup\022\t\n\001i\030\002 \002(\005\""
  "\263\001\n\022TestDupFieldNumber\022\t\n\001a\030\001 \001(\005\0226\n\003foo"
  "\030\002 \001(\n2).protobuf_unittest.TestDupFieldN"
  "umber.Foo\0226\n\003bar\030\003 \001(\n2).protobuf_unitte"
  "st.TestDupFieldNumber.Bar\032\020\n\003Foo\022\t\n\001a\030\001 "
  "\001(\005\032\020\n\003Bar\022\t\n\001a\030\001 \001(\005\"L\n\020TestEagerMessag"
  "e\0228\n\013sub_message\030\001 \001(\0132\037.protobuf_unitte"
  "st.TestAllTypesB\002(\000\"K\n\017TestLazyMessage\0228"
  "\n\013sub_message\030\001 \001(\0132\037.protobuf_unittest."
  "TestAllTypesB\002(\001\"\200\002\n\030TestNestedMessageHa"
  "sBits\022Z\n\027optional_nested_message\030\001 \001(\01329"
  ".protobuf_unittest.TestNestedMessageHasB"
  "its.NestedMessage\032\207\001\n\rNestedMessage\022$\n\034n"
  "estedmessage_repeated_int32\030\001 \003(\005\022P\n%nes"
  "tedmessage_repeated_foreignmessage\030\002 \003(\013"
  "2!.protobuf_unittest.ForeignMessage\"\345\003\n\027"
  "TestCamelCaseFieldNames\022\026\n\016PrimitiveFiel"
  "d\030\001 \001(\005\022\023\n\013StringField\030\002 \001(\t\0221\n\tEnumFiel"
  "d\030\003 \001(\0162\036.protobuf_unittest.ForeignEnum\022"
  "7\n\014MessageField\030\004 \001(\0132!.protobuf_unittes"
  "t.ForeignMessage\022\034\n\020StringPieceField\030\005 \001"
  "(\tB\002\010\002\022\025\n\tCordField\030\006 \001(\tB\002\010\001\022\036\n\026Repeate"
  "dPrimitiveField\030\007 \003(\005\022\033\n\023RepeatedStringF"
  "ield\030\010 \003(\t\0229\n\021RepeatedEnumField\030\t \003(\0162\036."
  "protobuf_unittest.ForeignEnum\022\?\n\024Repeate"
  "dMessageField\030\n \003(\0132!.protobuf_unittest."
  "ForeignMessage\022$\n\030RepeatedStringPieceFie"
  "ld\030\013 \003(\tB\002\010\002\022\035\n\021RepeatedCordField\030\014 \003(\tB"
  "\002\010\001\"\325\001\n\022TestFieldOrderings\022\021\n\tmy_string\030"
  "\013 \001(\t\022\016\n\006my_int\030\001 \001(\003\022\020\n\010my_float\030e \001(\002\022"
  "U\n\027optional_nested_message\030\310\001 \001(\01323.prot"
  "obuf_unittest.TestFieldOrderings.NestedM"
  "essage\032\'\n\rNestedMessage\022\n\n\002oo\030\002 \001(\003\022\n\n\002b"
  "b\030\001 \001(\005*\004\010\002\020\013*\004\010\014\020e\"\234\001\n\027TestExtensionOrd"
  "erings1\022\021\n\tmy_string\030\001 \001(\t2n\n\023test_ext_o"
  "rderings1\022%.protobuf_unittest.TestFieldO"
  "rderings\030\r \001(\0132*.protobuf_unittest.TestE"
  "xtensionOrderings1\"\324\002\n\027TestExtensionOrde"
  "rings2\022\021\n\tmy_string\030\001 \001(\t\032\265\001\n\027TestExtens"
  "ionOrderings3\022\021\n\tmy_string\030\001 \001(\t2\206\001\n\023tes"
  "t_ext_orderings3\022%.protobuf_unittest.Tes"
  "tFieldOrderings\030\016 \001(\0132B.protobuf_unittes"
  "t.TestExtensionOrderings2.TestExtensionO"
  "rderings32n\n\023test_ext_orderings2\022%.proto"
  "buf_unittest.TestFieldOrderings\030\014 \001(\0132*."
  "protobuf_unittest.TestExtensionOrderings"
  "2\"\266\007\n\030TestExtremeDefaultValues\022\?\n\rescape"
  "d_bytes\030\001 \001(\014:(\\000\\001\\007\\010\\014\\n\\r\\"
  "t\\013\\\\\\\'\\\"\\376\022 \n\014large_uint32\030\002 \001(\r:\n4"
  "294967295\022*\n\014large_uint64\030\003 \001(\004:\0241844674"
  "4073709551615\022 \n\013small_int32\030\004 \001(\005:\013-214"
  "7483647\022)\n\013small_int64\030\005 \001(\003:\024-922337203"
  "6854775807\022\'\n\022really_small_int32\030\025 \001(\005:\013"
  "-2147483648\0220\n\022really_small_int64\030\026 \001(\003:"
  "\024-9223372036854775808\022\030\n\013utf8_string\030\006 \001"
  "(\t:\003\341\210\264\022\025\n\nzero_float\030\007 \001(\002:\0010\022\024\n\tone_fl"
  "oat\030\010 \001(\002:\0011\022\030\n\013small_float\030\t \001(\002:\0031.5\022\036"
  "\n\022negative_one_float\030\n \001(\002:\002-1\022\034\n\016negati"
  "ve_float\030\013 \001(\002:\004-1.5\022\032\n\013large_float\030\014 \001("
  "\002:\0052e+08\022$\n\024small_negative_float\030\r \001(\002:\006"
  "-8e-28\022\027\n\ninf_double\030\016 \001(\001:\003inf\022\034\n\016neg_i"
  "nf_double\030\017 \001(\001:\004-inf\022\027\n\nnan_double\030\020 \001("
  "\001:\003nan\022\026\n\tinf_float\030\021 \001(\002:\003inf\022\033\n\rneg_in"
  "f_float\030\022 \001(\002:\004-inf\022\026\n\tnan_float\030\023 \001(\002:\003"
  "nan\022+\n\014cpp_trigraph\030\024 \001(\t:\025\? \? \?\? \?\? \?\?\?"
  " \?\?/ \?\?-\022 \n\020string_with_zero\030\027 \001(\t:\006hel\000"
  "lo\022\"\n\017bytes_with_zero\030\030 \001(\014:\twor\\000ld\022("
  "\n\026string_piece_with_zero\030\031 \001(\t:\004ab\000cB\002\010\002"
  "\022 \n\016cord_with_zero\030\032 \001(\t:\00412\0003B\002\010\001\022&\n\022re"
  "placement_string\030\033 \001(\t:\n${unknown}\"K\n\021Sp"
  "arseEnumMessage\0226\n\013sparse_enum\030\001 \001(\0162!.p"
  "rotobuf_unittest.TestSparseEnum\"\031\n\tOneSt"
  "ring\022\014\n\004data\030\001 \001(\t\"\032\n\nMoreString\022\014\n\004data"
  "\030\001 \003(\t\"\030\n\010OneBytes\022\014\n\004data\030\001 \001(\014\"\031\n\tMore"
  "Bytes\022\014\n\004data\030\001 \003(\014\"\034\n\014Int32Message\022\014\n\004d"
  "ata\030\001 \001(\005\"\035\n\rUint32Message\022\014\n\004data\030\001 \001(\r"
  "\"\034\n\014Int64Message\022\014\n\004data\030\001 \001(\003\"\035\n\rUint64"
  "Message\022\014\n\004data\030\001 \001(\004\"\033\n\013BoolMessage\022\014\n\004"
  "data\030\001 \001(\010\"\320\001\n\tTestOneof\022\021\n\007foo_int\030\001 \001("
  "\005H\000\022\024\n\nfoo_string\030\002 \001(\tH\000\0226\n\013foo_message"
  "\030\003 \001(\0132\037.protobuf_unittest.TestAllTypesH"
  "\000\0229\n\010foogroup\030\004 \001(\n2%.protobuf_unittest."
  "TestOneof.FooGroupH\000\032 \n\010FooGroup\022\t\n\001a\030\005 "
  "\001(\005\022\t\n\001b\030\006 \001(\tB\005\n\003foo\"\347\001\n\034TestOneofBackw"
  "ardsCompatible\022\017\n\007foo_int\030\001 \001(\005\022\022\n\nfoo_s"
  "tring\030\002 \001(\t\0224\n\013foo_message\030\003 \001(\0132\037.proto"
  "buf_unittest.TestAllTypes\022J\n\010foogroup\030\004 "
  "\001(\n28.protobuf_unittest.TestOneofBackwar"
  "dsCompatible.FooGroup\032 \n\010FooGroup\022\t\n\001a\030\005"
  " \001(\005\022\t\n\001b\030\006 \001(\t\"\236\006\n\nTestOneof2\022\021\n\007foo_in"
  "t\030\001 \001(\005H\000\022\024\n\nfoo_string\030\002 \001(\tH\000\022\026\n\010foo_c"
  "ord\030\003 \001(\tB\002\010\001H\000\022\036\n\020foo_string_piece\030\004 \001("
  "\tB\002\010\002H\000\022\023\n\tfoo_bytes\030\005 \001(\014H\000\022<\n\010foo_enum"
  "\030\006 \001(\0162(.protobuf_unittest.TestOneof2.Ne"
  "stedEnumH\000\022B\n\013foo_message\030\007 \001(\0132+.protob"
  "uf_unittest.TestOneof2.NestedMessageH\000\022:"
  "\n\010foogroup\030\010 \001(\n2&.protobuf_unittest.Tes"
  "tOneof2.FooGroupH\000\022K\n\020foo_lazy_message\030\013"
  " \001(\0132+.protobuf_unittest.TestOneof2.Nest"
  "edMessageB\002(\001H\000\022\024\n\007bar_int\030\014 \001(\005:\0015H\001\022\034\n"
  "\nbar_string\030\r \001(\t:\006STRINGH\001\022\034\n\010bar_cord\030"
  "\016 \001(\t:\004CORDB\002\010\001H\001\022&\n\020bar_string_piece\030\017 "
  "\001(\t:\006SPIECEB\002\010\002H\001\022\032\n\tbar_bytes\030\020 \001(\014:\005BY"
  "TESH\001\022A\n\010bar_enum\030\021 \001(\0162(.protobuf_unitt"
  "est.TestOneof2.NestedEnum:\003BARH\001\022\017\n\007baz_"
  "int\030\022 \001(\005\022\027\n\nbaz_string\030\023 \001(\t:\003BAZ\032 \n\010Fo"
  "oGroup\022\t\n\001a\030\t \001(\005\022\t\n\001b\030\n \001(\t\0323\n\rNestedMe"
  "ssage\022\017\n\007qux_int\030\001 \001(\003\022\021\n\tcorge_int\030\002 \003("
  "\005\"\'\n\nNestedEnum\022\007\n\003FOO\020\001\022\007\n\003BAR\020\002\022\007\n\003BAZ"
  "\020\003B\005\n\003fooB\005\n\003bar\"\270\001\n\021TestRequiredOneof\022\021"
  "\n\007foo_int\030\001 \001(\005H\000\022\024\n\nfoo_string\030\002 \001(\tH\000\022"
  "I\n\013foo_message\030\003 \001(\01322.protobuf_unittest"
  ".TestRequiredOneof.NestedMessageH\000\032(\n\rNe"
  "stedMessage\022\027\n\017required_double\030\001 \002(\001B\005\n\003"
  "foo\"\252\003\n\017TestPackedTypes\022\030\n\014packed_int32\030"
  "Z \003(\005B\002\020\001\022\030\n\014packed_int64\030[ \003(\003B\002\020\001\022\031\n\rp"
  "acked_uint32\030\\ \003(\rB\002\020\001\022\031\n\rpacked_uint64\030"
  "] \003(\004B\002\020\001\022\031\n\rpacked_sint32\030^ \003(\021B\002\020\001\022\031\n\r"
  "packed_sint64\030_ \003(\022B\002\020\001\022\032\n\016packed_fixed3"
  "2\030` \003(\007B\002\020\001\022\032\n\016packed_fixed64\030a \003(\006B\002\020\001\022"
  "\033\n\017packed_sfixed32\030b \003(\017B\002\020\001\022\033\n\017packed_s"
  "fixed64\030c \003(\020B\002\020\001\022\030\n\014packed_float\030d \003(\002B"
  "\002\020\001\022\031\n\rpacked_double\030e \003(\001B\002\020\001\022\027\n\013packed"
  "_bool\030f \003(\010B\002\020\001\0227\n\013packed_enum\030g \003(\0162\036.p"
  "rotobuf_unittest.ForeignEnumB\002\020\001\"\310\003\n\021Tes"
  "tUnpackedTypes\022\032\n\016unpacked_int32\030Z \003(\005B\002"
  "\020\000\022\032\n\016unpacked_int64\030[ \003(\003B\002\020\000\022\033\n\017unpack"
  "ed_uint32\030\\ \003(\rB\002\020\000\022\033\n\017unpacked_uint64\030]"
  " \003(\004B\002\020\000\022\033\n\017unpacked_sint32\030^ \003(\021B\002\020\000\022\033\n"
  "\017unpacked_sint64\030_ \003(\022B\002\020\000\022\034\n\020unpacked_f"
  "ixed32\030` \003(\007B\002\020\000\022\034\n\020unpacked_fixed64\030a \003"
  "(\006B\002\020\000\022\035\n\021unpacked_sfixed32\030b \003(\017B\002\020\000\022\035\n"
  "\021unpacked_sfixed64\030c \003(\020B\002\020\000\022\032\n\016unpacked"
  "_float\030d \003(\002B\002\020\000\022\033\n\017unpacked_double\030e \003("
  "\001B\002\020\000\022\031\n\runpacked_bool\030f \003(\010B\002\020\000\0229\n\runpa"
  "cked_enum\030g \003(\0162\036.protobuf_unittest.Fore"
  "ignEnumB\002\020\000\" \n\024TestPackedExtensions*\010\010\001\020"
  "\200\200\200\200\002\"\"\n\026TestUnpackedExtensions*\010\010\001\020\200\200\200\200"
  "\002\"\231\004\n\025TestDynamicExtensions\022\031\n\020scalar_ex"
  "tension\030\320\017 \001(\007\0227\n\016enum_extension\030\321\017 \001(\0162"
  "\036.protobuf_unittest.ForeignEnum\022Y\n\026dynam"
  "ic_enum_extension\030\322\017 \001(\01628.protobuf_unit"
  "test.TestDynamicExtensions.DynamicEnumTy"
  "pe\022=\n\021message_extension\030\323\017 \001(\0132!.protobu"
  "f_unittest.ForeignMessage\022_\n\031dynamic_mes"
  "sage_extension\030\324\017 \001(\0132;.protobuf_unittes"
  "t.TestDynamicExtensions.DynamicMessageTy"
  "pe\022\033\n\022repeated_extension\030\325\017 \003(\t\022\035\n\020packe"
  "d_extension\030\326\017 \003(\021B\002\020\001\032,\n\022DynamicMessage"
  "Type\022\026\n\rdynamic_field\030\264\020 \001(\005\"G\n\017DynamicE"
  "numType\022\020\n\013DYNAMIC_FOO\020\230\021\022\020\n\013DYNAMIC_BAR"
  "\020\231\021\022\020\n\013DYNAMIC_BAZ\020\232\021\"\300\001\n#TestRepeatedSc"
  "alarDifferentTagSizes\022\030\n\020repeated_fixed3"
  "2\030\014 \003(\007\022\026\n\016repeated_int32\030\r \003(\005\022\031\n\020repea"
  "ted_fixed64\030\376\017 \003(\006\022\027\n\016repeated_int64\030\377\017 "
  "\003(\003\022\030\n\016repeated_float\030\376\377\017 \003(\002\022\031\n\017repeate"
  "d_uint64\030\377\377\017 \003(\004\"\367\t\n\020TestParsingMerge\022;\n"
  "\022required_all_types\030\001 \002(\0132\037.protobuf_uni"
  "ttest.TestAllTypes\022;\n\022optional_all_types"
  "\030\002 \001(\0132\037.protobuf_unittest.TestAllTypes\022"
  ";\n\022repeated_all_types\030\003 \003(\0132\037.protobuf_u"
  "nittest.TestAllTypes\022H\n\roptionalgroup\030\n "
  "\001(\n21.protobuf_unittest.TestParsingMerge"
  ".OptionalGroup\022H\n\rrepeatedgroup\030\024 \003(\n21."
  "protobuf_unittest.TestParsingMerge.Repea"
  "tedGroup\032\252\004\n\027RepeatedFieldsGenerator\022/\n\006"
  "field1\030\001 \003(\0132\037.protobuf_unittest.TestAll"
  "Types\022/\n\006field2\030\002 \003(\0132\037.protobuf_unittes"
  "t.TestAllTypes\022/\n\006field3\030\003 \003(\0132\037.protobu"
  "f_unittest.TestAllTypes\022R\n\006group1\030\n \003(\n2"
  "B.protobuf_unittest.TestParsingMerge.Rep"
  "eatedFieldsGenerator.Group1\022R\n\006group2\030\024 "
  "\003(\n2B.protobuf_unittest.TestParsingMerge"
  ".RepeatedFieldsGenerator.Group2\022.\n\004ext1\030"
  "\350\007 \003(\0132\037.protobuf_unittest.TestAllTypes\022"
  ".\n\004ext2\030\351\007 \003(\0132\037.protobuf_unittest.TestA"
  "llTypes\0329\n\006Group1\022/\n\006field1\030\013 \001(\0132\037.prot"
  "obuf_unittest.TestAllTypes\0329\n\006Group2\022/\n\006"
  "field1\030\025 \001(\0132\037.protobuf_unittest.TestAll"
  "Types\032R\n\rOptionalGroup\022A\n\030optional_group"
  "_all_types\030\013 \001(\0132\037.protobuf_unittest.Tes"
  "tAllTypes\032R\n\rRepeatedGroup\022A\n\030repeated_g"
  "roup_all_types\030\025 \001(\0132\037.protobuf_unittest"
  ".TestAllTypes*\t\010\350\007\020\200\200\200\200\0022[\n\014optional_ext"
  "\022#.protobuf_unittest.TestParsingMerge\030\350\007"
  " \001(\0132\037.protobuf_unittest.TestAllTypes2[\n"
  "\014repeated_ext\022#.protobuf_unittest.TestPa"
  "rsingMerge\030\351\007 \003(\0132\037.protobuf_unittest.Te"
  "stAllTypes\"D\n\033TestCommentInjectionMessag"
  "e\022%\n\001a\030\001 \001(\t:\032*/ <- Neither should this."
  "\"\014\n\nFooRequest\"\r\n\013FooResponse\"\022\n\020FooClie"
  "ntMessage\"\022\n\020FooServerMessage\"\014\n\nBarRequ"
  "est\"\r\n\013BarResponse\"\222\001\n\014TestJsonName\022\023\n\013f"
  "ield_name1\030\001 \001(\005\022\022\n\nfieldName2\030\002 \001(\005\022\022\n\n"
  "FieldName3\030\003 \001(\005\022\024\n\014_field_name4\030\004 \001(\005\022\023"
  "\n\013FIELD_NAME5\030\005 \001(\005\022\032\n\013field_name6\030\006 \001(\005"
  "R\005@type\"\375\005\n\024TestHugeFieldNumbers\022\032\n\016opti"
  "onal_int32\030\360\370\377\377\001 \001(\005\022\024\n\010fixed_32\030\361\370\377\377\001 \001"
  "(\005\022\036\n\016repeated_int32\030\362\370\377\377\001 \003(\005B\002\020\000\022\034\n\014pa"
  "cked_int32\030\363\370\377\377\001 \003(\005B\002\020\001\0229\n\roptional_enu"
  "m\030\364\370\377\377\001 \001(\0162\036.protobuf_unittest.ForeignE"
  "num\022\033\n\017optional_string\030\365\370\377\377\001 \001(\t\022\032\n\016opti"
  "onal_bytes\030\366\370\377\377\001 \001(\014\022\?\n\020optional_message"
  "\030\367\370\377\377\001 \001(\0132!.protobuf_unittest.ForeignMe"
  "ssage\022P\n\roptionalgroup\030\370\370\377\377\001 \001(\n25.proto"
  "buf_unittest.TestHugeFieldNumbers.Option"
  "alGroup\022[\n\021string_string_map\030\372\370\377\377\001 \003(\0132<"
  ".protobuf_unittest.TestHugeFieldNumbers."
  "StringStringMapEntry\022\032\n\014oneof_uint32\030\373\370\377"
  "\377\001 \001(\rH\000\022C\n\024oneof_test_all_types\030\374\370\377\377\001 \001"
  "(\0132\037.protobuf_unittest.TestAllTypesH\000\022\032\n"
  "\014oneof_string\030\375\370\377\377\001 \001(\tH\000\022\031\n\013oneof_bytes"
  "\030\376\370\377\377\001 \001(\014H\000\032$\n\rOptionalGroup\022\023\n\007group_a"
  "\030\371\370\377\377\001 \001(\005\0326\n\024StringStringMapEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\014\010\340\252\377\377\001\020\360\370\377\377\001"
  "B\r\n\013oneof_field\"\261\001\n\030TestExtensionInsideT"
  "able\022\016\n\006field1\030\001 \001(\005\022\016\n\006field2\030\002 \001(\005\022\016\n\006"
  "field3\030\003 \001(\005\022\016\n\006field4\030\004 \001(\005\022\016\n\006field6\030\006"
  " \001(\005\022\016\n\006field7\030\007 \001(\005\022\016\n\006field8\030\010 \001(\005\022\016\n\006"
  "field9\030\t \001(\005\022\017\n\007field10\030\n \001(\005*\004\010\005\020\006*@\n\013F"
  "oreignEnum\022\017\n\013FOREIGN_FOO\020\004\022\017\n\013FOREIGN_B"
  "AR\020\005\022\017\n\013FOREIGN_BAZ\020\006*K\n\024TestEnumWithDup"
  "Value\022\010\n\004FOO1\020\001\022\010\n\004BAR1\020\002\022\007\n\003BAZ\020\003\022\010\n\004FO"
  "O2\020\001\022\010\n\004BAR2\020\002\032\002\020\001*\211\001\n\016TestSparseEnum\022\014\n"
  "\010SPARSE_A\020{\022\016\n\010SPARSE_B\020\246\347\003\022\017\n\010SPARSE_C\020"
  "\262\261\200\006\022\025\n\010SPARSE_D\020\361\377\377\377\377\377\377\377\377\001\022\025\n\010SPARSE_E\020"
  "\264\336\374\377\377\377\377\377\377\001\022\014\n\010SPARSE_F\020\000\022\014\n\010SPARSE_G\020\002*\213"
  "\017\n\rVeryLargeEnum\022\026\n\022ENUM_LABEL_DEFAULT\020\000"
  "\022\020\n\014ENUM_LABEL_1\020\001\022\020\n\014ENUM_LABEL_2\020\002\022\020\n\014"
  "ENUM_LABEL_3\020\003\022\020\n\014ENUM_LABEL_4\020\004\022\020\n\014ENUM"
  "_LABEL_5\020\005\022\020\n\014ENUM_LABEL_6\020\006\022\020\n\014ENUM_LAB"
  "EL_7\020\007\022\020\n\014ENUM_LABEL_8\020\010\022\020\n\014ENUM_LABEL_9"
  "\020\t\022\021\n\rENUM_LABEL_10\020\n\022\021\n\rENUM_LABEL_11\020\013"
  "\022\021\n\rENUM_LABEL_12\020\014\022\021\n\rENUM_LABEL_13\020\r\022\021"
  "\n\rENUM_LABEL_14\020\016\022\021\n\rENUM_LABEL_15\020\017\022\021\n\r"
  "ENUM_LABEL_16\020\020\022\021\n\rENUM_LABEL_17\020\021\022\021\n\rEN"
  "UM_LABEL_18\020\022\022\021\n\rENUM_LABEL_19\020\023\022\021\n\rENUM"
  "_LABEL_20\020\024\022\021\n\rENUM_LABEL_21\020\025\022\021\n\rENUM_L"
  "ABEL_22\020\026\022\021\n\rENUM_LABEL_23\020\027\022\021\n\rENUM_LAB"
  "EL_24\020\030\022\021\n\rENUM_LABEL_25\020\031\022\021\n\rENUM_LABEL"
  "_26\020\032\022\021\n\rENUM_LABEL_27\020\033\022\021\n\rENUM_LABEL_2"
  "8\020\034\022\021\n\rENUM_LABEL_29\020\035\022\021\n\rENUM_LABEL_30\020"
  "\036\022\021\n\rENUM_LABEL_31\020\037\022\021\n\rENUM_LABEL_32\020 \022"
  "\021\n\rENUM_LABEL_33\020!\022\021\n\rENUM_LABEL_34\020\"\022\021\n"
  "\rENUM_LABEL_35\020#\022\021\n\rENUM_LABEL_36\020$\022\021\n\rE"
  "NUM_LABEL_37\020%\022\021\n\rENUM_LABEL_38\020&\022\021\n\rENU"
  "M_LABEL_39\020\'\022\021\n\rENUM_LABEL_40\020(\022\021\n\rENUM_"
  "LABEL_41\020)\022\021\n\rENUM_LABEL_42\020*\022\021\n\rENUM_LA"
  "BEL_43\020+\022\021\n\rENUM_LABEL_44\020,\022\021\n\rENUM_LABE"
  "L_45\020-\022\021\n\rENUM_LABEL_46\020.\022\021\n\rENUM_LABEL_"
  "47\020/\022\021\n\rENUM_LABEL_48\0200\022\021\n\rENUM_LABEL_49"
  "\0201\022\021\n\rENUM_LABEL_50\0202\022\021\n\rENUM_LABEL_51\0203"
  "\022\021\n\rENUM_LABEL_52\0204\022\021\n\rENUM_LABEL_53\0205\022\021"
  "\n\rENUM_LABEL_54\0206\022\021\n\rENUM_LABEL_55\0207\022\021\n\r"
  "ENUM_LABEL_56\0208\022\021\n\rENUM_LABEL_57\0209\022\021\n\rEN"
  "UM_LABEL_58\020:\022\021\n\rENUM_LABEL_59\020;\022\021\n\rENUM"
  "_LABEL_60\020<\022\021\n\rENUM_LABEL_61\020=\022\021\n\rENUM_L"
  "ABEL_62\020>\022\021\n\rENUM_LABEL_63\020\?\022\021\n\rENUM_LAB"
  "EL_64\020@\022\021\n\rENUM_LABEL_65\020A\022\021\n\rENUM_LABEL"
  "_66\020B\022\021\n\rENUM_LABEL_67\020C\022\021\n\rENUM_LABEL_6"
  "8\020D\022\021\n\rENUM_LABEL_69\020E\022\021\n\rENUM_LABEL_70\020"
  "F\022\021\n\rENUM_LABEL_71\020G\022\021\n\rENUM_LABEL_72\020H\022"
  "\021\n\rENUM_LABEL_73\020I\022\021\n\rENUM_LABEL_74\020J\022\021\n"
  "\rENUM_LABEL_75\020K\022\021\n\rENUM_LABEL_76\020L\022\021\n\rE"
  "NUM_LABEL_77\020M\022\021\n\rENUM_LABEL_78\020N\022\021\n\rENU"
  "M_LABEL_79\020O\022\021\n\rENUM_LABEL_80\020P\022\021\n\rENUM_"
  "LABEL_81\020Q\022\021\n\rENUM_LABEL_82\020R\022\021\n\rENUM_LA"
  "BEL_83\020S\022\021\n\rENUM_LABEL_84\020T\022\021\n\rENUM_LABE"
  "L_85\020U\022\021\n\rENUM_LABEL_86\020V\022\021\n\rENUM_LABEL_"
  "87\020W\022\021\n\rENUM_LABEL_88\020X\022\021\n\rENUM_LABEL_89"
  "\020Y\022\021\n\rENUM_LABEL_90\020Z\022\021\n\rENUM_LABEL_91\020["
  "\022\021\n\rENUM_LABEL_92\020\\\022\021\n\rENUM_LABEL_93\020]\022\021"
  "\n\rENUM_LABEL_94\020^\022\021\n\rENUM_LABEL_95\020_\022\021\n\r"
  "ENUM_LABEL_96\020`\022\021\n\rENUM_LABEL_97\020a\022\021\n\rEN"
  "UM_LABEL_98\020b\022\021\n\rENUM_LABEL_99\020c\022\022\n\016ENUM"
  "_LABEL_100\020d2\231\001\n\013TestService\022D\n\003Foo\022\035.pr"
  "otobuf_unittest.FooRequest\032\036.protobuf_un"
  "ittest.FooResponse\022D\n\003Bar\022\035.protobuf_uni"
  "ttest.BarRequest\032\036.protobuf_unittest.Bar"
  "Response:F\n\030optional_int32_extension\022$.p"
  "rotobuf_unittest.TestAllExtensions\030\001 \001(\005"
  ":F\n\030optional_int64_extension\022$.protobuf_"
  "unittest.TestAllExtensions\030\002 \001(\003:G\n\031opti"
  "onal_uint32_extension\022$.protobuf_unittes"
  "t.TestAllExtensions\030\003 \001(\r:G\n\031optional_ui"
  "nt64_extension\022$.protobuf_unittest.TestA"
  "llExtensions\030\004 \001(\004:G\n\031optional_sint32_ex"
  "tension\022$.protobuf_unittest.TestAllExten"
  "sions\030\005 \001(\021:G\n\031optional_sint64_extension"
  "\022$.protobuf_unittest.TestAllExtensions\030\006"
  " \001(\022:H\n\032optional_fixed32_extension\022$.pro"
  "tobuf_unittest.TestAllExtensions\030\007 \001(\007:H"
  "\n\032optional_fixed64_extension\022$.protobuf_"
  "unittest.TestAllExtensions\030\010 \001(\006:I\n\033opti"
  "onal_sfixed32_extension\022$.protobuf_unitt"
  "est.TestAllExtensions\030\t \001(\017:I\n\033optional_"
  "sfixed64_extension\022$.protobuf_unittest.T"
  "estAllExtensions\030\n \001(\020:F\n\030optional_float"
  "_extension\022$.protobuf_unittest.TestAllEx"
  "tensions\030\013 \001(\002:G\n\031optional_double_extens"
  "ion\022$.protobuf_unittest.TestAllExtension"
  "s\030\014 \001(\001:E\n\027optional_bool_extension\022$.pro"
  "tobuf_unittest.TestAllExtensions\030\r \001(\010:G"
  "\n\031optional_string_extension\022$.protobuf_u"
  "nittest.TestAllExtensions\030\016 \001(\t:F\n\030optio"
  "nal_bytes_extension\022$.protobuf_unittest."
  "TestAllExtensions\030\017 \001(\014:q\n\027optionalgroup"
  "_extension\022$.protobuf_unittest.TestAllEx"
  "tensions\030\020 \001(\n2*.protobuf_unittest.Optio"
  "nalGroup_extension:~\n!optional_nested_me"
  "ssage_extension\022$.protobuf_unittest.Test"
  "AllExtensions\030\022 \001(\0132-.protobuf_unittest."
  "TestAllTypes.NestedMessage:s\n\"optional_f"
  "oreign_message_extension\022$.protobuf_unit"
  "test.TestAllExtensions\030\023 \001(\0132!.protobuf_"
  "unittest.ForeignMessage:x\n!optional_impo"
  "rt_message_extension\022$.protobuf_unittest"
  ".TestAllExtensions\030\024 \001(\0132\'.protobuf_unit"
  "test_import.ImportMessage:x\n\036optional_ne"
  "sted_enum_extension\022$.protobuf_unittest."
  "TestAllExtensions\030\025 \001(\0162*.protobuf_unitt"
  "est.TestAllTypes.NestedEnum:m\n\037optional_"
  "foreign_enum_extension\022$.protobuf_unitte"
  "st.TestAllExtensions\030\026 \001(\0162\036.protobuf_un"
  "ittest.ForeignEnum:r\n\036optional_import_en"
  "um_extension\022$.protobuf_unittest.TestAll"
  "Extensions\030\027 \001(\0162$.protobuf_unittest_imp"
  "ort.ImportEnum:Q\n\037optional_string_piece_"
  "extension\022$.protobuf_unittest.TestAllExt"
  "ensions\030\030 \001(\tB\002\010\002:I\n\027optional_cord_exten"
  "sion\022$.protobuf_unittest.TestAllExtensio"
  "ns\030\031 \001(\tB\002\010\001:\205\001\n(optional_public_import_"
  "message_extension\022$.protobuf_unittest.Te"
  "stAllExtensions\030\032 \001(\0132-.protobuf_unittes"
  "t_import.PublicImportMessage:\200\001\n\037optiona"
  "l_lazy_message_extension\022$.protobuf_unit"
  "test.TestAllExtensions\030\033 \001(\0132-.protobuf_"
  "unittest.TestAllTypes.NestedMessageB\002(\001:"
  "F\n\030repeated_int32_extension\022$.protobuf_u"
  "nittest.TestAllExtensions\030\037 \003(\005:F\n\030repea"
  "ted_int64_extension\022$.protobuf_unittest."
  "TestAllExtensions\030  \003(\003:G\n\031repeated_uint"
  "32_extension\022$.protobuf_unittest.TestAll"
  "Extensions\030! \003(\r:G\n\031repeated_uint64_exte"
  "nsion\022$.protobuf_unittest.TestAllExtensi"
  "ons\030\" \003(\004:G\n\031repeated_sint32_extension\022$"
  ".protobuf_unittest.TestAllExtensions\030# \003"
  "(\021:G\n\031repeated_sint64_extension\022$.protob"
  "uf_unittest.TestAllExtensions\030$ \003(\022:H\n\032r"
  "epeated_fixed32_extension\022$.protobuf_uni"
  "ttest.TestAllExtensions\030% \003(\007:H\n\032repeate"
  "d_fixed64_extension\022$.protobuf_unittest."
  "TestAllExtensions\030& \003(\006:I\n\033repeated_sfix"
  "ed32_extension\022$.protobuf_unittest.TestA"
  "llExtensions\030\' \003(\017:I\n\033repeated_sfixed64_"
  "extension\022$.protobuf_unittest.TestAllExt"
  "ensions\030( \003(\020:F\n\030repeated_float_extensio"
  "n\022$.protobuf_unittest.TestAllExtensions\030"
  ") \003(\002:G\n\031repeated_double_extension\022$.pro"
  "tobuf_unittest.TestAllExtensions\030* \003(\001:E"
  "\n\027repeated_bool_extension\022$.protobuf_uni"
  "ttest.TestAllExtensions\030+ \003(\010:G\n\031repeate"
  "d_string_extension\022$.protobuf_unittest.T"
  "estAllExtensions\030, \003(\t:F\n\030repeated_bytes"
  "_extension\022$.protobuf_unittest.TestAllEx"
  "tensions\030- \003(\014:q\n\027repeatedgroup_extensio"
  "n\022$.protobuf_unittest.TestAllExtensions\030"
  ". \003(\n2*.protobuf_unittest.RepeatedGroup_"
  "extension:~\n!repeated_nested_message_ext"
  "ension\022$.protobuf_unittest.TestAllExtens"
  "ions\0300 \003(\0132-.protobuf_unittest.TestAllTy"
  "pes.NestedMessage:s\n\"repeated_foreign_me"
  "ssage_extension\022$.protobuf_unittest.Test"
  "AllExtensions\0301 \003(\0132!.protobuf_unittest."
  "ForeignMessage:x\n!repeated_import_messag"
  "e_extension\022$.protobuf_unittest.TestAllE"
  "xtensions\0302 \003(\0132\'.protobuf_unittest_impo"
  "rt.ImportMessage:x\n\036repeated_nested_enum"
  "_extension\022$.protobuf_unittest.TestAllEx"
  "tensions\0303 \003(\0162*.protobuf_unittest.TestA"
  "llTypes.NestedEnum:m\n\037repeated_foreign_e"
  "num_extension\022$.protobuf_unittest.TestAl"
  "lExtensions\0304 \003(\0162\036.protobuf_unittest.Fo"
  "reignEnum:r\n\036repeated_import_enum_extens"
  "ion\022$.protobuf_unittest.TestAllExtension"
  "s\0305 \003(\0162$.protobuf_unittest_import.Impor"
  "tEnum:Q\n\037repeated_string_piece_extension"
  "\022$.protobuf_unittest.TestAllExtensions\0306"
  " \003(\tB\002\010\002:I\n\027repeated_cord_extension\022$.pr"
  "otobuf_unittest.TestAllExtensions\0307 \003(\tB"
  "\002\010\001:\200\001\n\037repeated_lazy_message_extension\022"
  "$.protobuf_unittest.TestAllExtensions\0309 "
  "\003(\0132-.protobuf_unittest.TestAllTypes.Nes"
  "tedMessageB\002(\001:I\n\027default_int32_extensio"
  "n\022$.protobuf_unittest.TestAllExtensions\030"
  "= \001(\005:\00241:I\n\027default_int64_extension\022$.p"
  "rotobuf_unittest.TestAllExtensions\030> \001(\003"
  ":\00242:J\n\030default_uint32_extension\022$.proto"
  "buf_unittest.TestAllExtensions\030\? \001(\r:\00243"
  ":J\n\030default_uint64_extension\022$.protobuf_"
  "unittest.TestAllExtensions\030@ \001(\004:\00244:K\n\030"
  "default_sint32_extension\022$.protobuf_unit"
  "test.TestAllExtensions\030A \001(\021:\003-45:J\n\030def"
  "ault_sint64_extension\022$.protobuf_unittes"
  "t.TestAllExtensions\030B \001(\022:\00246:K\n\031default"
  "_fixed32_extension\022$.protobuf_unittest.T"
  "estAllExtensions\030C \001(\007:\00247:K\n\031default_fi"
  "xed64_extension\022$.protobuf_unittest.Test"
  "AllExtensions\030D \001(\006:\00248:L\n\032default_sfixe"
  "d32_extension\022$.protobuf_unittest.TestAl"
  "lExtensions\030E \001(\017:\00249:M\n\032default_sfixed6"
  "4_extension\022$.protobuf_unittest.TestAllE"
  "xtensions\030F \001(\020:\003-50:K\n\027default_float_ex"
  "tension\022$.protobuf_unittest.TestAllExten"
  "sions\030G \001(\002:\00451.5:M\n\030default_double_exte"
  "nsion\022$.protobuf_unittest.TestAllExtensi"
  "ons\030H \001(\001:\00552000:J\n\026default_bool_extensi"
  "on\022$.protobuf_unittest.TestAllExtensions"
  "\030I \001(\010:\004true:M\n\030default_string_extension"
  "\022$.protobuf_unittest.TestAllExtensions\030J"
  " \001(\t:\005hello:L\n\027default_bytes_extension\022$"
  ".protobuf_unittest.TestAllExtensions\030K \001"
  "(\014:\005world:|\n\035default_nested_enum_extensi"
  "on\022$.protobuf_unittest.TestAllExtensions"
  "\030Q \001(\0162*.protobuf_unittest.TestAllTypes."
  "NestedEnum:\003BAR:y\n\036default_foreign_enum_"
  "extension\022$.protobuf_unittest.TestAllExt"
  "ensions\030R \001(\0162\036.protobuf_unittest.Foreig"
  "nEnum:\013FOREIGN_BAR:}\n\035default_import_enu"
  "m_extension\022$.protobuf_unittest.TestAllE"
  "xtensions\030S \001(\0162$.protobuf_unittest_impo"
  "rt.ImportEnum:\nIMPORT_BAR:U\n\036default_str"
  "ing_piece_extension\022$.protobuf_unittest."
  "TestAllExtensions\030T \001(\t:\003abcB\002\010\002:M\n\026defa"
  "ult_cord_extension\022$.protobuf_unittest.T"
  "estAllExtensions\030U \001(\t:\003123B\002\010\001:D\n\026oneof"
  "_uint32_extension\022$.protobuf_unittest.Te"
  "stAllExtensions\030o \001(\r:{\n\036oneof_nested_me"
  "ssage_extension\022$.protobuf_unittest.Test"
  "AllExtensions\030p \001(\0132-.protobuf_unittest."
  "TestAllTypes.NestedMessage:D\n\026oneof_stri"
  "ng_extension\022$.protobuf_unittest.TestAll"
  "Extensions\030q \001(\t:C\n\025oneof_bytes_extensio"
  "n\022$.protobuf_unittest.TestAllExtensions\030"
  "r \001(\014:B\n\023my_extension_string\022%.protobuf_"
  "unittest.TestFieldOrderings\0302 \001(\t:\?\n\020my_"
  "extension_int\022%.protobuf_unittest.TestFi"
  "eldOrderings\030\005 \001(\005:K\n\026packed_int32_exten"
  "sion\022\'.protobuf_unittest.TestPackedExten"
  "sions\030Z \003(\005B\002\020\001:K\n\026packed_int64_extensio"
  "n\022\'.protobuf_unittest.TestPackedExtensio"
  "ns\030[ \003(\003B\002\020\001:L\n\027packed_uint32_extension\022"
  "\'.protobuf_unittest.TestPackedExtensions"
  "\030\\ \003(\rB\002\020\001:L\n\027packed_uint64_extension\022\'."
  "protobuf_unittest.TestPackedExtensions\030]"
  " \003(\004B\002\020\001:L\n\027packed_sint32_extension\022\'.pr"
  "otobuf_unittest.TestPackedExtensions\030^ \003"
  "(\021B\002\020\001:L\n\027packed_sint64_extension\022\'.prot"
  "obuf_unittest.TestPackedExtensions\030_ \003(\022"
  "B\002\020\001:M\n\030packed_fixed32_extension\022\'.proto"
  "buf_unittest.TestPackedExtensions\030` \003(\007B"
  "\002\020\001:M\n\030packed_fixed64_extension\022\'.protob"
  "uf_unittest.TestPackedExtensions\030a \003(\006B\002"
  "\020\001:N\n\031packed_sfixed32_extension\022\'.protob"
  "uf_unittest.TestPackedExtensions\030b \003(\017B\002"
  "\020\001:N\n\031packed_sfixed64_extension\022\'.protob"
  "uf_unittest.TestPackedExtensions\030c \003(\020B\002"
  "\020\001:K\n\026packed_float_extension\022\'.protobuf_"
  "unittest.TestPackedExtensions\030d \003(\002B\002\020\001:"
  "L\n\027packed_double_extension\022\'.protobuf_un"
  "ittest.TestPackedExtensions\030e \003(\001B\002\020\001:J\n"
  "\025packed_bool_extension\022\'.protobuf_unitte"
  "st.TestPackedExtensions\030f \003(\010B\002\020\001:j\n\025pac"
  "ked_enum_extension\022\'.protobuf_unittest.T"
  "estPackedExtensions\030g \003(\0162\036.protobuf_uni"
  "ttest.ForeignEnumB\002\020\001:O\n\030unpacked_int32_"
  "extension\022).protobuf_unittest.TestUnpack"
  "edExtensions\030Z \003(\005B\002\020\000:O\n\030unpacked_int64"
  "_extension\022).protobuf_unittest.TestUnpac"
  "kedExtensions\030[ \003(\003B\002\020\000:P\n\031unpacked_uint"
  "32_extension\022).protobuf_unittest.TestUnp"
  "ackedExtensions\030\\ \003(\rB\002\020\000:P\n\031unpacked_ui"
  "nt64_extension\022).protobuf_unittest.TestU"
  "npackedExtensions\030] \003(\004B\002\020\000:P\n\031unpacked_"
  "sint32_extension\022).protobuf_unittest.Tes"
  "tUnpackedExtensions\030^ \003(\021B\002\020\000:P\n\031unpacke"
  "d_sint64_extension\022).protobuf_unittest.T"
  "estUnpackedExtensions\030_ \003(\022B\002\020\000:Q\n\032unpac"
  "ked_fixed32_extension\022).protobuf_unittes"
  "t.TestUnpackedExtensions\030` \003(\007B\002\020\000:Q\n\032un"
  "packed_fixed64_extension\022).protobuf_unit"
  "test.TestUnpackedExtensions\030a \003(\006B\002\020\000:R\n"
  "\033unpacked_sfixed32_extension\022).protobuf_"
  "unittest.TestUnpackedExtensions\030b \003(\017B\002\020"
  "\000:R\n\033unpacked_sfixed64_extension\022).proto"
  "buf_unittest.TestUnpackedExtensions\030c \003("
  "\020B\002\020\000:O\n\030unpacked_float_extension\022).prot"
  "obuf_unittest.TestUnpackedExtensions\030d \003"
  "(\002B\002\020\000:P\n\031unpacked_double_extension\022).pr"
  "otobuf_unittest.TestUnpackedExtensions\030e"
  " \003(\001B\002\020\000:N\n\027unpacked_bool_extension\022).pr"
  "otobuf_unittest.TestUnpackedExtensions\030f"
  " \003(\010B\002\020\000:n\n\027unpacked_enum_extension\022).pr"
  "otobuf_unittest.TestUnpackedExtensions\030g"
  " \003(\0162\036.protobuf_unittest.ForeignEnumB\002\020\000"
  ":d\n\016test_all_types\022\'.protobuf_unittest.T"
  "estHugeFieldNumbers\030\340\252\377\377\001 \001(\0132\037.protobuf"
  "_unittest.TestAllTypes:Z\n%test_extension"
  "_inside_table_extension\022+.protobuf_unitt"
  "est.TestExtensionInsideTable\030\005 \001(\005B\035B\rUn"
  "ittestProtoH\001\200\001\001\210\001\001\220\001\001\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2funittest_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2funittest_5fimport_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2funittest_2eproto_sccs[91] = {
  &scc_info_BarRequest_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_BarResponse_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_BoolMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_FooClientMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_FooRequest_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_FooResponse_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_FooServerMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_Int32Message_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_Int64Message_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_MoreBytes_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_MoreString_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_OneBytes_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_OneString_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_RepeatedGroup_extension_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_SparseEnumMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestAllExtensions_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestAllTypes_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestAllTypes_RepeatedGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestCamelCaseFieldNames_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestCommentInjectionMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestDeprecatedFields_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestDeprecatedMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestDupFieldNumber_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestDupFieldNumber_Bar_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestDupFieldNumber_Foo_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestDynamicExtensions_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestDynamicExtensions_DynamicMessageType_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestEagerMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestEmptyMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestEmptyMessageWithExtensions_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestExtensionInsideTable_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestExtensionOrderings1_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestExtensionOrderings2_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestExtensionOrderings2_TestExtensionOrderings3_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestExtremeDefaultValues_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestFieldOrderings_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestFieldOrderings_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestForeignNested_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestGroup_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestGroupExtension_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestHugeFieldNumbers_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestHugeFieldNumbers_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestIsInitialized_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestIsInitialized_SubMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestIsInitialized_SubMessage_SubGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestJsonName_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestLazyMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestMultipleExtensionRanges_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestNestedExtension_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestNestedExtension_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestNestedMessageHasBits_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestNestedMessageHasBits_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestOneof_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestOneof_FooGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestOneof2_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestOneof2_FooGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestOneof2_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestOneofBackwardsCompatible_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestOneofBackwardsCompatible_FooGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestPackedExtensions_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestPackedTypes_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestParsingMerge_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestParsingMerge_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestParsingMerge_RepeatedFieldsGenerator_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group1_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group2_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestParsingMerge_RepeatedGroup_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestReallyLargeTagNumber_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestRecursiveMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestRepeatedScalarDifferentTagSizes_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestRequired_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestRequiredForeign_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestRequiredMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestRequiredOneof_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestRequiredOneof_NestedMessage_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestReservedFields_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestUnpackedExtensions_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_Uint32Message_google_2fprotobuf_2funittest_2eproto.base,
  &scc_info_Uint64Message_google_2fprotobuf_2funittest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2funittest_2eproto_once;
static bool descriptor_table_google_2fprotobuf_2funittest_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2funittest_2eproto = {
  &descriptor_table_google_2fprotobuf_2funittest_2eproto_initialized, descriptor_table_protodef_google_2fprotobuf_2funittest_2eproto, "google/protobuf/unittest.proto", 27025,
  &descriptor_table_google_2fprotobuf_2funittest_2eproto_once, descriptor_table_google_2fprotobuf_2funittest_2eproto_sccs, descriptor_table_google_2fprotobuf_2funittest_2eproto_deps, 91, 1,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2funittest_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2funittest_2eproto, 94, file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto, file_level_service_descriptors_google_2fprotobuf_2funittest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2funittest_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto), true);
namespace protobuf_unittest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestAllTypes_NestedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[0];
}
bool TestAllTypes_NestedEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestAllTypes_NestedEnum TestAllTypes::FOO;
constexpr TestAllTypes_NestedEnum TestAllTypes::BAR;
constexpr TestAllTypes_NestedEnum TestAllTypes::BAZ;
constexpr TestAllTypes_NestedEnum TestAllTypes::NEG;
constexpr TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MIN;
constexpr TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MAX;
constexpr int TestAllTypes::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestOneof2_NestedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[1];
}
bool TestOneof2_NestedEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestOneof2_NestedEnum TestOneof2::FOO;
constexpr TestOneof2_NestedEnum TestOneof2::BAR;
constexpr TestOneof2_NestedEnum TestOneof2::BAZ;
constexpr TestOneof2_NestedEnum TestOneof2::NestedEnum_MIN;
constexpr TestOneof2_NestedEnum TestOneof2::NestedEnum_MAX;
constexpr int TestOneof2::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestDynamicExtensions_DynamicEnumType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[2];
}
bool TestDynamicExtensions_DynamicEnumType_IsValid(int value) {
  switch (value) {
    case 2200:
    case 2201:
    case 2202:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DYNAMIC_FOO;
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DYNAMIC_BAR;
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DYNAMIC_BAZ;
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DynamicEnumType_MIN;
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DynamicEnumType_MAX;
constexpr int TestDynamicExtensions::DynamicEnumType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForeignEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[3];
}
bool ForeignEnum_IsValid(int value) {
  switch (value) {
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnumWithDupValue_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[4];
}
bool TestEnumWithDupValue_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestSparseEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[5];
}
bool TestSparseEnum_IsValid(int value) {
  switch (value) {
    case -53452:
    case -15:
    case 0:
    case 2:
    case 123:
    case 62374:
    case 12589234:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VeryLargeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[6];
}
bool VeryLargeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TestAllTypes_NestedMessage::InitAsDefaultInstance() {
}
class TestAllTypes_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypes_NestedMessage>()._has_bits_);
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypes_NestedMessage::TestAllTypes_NestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestAllTypes.NestedMessage)
}
TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypes.NestedMessage)
}
TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(const TestAllTypes_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bb_ = from.bb_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypes.NestedMessage)
}

void TestAllTypes_NestedMessage::SharedCtor() {
  bb_ = 0;
}

TestAllTypes_NestedMessage::~TestAllTypes_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypes.NestedMessage)
  SharedDtor();
}

void TestAllTypes_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestAllTypes_NestedMessage::ArenaDtor(void* object) {
  TestAllTypes_NestedMessage* _this = reinterpret_cast< TestAllTypes_NestedMessage* >(object);
  (void)_this;
}
void TestAllTypes_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypes_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypes_NestedMessage& TestAllTypes_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypes_NestedMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypes_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypes.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bb_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestAllTypes_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypes_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypes.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypes.NestedMessage)
  return target;
}

size_t TestAllTypes_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypes.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 bb = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypes_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestAllTypes.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypes_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestAllTypes.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestAllTypes.NestedMessage)
    MergeFrom(*source);
  }
}

void TestAllTypes_NestedMessage::MergeFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypes.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bb()) {
    _internal_set_bb(from._internal_bb());
  }
}

void TestAllTypes_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes_NestedMessage::CopyFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_NestedMessage::IsInitialized() const {
  return true;
}

void TestAllTypes_NestedMessage::InternalSwap(TestAllTypes_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bb_, other->bb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestAllTypes_OptionalGroup::InitAsDefaultInstance() {
}
class TestAllTypes_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypes_OptionalGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypes_OptionalGroup::TestAllTypes_OptionalGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestAllTypes.OptionalGroup)
}
TestAllTypes_OptionalGroup::TestAllTypes_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypes.OptionalGroup)
}
TestAllTypes_OptionalGroup::TestAllTypes_OptionalGroup(const TestAllTypes_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypes.OptionalGroup)
}

void TestAllTypes_OptionalGroup::SharedCtor() {
  a_ = 0;
}

TestAllTypes_OptionalGroup::~TestAllTypes_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypes.OptionalGroup)
  SharedDtor();
}

void TestAllTypes_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestAllTypes_OptionalGroup::ArenaDtor(void* object) {
  TestAllTypes_OptionalGroup* _this = reinterpret_cast< TestAllTypes_OptionalGroup* >(object);
  (void)_this;
}
void TestAllTypes_OptionalGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypes_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypes_OptionalGroup& TestAllTypes_OptionalGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypes_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypes_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestAllTypes_OptionalGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypes_OptionalGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypes.OptionalGroup)
  return target;
}

size_t TestAllTypes_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypes_OptionalGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes_OptionalGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypes_OptionalGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestAllTypes.OptionalGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestAllTypes.OptionalGroup)
    MergeFrom(*source);
  }
}

void TestAllTypes_OptionalGroup::MergeFrom(const TestAllTypes_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void TestAllTypes_OptionalGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes_OptionalGroup::CopyFrom(const TestAllTypes_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_OptionalGroup::IsInitialized() const {
  return true;
}

void TestAllTypes_OptionalGroup::InternalSwap(TestAllTypes_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes_OptionalGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestAllTypes_RepeatedGroup::InitAsDefaultInstance() {
}
class TestAllTypes_RepeatedGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypes_RepeatedGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypes_RepeatedGroup::TestAllTypes_RepeatedGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestAllTypes.RepeatedGroup)
}
TestAllTypes_RepeatedGroup::TestAllTypes_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypes.RepeatedGroup)
}
TestAllTypes_RepeatedGroup::TestAllTypes_RepeatedGroup(const TestAllTypes_RepeatedGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypes.RepeatedGroup)
}

void TestAllTypes_RepeatedGroup::SharedCtor() {
  a_ = 0;
}

TestAllTypes_RepeatedGroup::~TestAllTypes_RepeatedGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypes.RepeatedGroup)
  SharedDtor();
}

void TestAllTypes_RepeatedGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestAllTypes_RepeatedGroup::ArenaDtor(void* object) {
  TestAllTypes_RepeatedGroup* _this = reinterpret_cast< TestAllTypes_RepeatedGroup* >(object);
  (void)_this;
}
void TestAllTypes_RepeatedGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypes_RepeatedGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypes_RepeatedGroup& TestAllTypes_RepeatedGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypes_RepeatedGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypes_RepeatedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestAllTypes_RepeatedGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypes_RepeatedGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypes.RepeatedGroup)
  return target;
}

size_t TestAllTypes_RepeatedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 47;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypes_RepeatedGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes_RepeatedGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypes_RepeatedGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestAllTypes.RepeatedGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestAllTypes.RepeatedGroup)
    MergeFrom(*source);
  }
}

void TestAllTypes_RepeatedGroup::MergeFrom(const TestAllTypes_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void TestAllTypes_RepeatedGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes_RepeatedGroup::CopyFrom(const TestAllTypes_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_RepeatedGroup::IsInitialized() const {
  return true;
}

void TestAllTypes_RepeatedGroup::InternalSwap(TestAllTypes_RepeatedGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes_RepeatedGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestAllTypes::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optionalgroup_ = const_cast< ::protobuf_unittest::TestAllTypes_OptionalGroup*>(
      ::protobuf_unittest::TestAllTypes_OptionalGroup::internal_default_instance());
  ::protobuf_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_nested_message_ = const_cast< ::protobuf_unittest::TestAllTypes_NestedMessage*>(
      ::protobuf_unittest::TestAllTypes_NestedMessage::internal_default_instance());
  ::protobuf_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_foreign_message_ = const_cast< ::protobuf_unittest::ForeignMessage*>(
      ::protobuf_unittest::ForeignMessage::internal_default_instance());
  ::protobuf_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_import_message_ = const_cast< ::protobuf_unittest_import::ImportMessage*>(
      ::protobuf_unittest_import::ImportMessage::internal_default_instance());
  ::protobuf_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_public_import_message_ = const_cast< ::protobuf_unittest_import::PublicImportMessage*>(
      ::protobuf_unittest_import::PublicImportMessage::internal_default_instance());
  ::protobuf_unittest::_TestAllTypes_default_instance_._instance.get_mutable()->optional_lazy_message_ = const_cast< ::protobuf_unittest::TestAllTypes_NestedMessage*>(
      ::protobuf_unittest::TestAllTypes_NestedMessage::internal_default_instance());
  ::protobuf_unittest::_TestAllTypes_default_instance_.oneof_uint32_ = 0u;
  ::protobuf_unittest::_TestAllTypes_default_instance_.oneof_nested_message_ = const_cast< ::protobuf_unittest::TestAllTypes_NestedMessage*>(
      ::protobuf_unittest::TestAllTypes_NestedMessage::internal_default_instance());
  ::protobuf_unittest::_TestAllTypes_default_instance_.oneof_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_unittest::_TestAllTypes_default_instance_.oneof_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class TestAllTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypes>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_optional_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_optional_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_optional_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_optional_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_optional_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_optional_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_optional_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_optional_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_optional_double(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestAllTypes_OptionalGroup& optionalgroup(const TestAllTypes* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::protobuf_unittest::TestAllTypes_NestedMessage& optional_nested_message(const TestAllTypes* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::protobuf_unittest::ForeignMessage& optional_foreign_message(const TestAllTypes* msg);
  static void set_has_optional_foreign_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::protobuf_unittest_import::ImportMessage& optional_import_message(const TestAllTypes* msg);
  static void set_has_optional_import_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_optional_nested_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_optional_foreign_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_optional_import_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_optional_string_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_unittest_import::PublicImportMessage& optional_public_import_message(const TestAllTypes* msg);
  static void set_has_optional_public_import_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::protobuf_unittest::TestAllTypes_NestedMessage& optional_lazy_message(const TestAllTypes* msg);
  static void set_has_optional_lazy_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_default_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_default_int64(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_default_uint32(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_default_uint64(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_default_sint32(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_default_sint64(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_default_fixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_default_fixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_default_sfixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_default_sfixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_default_float(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_default_double(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_default_bool(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_default_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_nested_enum(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_default_foreign_enum(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_default_import_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_default_string_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::protobuf_unittest::TestAllTypes_NestedMessage& oneof_nested_message(const TestAllTypes* msg);
};

const ::protobuf_unittest::TestAllTypes_OptionalGroup&
TestAllTypes::_Internal::optionalgroup(const TestAllTypes* msg) {
  return *msg->optionalgroup_;
}
const ::protobuf_unittest::TestAllTypes_NestedMessage&
TestAllTypes::_Internal::optional_nested_message(const TestAllTypes* msg) {
  return *msg->optional_nested_message_;
}
const ::protobuf_unittest::ForeignMessage&
TestAllTypes::_Internal::optional_foreign_message(const TestAllTypes* msg) {
  return *msg->optional_foreign_message_;
}
const ::protobuf_unittest_import::ImportMessage&
TestAllTypes::_Internal::optional_import_message(const TestAllTypes* msg) {
  return *msg->optional_import_message_;
}
const ::protobuf_unittest_import::PublicImportMessage&
TestAllTypes::_Internal::optional_public_import_message(const TestAllTypes* msg) {
  return *msg->optional_public_import_message_;
}
const ::protobuf_unittest::TestAllTypes_NestedMessage&
TestAllTypes::_Internal::optional_lazy_message(const TestAllTypes* msg) {
  return *msg->optional_lazy_message_;
}
const ::protobuf_unittest::TestAllTypes_NestedMessage&
TestAllTypes::_Internal::oneof_nested_message(const TestAllTypes* msg) {
  return *msg->oneof_field_.oneof_nested_message_;
}
void TestAllTypes::unsafe_arena_set_allocated_optionalgroup(
    ::protobuf_unittest::TestAllTypes_OptionalGroup* optionalgroup) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optionalgroup_;
  }
  optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optionalgroup)
}
void TestAllTypes::unsafe_arena_set_allocated_optional_nested_message(
    ::protobuf_unittest::TestAllTypes_NestedMessage* optional_nested_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_nested_message_;
  }
  optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_nested_message)
}
void TestAllTypes::unsafe_arena_set_allocated_optional_foreign_message(
    ::protobuf_unittest::ForeignMessage* optional_foreign_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_foreign_message_;
  }
  optional_foreign_message_ = optional_foreign_message;
  if (optional_foreign_message) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_foreign_message)
}
void TestAllTypes::unsafe_arena_set_allocated_optional_import_message(
    ::protobuf_unittest_import::ImportMessage* optional_import_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_import_message_;
  }
  optional_import_message_ = optional_import_message;
  if (optional_import_message) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_import_message)
}
void TestAllTypes::clear_optional_import_message() {
  if (optional_import_message_ != nullptr) optional_import_message_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void TestAllTypes::unsafe_arena_set_allocated_optional_public_import_message(
    ::protobuf_unittest_import::PublicImportMessage* optional_public_import_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_public_import_message_;
  }
  optional_public_import_message_ = optional_public_import_message;
  if (optional_public_import_message) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_public_import_message)
}
void TestAllTypes::clear_optional_public_import_message() {
  if (optional_public_import_message_ != nullptr) optional_public_import_message_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void TestAllTypes::unsafe_arena_set_allocated_optional_lazy_message(
    ::protobuf_unittest::TestAllTypes_NestedMessage* optional_lazy_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_lazy_message_;
  }
  optional_lazy_message_ = optional_lazy_message;
  if (optional_lazy_message) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_lazy_message)
}
void TestAllTypes::clear_repeated_import_message() {
  repeated_import_message_.Clear();
}
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_;
void TestAllTypes::set_allocated_oneof_nested_message(::protobuf_unittest::TestAllTypes_NestedMessage* oneof_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_field();
  if (oneof_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oneof_nested_message);
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.oneof_nested_message)
}
TestAllTypes::TestAllTypes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestAllTypes)
}
TestAllTypes::TestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_sint32_(arena),
  repeated_sint64_(arena),
  repeated_fixed32_(arena),
  repeated_fixed64_(arena),
  repeated_sfixed32_(arena),
  repeated_sfixed64_(arena),
  repeated_float_(arena),
  repeated_double_(arena),
  repeated_bool_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena),
  repeatedgroup_(arena),
  repeated_nested_message_(arena),
  repeated_foreign_message_(arena),
  repeated_import_message_(arena),
  repeated_nested_enum_(arena),
  repeated_foreign_enum_(arena),
  repeated_import_enum_(arena),
  repeated_string_piece_(arena),
  repeated_cord_(arena),
  repeated_lazy_message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypes)
}
TestAllTypes::TestAllTypes(const TestAllTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_bool_(from.repeated_bool_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeatedgroup_(from.repeatedgroup_),
      repeated_nested_message_(from.repeated_nested_message_),
      repeated_foreign_message_(from.repeated_foreign_message_),
      repeated_import_message_(from.repeated_import_message_),
      repeated_nested_enum_(from.repeated_nested_enum_),
      repeated_foreign_enum_(from.repeated_foreign_enum_),
      repeated_import_enum_(from.repeated_import_enum_),
      repeated_string_piece_(from.repeated_string_piece_),
      repeated_cord_(from.repeated_cord_),
      repeated_lazy_message_(from.repeated_lazy_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string()) {
    optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string(),
      GetArenaNoVirtual());
  }
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_bytes(),
      GetArenaNoVirtual());
  }
  optional_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string_piece()) {
    optional_string_piece_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string_piece(),
      GetArenaNoVirtual());
  }
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_cord()) {
    optional_cord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_cord(),
      GetArenaNoVirtual());
  }
  default_string_.UnsafeSetDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_.get());
  if (from._internal_has_default_string()) {
    default_string_.Set(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_.get(), from._internal_default_string(),
      GetArenaNoVirtual());
  }
  default_bytes_.UnsafeSetDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_.get());
  if (from._internal_has_default_bytes()) {
    default_bytes_.Set(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_.get(), from._internal_default_bytes(),
      GetArenaNoVirtual());
  }
  default_string_piece_.UnsafeSetDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_.get());
  if (from._internal_has_default_string_piece()) {
    default_string_piece_.Set(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_.get(), from._internal_default_string_piece(),
      GetArenaNoVirtual());
  }
  default_cord_.UnsafeSetDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_.get());
  if (from._internal_has_default_cord()) {
    default_cord_.Set(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_.get(), from._internal_default_cord(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestAllTypes_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_unittest::TestAllTypes_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  if (from._internal_has_optional_foreign_message()) {
    optional_foreign_message_ = new ::protobuf_unittest::ForeignMessage(*from.optional_foreign_message_);
  } else {
    optional_foreign_message_ = nullptr;
  }
  if (from._internal_has_optional_import_message()) {
    optional_import_message_ = new ::protobuf_unittest_import::ImportMessage(*from.optional_import_message_);
  } else {
    optional_import_message_ = nullptr;
  }
  if (from._internal_has_optional_public_import_message()) {
    optional_public_import_message_ = new ::protobuf_unittest_import::PublicImportMessage(*from.optional_public_import_message_);
  } else {
    optional_public_import_message_ = nullptr;
  }
  if (from._internal_has_optional_lazy_message()) {
    optional_lazy_message_ = new ::protobuf_unittest::TestAllTypes_NestedMessage(*from.optional_lazy_message_);
  } else {
    optional_lazy_message_ = nullptr;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_foreign_enum_) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(default_foreign_enum_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypes)
}

void TestAllTypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_string_.UnsafeSetDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_.get());
  default_bytes_.UnsafeSetDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_.get());
  default_string_piece_.UnsafeSetDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_.get());
  default_cord_.UnsafeSetDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_.get());
  ::memset(&optionalgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_bool_) -
      reinterpret_cast<char*>(&optionalgroup_)) + sizeof(optional_bool_));
  default_import_enum_ = 8;
  optional_nested_enum_ = 1;
  optional_foreign_enum_ = 4;
  optional_import_enum_ = 7;
  default_int32_ = 41;
  default_int64_ = PROTOBUF_LONGLONG(42);
  default_uint64_ = PROTOBUF_ULONGLONG(44);
  default_uint32_ = 43u;
  default_sint32_ = -45;
  default_sint64_ = PROTOBUF_LONGLONG(46);
  default_fixed64_ = PROTOBUF_ULONGLONG(48);
  default_fixed32_ = 47u;
  default_sfixed32_ = 49;
  default_sfixed64_ = PROTOBUF_LONGLONG(-50);
  default_double_ = 52000;
  default_float_ = 51.5f;
  default_bool_ = true;
  default_nested_enum_ = 2;
  default_foreign_enum_ = 5;
  clear_has_oneof_field();
}

TestAllTypes::~TestAllTypes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypes)
  SharedDtor();
}

void TestAllTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_piece_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_string_.DestroyNoArena(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_.get());
  default_bytes_.DestroyNoArena(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_.get());
  default_string_piece_.DestroyNoArena(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_.get());
  default_cord_.DestroyNoArena(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_.get());
  if (this != internal_default_instance()) delete optionalgroup_;
  if (this != internal_default_instance()) delete optional_nested_message_;
  if (this != internal_default_instance()) delete optional_foreign_message_;
  if (this != internal_default_instance()) delete optional_import_message_;
  if (this != internal_default_instance()) delete optional_public_import_message_;
  if (this != internal_default_instance()) delete optional_lazy_message_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestAllTypes::ArenaDtor(void* object) {
  TestAllTypes* _this = reinterpret_cast< TestAllTypes* >(object);
  (void)_this;
}
void TestAllTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypes& TestAllTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypes_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypes::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestAllTypes)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      if (GetArenaNoVirtual() == nullptr) {
        delete oneof_field_.oneof_nested_message_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeatedgroup_.Clear();
  repeated_nested_message_.Clear();
  repeated_foreign_message_.Clear();
  repeated_import_message_.Clear();
  repeated_nested_enum_.Clear();
  repeated_foreign_enum_.Clear();
  repeated_import_enum_.Clear();
  repeated_string_piece_.Clear();
  repeated_cord_.Clear();
  repeated_lazy_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      optional_string_piece_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      optional_cord_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      default_string_.ClearToDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000020u) {
      default_bytes_.ClearToDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000040u) {
      default_string_piece_.ClearToDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000080u) {
      default_cord_.ClearToDefault(&::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_.get(), GetArenaNoVirtual());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(optional_nested_message_ != nullptr);
      optional_nested_message_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(optional_foreign_message_ != nullptr);
      optional_foreign_message_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(optional_import_message_ != nullptr);
      optional_import_message_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(optional_public_import_message_ != nullptr);
      optional_public_import_message_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(optional_lazy_message_ != nullptr);
      optional_lazy_message_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&optional_int64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_int32_) -
        reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_int32_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&optional_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_sfixed32_) -
        reinterpret_cast<char*>(&optional_uint32_)) + sizeof(optional_sfixed32_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&optional_float_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_bool_) -
        reinterpret_cast<char*>(&optional_float_)) + sizeof(optional_bool_));
    default_import_enum_ = 8;
    optional_nested_enum_ = 1;
    optional_foreign_enum_ = 4;
    optional_import_enum_ = 7;
    default_int32_ = 41;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    default_int64_ = PROTOBUF_LONGLONG(42);
    default_uint64_ = PROTOBUF_ULONGLONG(44);
    default_uint32_ = 43u;
    default_sint32_ = -45;
    default_sint64_ = PROTOBUF_LONGLONG(46);
    default_fixed64_ = PROTOBUF_ULONGLONG(48);
    default_fixed32_ = 47u;
    default_sfixed32_ = 49;
  }
  if (cached_has_bits & 0x00003f00u) {
    default_sfixed64_ = PROTOBUF_LONGLONG(-50);
    default_double_ = 52000;
    default_float_ = 51.5f;
    default_bool_ = true;
    default_nested_enum_ = 2;
    default_foreign_enum_ = 5;
  }
  clear_oneof_field();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestAllTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_optional_int32(&_has_bits_);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 optional_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_optional_int64(&_has_bits_);
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 optional_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_optional_uint32(&_has_bits_);
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 optional_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_optional_uint64(&_has_bits_);
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 optional_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_optional_sint32(&_has_bits_);
          optional_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 optional_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_optional_sint64(&_has_bits_);
          optional_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 optional_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_optional_fixed32(&_has_bits_);
          optional_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 optional_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_optional_fixed64(&_has_bits_);
          optional_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 optional_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_optional_sfixed32(&_has_bits_);
          optional_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 optional_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_optional_sfixed64(&_has_bits_);
          optional_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional float optional_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_optional_float(&_has_bits_);
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double optional_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_optional_double(&_has_bits_);
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool optional_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_optional_bool(&_has_bits_);
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string optional_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.optional_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group OptionalGroup = 16 { ... };
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 131)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 131);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessage optional_foreign_message = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_foreign_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.ImportMessage optional_import_message = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_import_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(val))) {
            _internal_set_optional_nested_enum(static_cast<::protobuf_unittest::TestAllTypes_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_optional_foreign_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.ImportEnum optional_import_enum = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest_import::ImportEnum_IsValid(val))) {
            _internal_set_optional_import_enum(static_cast<::protobuf_unittest_import::ImportEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_optional_string_piece();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.optional_string_piece");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string optional_cord = 25 [ctype = CORD];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_optional_cord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.optional_cord");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_public_import_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_lazy_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<264>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 repeated_sint32 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_repeated_sint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 repeated_sint64 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_repeated_sint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 repeated_fixed32 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<301>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<305>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<317>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_repeated_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<321>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_repeated_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float repeated_float = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<333>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double repeated_double = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<337>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<344>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.repeated_string");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated group RepeatedGroup = 46 { ... };
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 115)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_repeatedgroup(), ptr, 371);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<371>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_foreign_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_import_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(val))) {
              _internal_add_repeated_nested_enum(static_cast<::protobuf_unittest::TestAllTypes_NestedEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<408>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeated_nested_enum(), ptr, ctx, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid, &_internal_metadata_, 51);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
              _internal_add_repeated_foreign_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<416>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeated_foreign_enum(), ptr, ctx, ::protobuf_unittest::ForeignEnum_IsValid, &_internal_metadata_, 52);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest_import::ImportEnum_IsValid(val))) {
              _internal_add_repeated_import_enum(static_cast<::protobuf_unittest_import::ImportEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(53, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<424>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeated_import_enum(), ptr, ctx, ::protobuf_unittest_import::ImportEnum_IsValid, &_internal_metadata_, 53);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string_piece();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.repeated_string_piece");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string repeated_cord = 55 [ctype = CORD];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_cord();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.repeated_cord");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_lazy_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 default_int32 = 61 [default = 41];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_default_int32(&_has_bits_);
          default_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 default_int64 = 62 [default = 42];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_default_int64(&_has_bits_);
          default_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_uint32 = 63 [default = 43];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_default_uint32(&_has_bits_);
          default_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 default_uint64 = 64 [default = 44];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_default_uint64(&_has_bits_);
          default_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 default_sint32 = 65 [default = -45];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_default_sint32(&_has_bits_);
          default_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 default_sint64 = 66 [default = 46];
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_default_sint64(&_has_bits_);
          default_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 default_fixed32 = 67 [default = 47];
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_default_fixed32(&_has_bits_);
          default_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 default_fixed64 = 68 [default = 48];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_default_fixed64(&_has_bits_);
          default_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 default_sfixed32 = 69 [default = 49];
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_default_sfixed32(&_has_bits_);
          default_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 default_sfixed64 = 70 [default = -50];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_default_sfixed64(&_has_bits_);
          default_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional float default_float = 71 [default = 51.5];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_default_float(&_has_bits_);
          default_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double default_double = 72 [default = 52000];
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_default_double(&_has_bits_);
          default_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool default_bool = 73 [default = true];
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_default_bool(&_has_bits_);
          default_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string default_string = 74 [default = "hello"];
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_default_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.default_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes default_bytes = 75 [default = "world"];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_default_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(val))) {
            _internal_set_default_nested_enum(static_cast<::protobuf_unittest::TestAllTypes_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(81, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_default_foreign_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(82, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest_import::ImportEnum_IsValid(val))) {
            _internal_set_default_import_enum(static_cast<::protobuf_unittest_import::ImportEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(83, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_default_string_piece();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.default_string_piece");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string default_cord = 85 [default = "123", ctype = CORD];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_default_cord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.default_cord");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 oneof_uint32 = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string oneof_string = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.oneof_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes oneof_bytes = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 optional_int32 = 1;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // optional int64 optional_int64 = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // optional uint32 optional_uint32 = 3;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // optional uint64 optional_uint64 = 4;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // optional sint32 optional_sint32 = 5;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_optional_sint32(), target);
  }

  // optional sint64 optional_sint64 = 6;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_optional_sint64(), target);
  }

  // optional fixed32 optional_fixed32 = 7;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_optional_fixed32(), target);
  }

  // optional fixed64 optional_fixed64 = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_optional_fixed64(), target);
  }

  // optional sfixed32 optional_sfixed32 = 9;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_optional_sfixed32(), target);
  }

  // optional sfixed64 optional_sfixed64 = 10;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_optional_sfixed64(), target);
  }

  // optional float optional_float = 11;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_optional_float(), target);
  }

  // optional double optional_double = 12;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_optional_double(), target);
  }

  // optional bool optional_bool = 13;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_optional_bool(), target);
  }

  // optional string optional_string = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.optional_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_optional_bytes(), target);
  }

  // optional group OptionalGroup = 16 { ... };
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        16, _Internal::optionalgroup(this), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::optional_nested_message(this), target, stream);
  }

  // optional .protobuf_unittest.ForeignMessage optional_foreign_message = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::optional_foreign_message(this), target, stream);
  }

  // optional .protobuf_unittest_import.ImportMessage optional_import_message = 20;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::optional_import_message(this), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_optional_nested_enum(), target);
  }

  // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_optional_foreign_enum(), target);
  }

  // optional .protobuf_unittest_import.ImportEnum optional_import_enum = 23;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_optional_import_enum(), target);
  }

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string_piece().data(), static_cast<int>(this->_internal_optional_string_piece().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.optional_string_piece");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_optional_string_piece(), target);
  }

  // optional string optional_cord = 25 [ctype = CORD];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_cord().data(), static_cast<int>(this->_internal_optional_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.optional_cord");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_optional_cord(), target);
  }

  // optional .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::optional_public_import_message(this), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::optional_lazy_message(this), target, stream);
  }

  // repeated int32 repeated_int32 = 31;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 32;
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(32, this->_internal_repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 33;
  for (int i = 0, n = this->_internal_repeated_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 34;
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(34, this->_internal_repeated_uint64(i), target);
  }

  // repeated sint32 repeated_sint32 = 35;
  for (int i = 0, n = this->_internal_repeated_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(35, this->_internal_repeated_sint32(i), target);
  }

  // repeated sint64 repeated_sint64 = 36;
  for (int i = 0, n = this->_internal_repeated_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(36, this->_internal_repeated_sint64(i), target);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(37, this->_internal_repeated_fixed32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  for (int i = 0, n = this->_internal_repeated_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(38, this->_internal_repeated_fixed64(i), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  for (int i = 0, n = this->_internal_repeated_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(39, this->_internal_repeated_sfixed32(i), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  for (int i = 0, n = this->_internal_repeated_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(40, this->_internal_repeated_sfixed64(i), target);
  }

  // repeated float repeated_float = 41;
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(41, this->_internal_repeated_float(i), target);
  }

  // repeated double repeated_double = 42;
  for (int i = 0, n = this->_internal_repeated_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_repeated_double(i), target);
  }

  // repeated bool repeated_bool = 43;
  for (int i = 0, n = this->_internal_repeated_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_repeated_bool(i), target);
  }

  // repeated string repeated_string = 44;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.repeated_string");
    target = stream->WriteString(44, s, target);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(45, s, target);
  }

  // repeated group RepeatedGroup = 46 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeatedgroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(46, this->_internal_repeatedgroup(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_nested_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_repeated_nested_message(i), target, stream);
  }

  // repeated .protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_foreign_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, this->_internal_repeated_foreign_message(i), target, stream);
  }

  // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_import_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_repeated_import_message(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  for (int i = 0, n = this->_internal_repeated_nested_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        51, this->_internal_repeated_nested_enum(i), target);
  }

  // repeated .protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
  for (int i = 0, n = this->_internal_repeated_foreign_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        52, this->_internal_repeated_foreign_enum(i), target);
  }

  // repeated .protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
  for (int i = 0, n = this->_internal_repeated_import_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        53, this->_internal_repeated_import_enum(i), target);
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_repeated_string_piece_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string_piece(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.repeated_string_piece");
    target = stream->WriteString(54, s, target);
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  for (int i = 0, n = this->_internal_repeated_cord_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_cord(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.repeated_cord");
    target = stream->WriteString(55, s, target);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_lazy_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, this->_internal_repeated_lazy_message(i), target, stream);
  }

  // optional int32 default_int32 = 61 [default = 41];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_default_int32(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 default_int64 = 62 [default = 42];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(62, this->_internal_default_int64(), target);
  }

  // optional uint32 default_uint32 = 63 [default = 43];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_default_uint32(), target);
  }

  // optional uint64 default_uint64 = 64 [default = 44];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(64, this->_internal_default_uint64(), target);
  }

  // optional sint32 default_sint32 = 65 [default = -45];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(65, this->_internal_default_sint32(), target);
  }

  // optional sint64 default_sint64 = 66 [default = 46];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(66, this->_internal_default_sint64(), target);
  }

  // optional fixed32 default_fixed32 = 67 [default = 47];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(67, this->_internal_default_fixed32(), target);
  }

  // optional fixed64 default_fixed64 = 68 [default = 48];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(68, this->_internal_default_fixed64(), target);
  }

  // optional sfixed32 default_sfixed32 = 69 [default = 49];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(69, this->_internal_default_sfixed32(), target);
  }

  // optional sfixed64 default_sfixed64 = 70 [default = -50];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(70, this->_internal_default_sfixed64(), target);
  }

  // optional float default_float = 71 [default = 51.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(71, this->_internal_default_float(), target);
  }

  // optional double default_double = 72 [default = 52000];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(72, this->_internal_default_double(), target);
  }

  // optional bool default_bool = 73 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(73, this->_internal_default_bool(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string default_string = 74 [default = "hello"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_string().data(), static_cast<int>(this->_internal_default_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.default_string");
    target = stream->WriteStringMaybeAliased(
        74, this->_internal_default_string(), target);
  }

  // optional bytes default_bytes = 75 [default = "world"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        75, this->_internal_default_bytes(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      81, this->_internal_default_nested_enum(), target);
  }

  // optional .protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      82, this->_internal_default_foreign_enum(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      83, this->_internal_default_import_enum(), target);
  }

  // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_string_piece().data(), static_cast<int>(this->_internal_default_string_piece().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.default_string_piece");
    target = stream->WriteStringMaybeAliased(
        84, this->_internal_default_string_piece(), target);
  }

  // optional string default_cord = 85 [default = "123", ctype = CORD];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_cord().data(), static_cast<int>(this->_internal_default_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.default_cord");
    target = stream->WriteStringMaybeAliased(
        85, this->_internal_default_cord(), target);
  }

  switch (oneof_field_case()) {
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(111, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofNestedMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          112, _Internal::oneof_nested_message(this), target, stream);
      break;
    }
    case kOneofString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestAllTypes.oneof_string");
      target = stream->WriteStringMaybeAliased(
          113, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          114, this->_internal_oneof_bytes(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypes)
  return target;
}

size_t TestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sfixed64_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated double repeated_double = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_double_size());
    total_size += data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_bool_size());
    total_size += data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for (int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for (int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      repeated_bytes_.Get(i));
  }

  // repeated group RepeatedGroup = 46 { ... };
  total_size += 4UL * this->_internal_repeatedgroup_size();
  for (const auto& msg : this->repeatedgroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
  total_size += 2UL * this->_internal_repeated_nested_message_size();
  for (const auto& msg : this->repeated_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
  total_size += 2UL * this->_internal_repeated_foreign_message_size();
  for (const auto& msg : this->repeated_foreign_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
  total_size += 2UL * this->_internal_repeated_import_message_size();
  for (const auto& msg : this->repeated_import_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_nested_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_foreign_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_foreign_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_import_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_import_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_piece_.size());
  for (int i = 0, n = repeated_string_piece_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_piece_.Get(i));
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_cord_.size());
  for (int i = 0, n = repeated_cord_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_cord_.Get(i));
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
  total_size += 2UL * this->_internal_repeated_lazy_message_size();
  for (const auto& msg : this->repeated_lazy_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string optional_string = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

    // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string_piece());
    }

    // optional string optional_cord = 25 [ctype = CORD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_cord());
    }

    // optional string default_string = 74 [default = "hello"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_string());
    }

    // optional bytes default_bytes = 75 [default = "world"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_default_bytes());
    }

    // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_string_piece());
    }

    // optional string default_cord = 85 [default = "123", ctype = CORD];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_cord());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional group OptionalGroup = 16 { ... };
    if (cached_has_bits & 0x00000100u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

    // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_nested_message_);
    }

    // optional .protobuf_unittest.ForeignMessage optional_foreign_message = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_foreign_message_);
    }

    // optional .protobuf_unittest_import.ImportMessage optional_import_message = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_import_message_);
    }

    // optional .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_public_import_message_);
    }

    // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_lazy_message_);
    }

    // optional int64 optional_int64 = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_optional_int64());
    }

    // optional int32 optional_int32 = 1;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 optional_uint32 = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_optional_uint32());
    }

    // optional uint64 optional_uint64 = 4;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_optional_uint64());
    }

    // optional sint64 optional_sint64 = 6;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_optional_sint64());
    }

    // optional sint32 optional_sint32 = 5;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_optional_sint32());
    }

    // optional fixed32 optional_fixed32 = 7;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional fixed64 optional_fixed64 = 8;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 optional_sfixed64 = 10;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional sfixed32 optional_sfixed32 = 9;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float optional_float = 11;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 4;
    }

    // optional double optional_double = 12;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 8;
    }

    // optional bool optional_bool = 13;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional .protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_import_enum());
    }

    // optional .protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_nested_enum());
    }

    // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_foreign_enum());
    }

    // optional .protobuf_unittest_import.ImportEnum optional_import_enum = 23;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_import_enum());
    }

    // optional int32 default_int32 = 61 [default = 41];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_default_int32());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 default_int64 = 62 [default = 42];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_default_int64());
    }

    // optional uint64 default_uint64 = 64 [default = 44];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_default_uint64());
    }

    // optional uint32 default_uint32 = 63 [default = 43];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_uint32());
    }

    // optional sint32 default_sint32 = 65 [default = -45];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_default_sint32());
    }

    // optional sint64 default_sint64 = 66 [default = 46];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_default_sint64());
    }

    // optional fixed64 default_fixed64 = 68 [default = 48];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional fixed32 default_fixed32 = 67 [default = 47];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional sfixed32 default_sfixed32 = 69 [default = 49];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional sfixed64 default_sfixed64 = 70 [default = -50];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double default_double = 72 [default = 52000];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional float default_float = 71 [default = 51.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional bool default_bool = 73 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional .protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_nested_enum());
    }

    // optional .protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_foreign_enum());
    }

  }
  switch (oneof_field_case()) {
    // optional uint32 oneof_uint32 = 111;
    case kOneofUint32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // optional .protobuf_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
    case kOneofNestedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_nested_message_);
      break;
    }
    // optional string oneof_string = 113;
    case kOneofString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // optional bytes oneof_bytes = 114;
    case kOneofBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestAllTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestAllTypes)
    MergeFrom(*source);
  }
}

void TestAllTypes::MergeFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeatedgroup_.MergeFrom(from.repeatedgroup_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  repeated_foreign_message_.MergeFrom(from.repeated_foreign_message_);
  repeated_import_message_.MergeFrom(from.repeated_import_message_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
  repeated_foreign_enum_.MergeFrom(from.repeated_foreign_enum_);
  repeated_import_enum_.MergeFrom(from.repeated_import_enum_);
  repeated_string_piece_.MergeFrom(from.repeated_string_piece_);
  repeated_cord_.MergeFrom(from.repeated_cord_);
  repeated_lazy_message_.MergeFrom(from.repeated_lazy_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_optional_string_piece(from._internal_optional_string_piece());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_optional_cord(from._internal_optional_cord());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_default_string(from._internal_default_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_default_bytes(from._internal_default_bytes());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_default_string_piece(from._internal_default_string_piece());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_default_cord(from._internal_default_cord());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestAllTypes_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_optional_nested_message()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_optional_nested_message());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_optional_foreign_message()->::protobuf_unittest::ForeignMessage::MergeFrom(from._internal_optional_foreign_message());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_optional_import_message()->::protobuf_unittest_import::ImportMessage::MergeFrom(from._internal_optional_import_message());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_optional_public_import_message()->::protobuf_unittest_import::PublicImportMessage::MergeFrom(from._internal_optional_public_import_message());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_optional_lazy_message()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_optional_lazy_message());
    }
    if (cached_has_bits & 0x00004000u) {
      optional_int64_ = from.optional_int64_;
    }
    if (cached_has_bits & 0x00008000u) {
      optional_int32_ = from.optional_int32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      optional_uint32_ = from.optional_uint32_;
    }
    if (cached_has_bits & 0x00020000u) {
      optional_uint64_ = from.optional_uint64_;
    }
    if (cached_has_bits & 0x00040000u) {
      optional_sint64_ = from.optional_sint64_;
    }
    if (cached_has_bits & 0x00080000u) {
      optional_sint32_ = from.optional_sint32_;
    }
    if (cached_has_bits & 0x00100000u) {
      optional_fixed32_ = from.optional_fixed32_;
    }
    if (cached_has_bits & 0x00200000u) {
      optional_fixed64_ = from.optional_fixed64_;
    }
    if (cached_has_bits & 0x00400000u) {
      optional_sfixed64_ = from.optional_sfixed64_;
    }
    if (cached_has_bits & 0x00800000u) {
      optional_sfixed32_ = from.optional_sfixed32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      optional_float_ = from.optional_float_;
    }
    if (cached_has_bits & 0x02000000u) {
      optional_double_ = from.optional_double_;
    }
    if (cached_has_bits & 0x04000000u) {
      optional_bool_ = from.optional_bool_;
    }
    if (cached_has_bits & 0x08000000u) {
      default_import_enum_ = from.default_import_enum_;
    }
    if (cached_has_bits & 0x10000000u) {
      optional_nested_enum_ = from.optional_nested_enum_;
    }
    if (cached_has_bits & 0x20000000u) {
      optional_foreign_enum_ = from.optional_foreign_enum_;
    }
    if (cached_has_bits & 0x40000000u) {
      optional_import_enum_ = from.optional_import_enum_;
    }
    if (cached_has_bits & 0x80000000u) {
      default_int32_ = from.default_int32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      default_int64_ = from.default_int64_;
    }
    if (cached_has_bits & 0x00000002u) {
      default_uint64_ = from.default_uint64_;
    }
    if (cached_has_bits & 0x00000004u) {
      default_uint32_ = from.default_uint32_;
    }
    if (cached_has_bits & 0x00000008u) {
      default_sint32_ = from.default_sint32_;
    }
    if (cached_has_bits & 0x00000010u) {
      default_sint64_ = from.default_sint64_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_fixed64_ = from.default_fixed64_;
    }
    if (cached_has_bits & 0x00000040u) {
      default_fixed32_ = from.default_fixed32_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_sfixed32_ = from.default_sfixed32_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      default_sfixed64_ = from.default_sfixed64_;
    }
    if (cached_has_bits & 0x00000200u) {
      default_double_ = from.default_double_;
    }
    if (cached_has_bits & 0x00000400u) {
      default_float_ = from.default_float_;
    }
    if (cached_has_bits & 0x00000800u) {
      default_bool_ = from.default_bool_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_nested_enum_ = from.default_nested_enum_;
    }
    if (cached_has_bits & 0x00002000u) {
      default_foreign_enum_ = from.default_foreign_enum_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
}

void TestAllTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypes::CopyFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes::IsInitialized() const {
  return true;
}

void TestAllTypes::InternalSwap(TestAllTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.InternalSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.InternalSwap(&other->repeated_sfixed64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeatedgroup_.InternalSwap(&other->repeatedgroup_);
  repeated_nested_message_.InternalSwap(&other->repeated_nested_message_);
  repeated_foreign_message_.InternalSwap(&other->repeated_foreign_message_);
  repeated_import_message_.InternalSwap(&other->repeated_import_message_);
  repeated_nested_enum_.InternalSwap(&other->repeated_nested_enum_);
  repeated_foreign_enum_.InternalSwap(&other->repeated_foreign_enum_);
  repeated_import_enum_.InternalSwap(&other->repeated_import_enum_);
  repeated_string_piece_.InternalSwap(&other->repeated_string_piece_);
  repeated_cord_.InternalSwap(&other->repeated_cord_);
  repeated_lazy_message_.InternalSwap(&other->repeated_lazy_message_);
  optional_string_.Swap(&other->optional_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_bytes_.Swap(&other->optional_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_string_piece_.Swap(&other->optional_string_piece_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_cord_.Swap(&other->optional_cord_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  default_string_.Swap(&other->default_string_, &::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_.get(),
    GetArenaNoVirtual());
  default_bytes_.Swap(&other->default_bytes_, &::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_.get(),
    GetArenaNoVirtual());
  default_string_piece_.Swap(&other->default_string_piece_, &::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_.get(),
    GetArenaNoVirtual());
  default_cord_.Swap(&other->default_cord_, &::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_.get(),
    GetArenaNoVirtual());
  swap(optionalgroup_, other->optionalgroup_);
  swap(optional_nested_message_, other->optional_nested_message_);
  swap(optional_foreign_message_, other->optional_foreign_message_);
  swap(optional_import_message_, other->optional_import_message_);
  swap(optional_public_import_message_, other->optional_public_import_message_);
  swap(optional_lazy_message_, other->optional_lazy_message_);
  swap(optional_int64_, other->optional_int64_);
  swap(optional_int32_, other->optional_int32_);
  swap(optional_uint32_, other->optional_uint32_);
  swap(optional_uint64_, other->optional_uint64_);
  swap(optional_sint64_, other->optional_sint64_);
  swap(optional_sint32_, other->optional_sint32_);
  swap(optional_fixed32_, other->optional_fixed32_);
  swap(optional_fixed64_, other->optional_fixed64_);
  swap(optional_sfixed64_, other->optional_sfixed64_);
  swap(optional_sfixed32_, other->optional_sfixed32_);
  swap(optional_float_, other->optional_float_);
  swap(optional_double_, other->optional_double_);
  swap(optional_bool_, other->optional_bool_);
  swap(default_import_enum_, other->default_import_enum_);
  swap(optional_nested_enum_, other->optional_nested_enum_);
  swap(optional_foreign_enum_, other->optional_foreign_enum_);
  swap(optional_import_enum_, other->optional_import_enum_);
  swap(default_int32_, other->default_int32_);
  swap(default_int64_, other->default_int64_);
  swap(default_uint64_, other->default_uint64_);
  swap(default_uint32_, other->default_uint32_);
  swap(default_sint32_, other->default_sint32_);
  swap(default_sint64_, other->default_sint64_);
  swap(default_fixed64_, other->default_fixed64_);
  swap(default_fixed32_, other->default_fixed32_);
  swap(default_sfixed32_, other->default_sfixed32_);
  swap(default_sfixed64_, other->default_sfixed64_);
  swap(default_double_, other->default_double_);
  swap(default_float_, other->default_float_);
  swap(default_bool_, other->default_bool_);
  swap(default_nested_enum_, other->default_nested_enum_);
  swap(default_foreign_enum_, other->default_foreign_enum_);
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NestedTestAllTypes::InitAsDefaultInstance() {
  ::protobuf_unittest::_NestedTestAllTypes_default_instance_._instance.get_mutable()->child_ = const_cast< ::protobuf_unittest::NestedTestAllTypes*>(
      ::protobuf_unittest::NestedTestAllTypes::internal_default_instance());
  ::protobuf_unittest::_NestedTestAllTypes_default_instance_._instance.get_mutable()->payload_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
}
class NestedTestAllTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<NestedTestAllTypes>()._has_bits_);
  static const ::protobuf_unittest::NestedTestAllTypes& child(const NestedTestAllTypes* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypes& payload(const NestedTestAllTypes* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::NestedTestAllTypes&
NestedTestAllTypes::_Internal::child(const NestedTestAllTypes* msg) {
  return *msg->child_;
}
const ::protobuf_unittest::TestAllTypes&
NestedTestAllTypes::_Internal::payload(const NestedTestAllTypes* msg) {
  return *msg->payload_;
}
void NestedTestAllTypes::unsafe_arena_set_allocated_child(
    ::protobuf_unittest::NestedTestAllTypes* child) {
  if (GetArenaNoVirtual() == nullptr) {
    delete child_;
  }
  child_ = child;
  if (child) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.NestedTestAllTypes.child)
}
void NestedTestAllTypes::unsafe_arena_set_allocated_payload(
    ::protobuf_unittest::TestAllTypes* payload) {
  if (GetArenaNoVirtual() == nullptr) {
    delete payload_;
  }
  payload_ = payload;
  if (payload) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.NestedTestAllTypes.payload)
}
NestedTestAllTypes::NestedTestAllTypes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.NestedTestAllTypes)
}
NestedTestAllTypes::NestedTestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeated_child_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.NestedTestAllTypes)
}
NestedTestAllTypes::NestedTestAllTypes(const NestedTestAllTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_child_(from.repeated_child_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::protobuf_unittest::NestedTestAllTypes(*from.child_);
  } else {
    child_ = nullptr;
  }
  if (from._internal_has_payload()) {
    payload_ = new ::protobuf_unittest::TestAllTypes(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.NestedTestAllTypes)
}

void NestedTestAllTypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&child_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payload_) -
      reinterpret_cast<char*>(&child_)) + sizeof(payload_));
}

NestedTestAllTypes::~NestedTestAllTypes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.NestedTestAllTypes)
  SharedDtor();
}

void NestedTestAllTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete child_;
  if (this != internal_default_instance()) delete payload_;
}

void NestedTestAllTypes::ArenaDtor(void* object) {
  NestedTestAllTypes* _this = reinterpret_cast< NestedTestAllTypes* >(object);
  (void)_this;
}
void NestedTestAllTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NestedTestAllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NestedTestAllTypes& NestedTestAllTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NestedTestAllTypes_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void NestedTestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.NestedTestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_child_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(child_ != nullptr);
      child_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(payload_ != nullptr);
      payload_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NestedTestAllTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.NestedTestAllTypes child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.NestedTestAllTypes repeated_child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NestedTestAllTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.NestedTestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.NestedTestAllTypes child = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::child(this), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  // repeated .protobuf_unittest.NestedTestAllTypes repeated_child = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_child_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_repeated_child(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.NestedTestAllTypes)
  return target;
}

size_t NestedTestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.NestedTestAllTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.NestedTestAllTypes repeated_child = 3;
  total_size += 1UL * this->_internal_repeated_child_size();
  for (const auto& msg : this->repeated_child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.NestedTestAllTypes child = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_);
    }

    // optional .protobuf_unittest.TestAllTypes payload = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NestedTestAllTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.NestedTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const NestedTestAllTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NestedTestAllTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.NestedTestAllTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.NestedTestAllTypes)
    MergeFrom(*source);
  }
}

void NestedTestAllTypes::MergeFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.NestedTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_child_.MergeFrom(from.repeated_child_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_child()->::protobuf_unittest::NestedTestAllTypes::MergeFrom(from._internal_child());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_payload()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_payload());
    }
  }
}

void NestedTestAllTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedTestAllTypes::CopyFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedTestAllTypes::IsInitialized() const {
  return true;
}

void NestedTestAllTypes::InternalSwap(NestedTestAllTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_child_.InternalSwap(&other->repeated_child_);
  swap(child_, other->child_);
  swap(payload_, other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedTestAllTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestDeprecatedFields::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestDeprecatedFields_default_instance_.deprecated_int32_in_oneof_ = 0;
}
class TestDeprecatedFields::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDeprecatedFields>()._has_bits_);
  static void set_has_deprecated_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestDeprecatedFields::TestDeprecatedFields()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestDeprecatedFields)
}
TestDeprecatedFields::TestDeprecatedFields(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDeprecatedFields)
}
TestDeprecatedFields::TestDeprecatedFields(const TestDeprecatedFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deprecated_int32_ = from.deprecated_int32_;
  clear_has_oneof_fields();
  switch (from.oneof_fields_case()) {
    case kDeprecatedInt32InOneof: {
      _internal_set_deprecated_int32_in_oneof(from._internal_deprecated_int32_in_oneof());
      break;
    }
    case ONEOF_FIELDS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDeprecatedFields)
}

void TestDeprecatedFields::SharedCtor() {
  deprecated_int32_ = 0;
  clear_has_oneof_fields();
}

TestDeprecatedFields::~TestDeprecatedFields() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDeprecatedFields)
  SharedDtor();
}

void TestDeprecatedFields::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_oneof_fields()) {
    clear_oneof_fields();
  }
}

void TestDeprecatedFields::ArenaDtor(void* object) {
  TestDeprecatedFields* _this = reinterpret_cast< TestDeprecatedFields* >(object);
  (void)_this;
}
void TestDeprecatedFields::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestDeprecatedFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestDeprecatedFields& TestDeprecatedFields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestDeprecatedFields_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestDeprecatedFields::clear_oneof_fields() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestDeprecatedFields)
  switch (oneof_fields_case()) {
    case kDeprecatedInt32InOneof: {
      // No need to clear
      break;
    }
    case ONEOF_FIELDS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELDS_NOT_SET;
}


void TestDeprecatedFields::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDeprecatedFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_int32_ = 0;
  clear_oneof_fields();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestDeprecatedFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 deprecated_int32 = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_deprecated_int32(&has_bits);
          deprecated_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deprecated_int32_in_oneof = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_deprecated_int32_in_oneof(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestDeprecatedFields::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDeprecatedFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 deprecated_int32 = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_deprecated_int32(), target);
  }

  // optional int32 deprecated_int32_in_oneof = 2 [deprecated = true];
  if (_internal_has_deprecated_int32_in_oneof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_deprecated_int32_in_oneof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDeprecatedFields)
  return target;
}

size_t TestDeprecatedFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDeprecatedFields)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 deprecated_int32 = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deprecated_int32());
  }

  switch (oneof_fields_case()) {
    // optional int32 deprecated_int32_in_oneof = 2 [deprecated = true];
    case kDeprecatedInt32InOneof: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_deprecated_int32_in_oneof());
      break;
    }
    case ONEOF_FIELDS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDeprecatedFields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestDeprecatedFields)
  GOOGLE_DCHECK_NE(&from, this);
  const TestDeprecatedFields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestDeprecatedFields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestDeprecatedFields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestDeprecatedFields)
    MergeFrom(*source);
  }
}

void TestDeprecatedFields::MergeFrom(const TestDeprecatedFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDeprecatedFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_deprecated_int32()) {
    _internal_set_deprecated_int32(from._internal_deprecated_int32());
  }
  switch (from.oneof_fields_case()) {
    case kDeprecatedInt32InOneof: {
      _internal_set_deprecated_int32_in_oneof(from._internal_deprecated_int32_in_oneof());
      break;
    }
    case ONEOF_FIELDS_NOT_SET: {
      break;
    }
  }
}

void TestDeprecatedFields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestDeprecatedFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDeprecatedFields::CopyFrom(const TestDeprecatedFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDeprecatedFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDeprecatedFields::IsInitialized() const {
  return true;
}

void TestDeprecatedFields::InternalSwap(TestDeprecatedFields* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(deprecated_int32_, other->deprecated_int32_);
  swap(oneof_fields_, other->oneof_fields_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDeprecatedFields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestDeprecatedMessage::InitAsDefaultInstance() {
}
class TestDeprecatedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDeprecatedMessage>()._has_bits_);
};

TestDeprecatedMessage::TestDeprecatedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestDeprecatedMessage)
}
TestDeprecatedMessage::TestDeprecatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDeprecatedMessage)
}
TestDeprecatedMessage::TestDeprecatedMessage(const TestDeprecatedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDeprecatedMessage)
}

void TestDeprecatedMessage::SharedCtor() {
}

TestDeprecatedMessage::~TestDeprecatedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDeprecatedMessage)
  SharedDtor();
}

void TestDeprecatedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestDeprecatedMessage::ArenaDtor(void* object) {
  TestDeprecatedMessage* _this = reinterpret_cast< TestDeprecatedMessage* >(object);
  (void)_this;
}
void TestDeprecatedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestDeprecatedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestDeprecatedMessage& TestDeprecatedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestDeprecatedMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestDeprecatedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDeprecatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestDeprecatedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestDeprecatedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDeprecatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDeprecatedMessage)
  return target;
}

size_t TestDeprecatedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDeprecatedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDeprecatedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestDeprecatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestDeprecatedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestDeprecatedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestDeprecatedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestDeprecatedMessage)
    MergeFrom(*source);
  }
}

void TestDeprecatedMessage::MergeFrom(const TestDeprecatedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDeprecatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestDeprecatedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestDeprecatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDeprecatedMessage::CopyFrom(const TestDeprecatedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDeprecatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDeprecatedMessage::IsInitialized() const {
  return true;
}

void TestDeprecatedMessage::InternalSwap(TestDeprecatedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDeprecatedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForeignMessage::InitAsDefaultInstance() {
}
class ForeignMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ForeignMessage>()._has_bits_);
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ForeignMessage::ForeignMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.ForeignMessage)
}
ForeignMessage::ForeignMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.ForeignMessage)
}
ForeignMessage::ForeignMessage(const ForeignMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&c_, &from.c_,
    static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&c_)) + sizeof(d_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.ForeignMessage)
}

void ForeignMessage::SharedCtor() {
  ::memset(&c_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&c_)) + sizeof(d_));
}

ForeignMessage::~ForeignMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.ForeignMessage)
  SharedDtor();
}

void ForeignMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ForeignMessage::ArenaDtor(void* object) {
  ForeignMessage* _this = reinterpret_cast< ForeignMessage* >(object);
  (void)_this;
}
void ForeignMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForeignMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForeignMessage& ForeignMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForeignMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void ForeignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.ForeignMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&c_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&d_) -
        reinterpret_cast<char*>(&c_)) + sizeof(d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ForeignMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_d(&has_bits);
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForeignMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.ForeignMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
  }

  // optional int32 d = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.ForeignMessage)
  return target;
}

size_t ForeignMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.ForeignMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 c = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_c());
    }

    // optional int32 d = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_d());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForeignMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ForeignMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForeignMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.ForeignMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.ForeignMessage)
    MergeFrom(*source);
  }
}

void ForeignMessage::MergeFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000002u) {
      d_ = from.d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ForeignMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForeignMessage::CopyFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessage::IsInitialized() const {
  return true;
}

void ForeignMessage::InternalSwap(ForeignMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(c_, other->c_);
  swap(d_, other->d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForeignMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestReservedFields::InitAsDefaultInstance() {
}
class TestReservedFields::_Internal {
 public:
  using HasBits = decltype(std::declval<TestReservedFields>()._has_bits_);
};

TestReservedFields::TestReservedFields()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestReservedFields)
}
TestReservedFields::TestReservedFields(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestReservedFields)
}
TestReservedFields::TestReservedFields(const TestReservedFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestReservedFields)
}

void TestReservedFields::SharedCtor() {
}

TestReservedFields::~TestReservedFields() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestReservedFields)
  SharedDtor();
}

void TestReservedFields::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestReservedFields::ArenaDtor(void* object) {
  TestReservedFields* _this = reinterpret_cast< TestReservedFields* >(object);
  (void)_this;
}
void TestReservedFields::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestReservedFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestReservedFields& TestReservedFields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestReservedFields_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestReservedFields::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestReservedFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestReservedFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestReservedFields::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestReservedFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestReservedFields)
  return target;
}

size_t TestReservedFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestReservedFields)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestReservedFields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestReservedFields)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReservedFields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestReservedFields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestReservedFields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestReservedFields)
    MergeFrom(*source);
  }
}

void TestReservedFields::MergeFrom(const TestReservedFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestReservedFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestReservedFields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestReservedFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReservedFields::CopyFrom(const TestReservedFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestReservedFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReservedFields::IsInitialized() const {
  return true;
}

void TestReservedFields::InternalSwap(TestReservedFields* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestReservedFields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestAllExtensions::InitAsDefaultInstance() {
}
class TestAllExtensions::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllExtensions>()._has_bits_);
};

TestAllExtensions::TestAllExtensions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestAllExtensions)
}
TestAllExtensions::TestAllExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllExtensions)
}
TestAllExtensions::TestAllExtensions(const TestAllExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllExtensions)
}

void TestAllExtensions::SharedCtor() {
}

TestAllExtensions::~TestAllExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllExtensions)
  SharedDtor();
}

void TestAllExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestAllExtensions::ArenaDtor(void* object) {
  TestAllExtensions* _this = reinterpret_cast< TestAllExtensions* >(object);
  (void)_this;
}
void TestAllExtensions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllExtensions& TestAllExtensions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllExtensions_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestAllExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestAllExtensions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllExtensions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
      1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllExtensions)
  return target;
}

size_t TestAllExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllExtensions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllExtensions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestAllExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllExtensions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllExtensions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestAllExtensions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestAllExtensions)
    MergeFrom(*source);
  }
}

void TestAllExtensions::MergeFrom(const TestAllExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestAllExtensions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestAllExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllExtensions::CopyFrom(const TestAllExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllExtensions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestAllExtensions::InternalSwap(TestAllExtensions* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllExtensions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionalGroup_extension::InitAsDefaultInstance() {
}
class OptionalGroup_extension::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionalGroup_extension>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OptionalGroup_extension::OptionalGroup_extension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.OptionalGroup_extension)
}
OptionalGroup_extension::OptionalGroup_extension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.OptionalGroup_extension)
}
OptionalGroup_extension::OptionalGroup_extension(const OptionalGroup_extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.OptionalGroup_extension)
}

void OptionalGroup_extension::SharedCtor() {
  a_ = 0;
}

OptionalGroup_extension::~OptionalGroup_extension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.OptionalGroup_extension)
  SharedDtor();
}

void OptionalGroup_extension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void OptionalGroup_extension::ArenaDtor(void* object) {
  OptionalGroup_extension* _this = reinterpret_cast< OptionalGroup_extension* >(object);
  (void)_this;
}
void OptionalGroup_extension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptionalGroup_extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionalGroup_extension& OptionalGroup_extension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void OptionalGroup_extension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.OptionalGroup_extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OptionalGroup_extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionalGroup_extension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.OptionalGroup_extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.OptionalGroup_extension)
  return target;
}

size_t OptionalGroup_extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.OptionalGroup_extension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionalGroup_extension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.OptionalGroup_extension)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionalGroup_extension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionalGroup_extension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.OptionalGroup_extension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.OptionalGroup_extension)
    MergeFrom(*source);
  }
}

void OptionalGroup_extension::MergeFrom(const OptionalGroup_extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.OptionalGroup_extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void OptionalGroup_extension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.OptionalGroup_extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalGroup_extension::CopyFrom(const OptionalGroup_extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.OptionalGroup_extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalGroup_extension::IsInitialized() const {
  return true;
}

void OptionalGroup_extension::InternalSwap(OptionalGroup_extension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalGroup_extension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepeatedGroup_extension::InitAsDefaultInstance() {
}
class RepeatedGroup_extension::_Internal {
 public:
  using HasBits = decltype(std::declval<RepeatedGroup_extension>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RepeatedGroup_extension::RepeatedGroup_extension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.RepeatedGroup_extension)
}
RepeatedGroup_extension::RepeatedGroup_extension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.RepeatedGroup_extension)
}
RepeatedGroup_extension::RepeatedGroup_extension(const RepeatedGroup_extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.RepeatedGroup_extension)
}

void RepeatedGroup_extension::SharedCtor() {
  a_ = 0;
}

RepeatedGroup_extension::~RepeatedGroup_extension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.RepeatedGroup_extension)
  SharedDtor();
}

void RepeatedGroup_extension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void RepeatedGroup_extension::ArenaDtor(void* object) {
  RepeatedGroup_extension* _this = reinterpret_cast< RepeatedGroup_extension* >(object);
  (void)_this;
}
void RepeatedGroup_extension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RepeatedGroup_extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedGroup_extension& RepeatedGroup_extension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedGroup_extension_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void RepeatedGroup_extension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.RepeatedGroup_extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RepeatedGroup_extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedGroup_extension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.RepeatedGroup_extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.RepeatedGroup_extension)
  return target;
}

size_t RepeatedGroup_extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.RepeatedGroup_extension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 47;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedGroup_extension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.RepeatedGroup_extension)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedGroup_extension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedGroup_extension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.RepeatedGroup_extension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.RepeatedGroup_extension)
    MergeFrom(*source);
  }
}

void RepeatedGroup_extension::MergeFrom(const RepeatedGroup_extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.RepeatedGroup_extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void RepeatedGroup_extension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.RepeatedGroup_extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedGroup_extension::CopyFrom(const RepeatedGroup_extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.RepeatedGroup_extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedGroup_extension::IsInitialized() const {
  return true;
}

void RepeatedGroup_extension::InternalSwap(RepeatedGroup_extension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedGroup_extension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestGroup_OptionalGroup::InitAsDefaultInstance() {
}
class TestGroup_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestGroup_OptionalGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestGroup_OptionalGroup::TestGroup_OptionalGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestGroup.OptionalGroup)
}
TestGroup_OptionalGroup::TestGroup_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestGroup.OptionalGroup)
}
TestGroup_OptionalGroup::TestGroup_OptionalGroup(const TestGroup_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestGroup.OptionalGroup)
}

void TestGroup_OptionalGroup::SharedCtor() {
  a_ = 0;
}

TestGroup_OptionalGroup::~TestGroup_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestGroup.OptionalGroup)
  SharedDtor();
}

void TestGroup_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestGroup_OptionalGroup::ArenaDtor(void* object) {
  TestGroup_OptionalGroup* _this = reinterpret_cast< TestGroup_OptionalGroup* >(object);
  (void)_this;
}
void TestGroup_OptionalGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestGroup_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestGroup_OptionalGroup& TestGroup_OptionalGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestGroup_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestGroup_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestGroup.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestGroup_OptionalGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestGroup_OptionalGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestGroup.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestGroup.OptionalGroup)
  return target;
}

size_t TestGroup_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestGroup.OptionalGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestGroup_OptionalGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestGroup.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestGroup_OptionalGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestGroup_OptionalGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestGroup.OptionalGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestGroup.OptionalGroup)
    MergeFrom(*source);
  }
}

void TestGroup_OptionalGroup::MergeFrom(const TestGroup_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestGroup.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void TestGroup_OptionalGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestGroup.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGroup_OptionalGroup::CopyFrom(const TestGroup_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestGroup.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGroup_OptionalGroup::IsInitialized() const {
  return true;
}

void TestGroup_OptionalGroup::InternalSwap(TestGroup_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGroup_OptionalGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestGroup::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestGroup_default_instance_._instance.get_mutable()->optionalgroup_ = const_cast< ::protobuf_unittest::TestGroup_OptionalGroup*>(
      ::protobuf_unittest::TestGroup_OptionalGroup::internal_default_instance());
}
class TestGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestGroup>()._has_bits_);
  static const ::protobuf_unittest::TestGroup_OptionalGroup& optionalgroup(const TestGroup* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_foreign_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestGroup_OptionalGroup&
TestGroup::_Internal::optionalgroup(const TestGroup* msg) {
  return *msg->optionalgroup_;
}
void TestGroup::unsafe_arena_set_allocated_optionalgroup(
    ::protobuf_unittest::TestGroup_OptionalGroup* optionalgroup) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optionalgroup_;
  }
  optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestGroup.optionalgroup)
}
TestGroup::TestGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestGroup)
}
TestGroup::TestGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestGroup)
}
TestGroup::TestGroup(const TestGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestGroup_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  optional_foreign_enum_ = from.optional_foreign_enum_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestGroup)
}

void TestGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestGroup_google_2fprotobuf_2funittest_2eproto.base);
  optionalgroup_ = nullptr;
  optional_foreign_enum_ = 4;
}

TestGroup::~TestGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestGroup)
  SharedDtor();
}

void TestGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete optionalgroup_;
}

void TestGroup::ArenaDtor(void* object) {
  TestGroup* _this = reinterpret_cast< TestGroup* >(object);
  (void)_this;
}
void TestGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestGroup& TestGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
    optional_foreign_enum_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional group OptionalGroup = 16 { ... };
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 131)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 131);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_optional_foreign_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional group OptionalGroup = 16 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        16, _Internal::optionalgroup(this), target, stream);
  }

  // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_optional_foreign_enum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestGroup)
  return target;
}

size_t TestGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional group OptionalGroup = 16 { ... };
    if (cached_has_bits & 0x00000001u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

    // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_foreign_enum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestGroup)
    MergeFrom(*source);
  }
}

void TestGroup::MergeFrom(const TestGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestGroup_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000002u) {
      optional_foreign_enum_ = from.optional_foreign_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGroup::CopyFrom(const TestGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGroup::IsInitialized() const {
  return true;
}

void TestGroup::InternalSwap(TestGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(optionalgroup_, other->optionalgroup_);
  swap(optional_foreign_enum_, other->optional_foreign_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestGroupExtension::InitAsDefaultInstance() {
}
class TestGroupExtension::_Internal {
 public:
  using HasBits = decltype(std::declval<TestGroupExtension>()._has_bits_);
};

TestGroupExtension::TestGroupExtension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestGroupExtension)
}
TestGroupExtension::TestGroupExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestGroupExtension)
}
TestGroupExtension::TestGroupExtension(const TestGroupExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestGroupExtension)
}

void TestGroupExtension::SharedCtor() {
}

TestGroupExtension::~TestGroupExtension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestGroupExtension)
  SharedDtor();
}

void TestGroupExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestGroupExtension::ArenaDtor(void* object) {
  TestGroupExtension* _this = reinterpret_cast< TestGroupExtension* >(object);
  (void)_this;
}
void TestGroupExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestGroupExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestGroupExtension& TestGroupExtension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestGroupExtension_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestGroupExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestGroupExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestGroupExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestGroupExtension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestGroupExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
      1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestGroupExtension)
  return target;
}

size_t TestGroupExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestGroupExtension)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestGroupExtension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestGroupExtension)
  GOOGLE_DCHECK_NE(&from, this);
  const TestGroupExtension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestGroupExtension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestGroupExtension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestGroupExtension)
    MergeFrom(*source);
  }
}

void TestGroupExtension::MergeFrom(const TestGroupExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestGroupExtension)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestGroupExtension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestGroupExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGroupExtension::CopyFrom(const TestGroupExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestGroupExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGroupExtension::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestGroupExtension::InternalSwap(TestGroupExtension* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGroupExtension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestNestedExtension_OptionalGroup_extension::InitAsDefaultInstance() {
}
class TestNestedExtension_OptionalGroup_extension::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedExtension_OptionalGroup_extension>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestNestedExtension_OptionalGroup_extension::TestNestedExtension_OptionalGroup_extension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
}
TestNestedExtension_OptionalGroup_extension::TestNestedExtension_OptionalGroup_extension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
}
TestNestedExtension_OptionalGroup_extension::TestNestedExtension_OptionalGroup_extension(const TestNestedExtension_OptionalGroup_extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
}

void TestNestedExtension_OptionalGroup_extension::SharedCtor() {
  a_ = 0;
}

TestNestedExtension_OptionalGroup_extension::~TestNestedExtension_OptionalGroup_extension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  SharedDtor();
}

void TestNestedExtension_OptionalGroup_extension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestNestedExtension_OptionalGroup_extension::ArenaDtor(void* object) {
  TestNestedExtension_OptionalGroup_extension* _this = reinterpret_cast< TestNestedExtension_OptionalGroup_extension* >(object);
  (void)_this;
}
void TestNestedExtension_OptionalGroup_extension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestNestedExtension_OptionalGroup_extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestNestedExtension_OptionalGroup_extension& TestNestedExtension_OptionalGroup_extension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestNestedExtension_OptionalGroup_extension_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestNestedExtension_OptionalGroup_extension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestNestedExtension_OptionalGroup_extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestNestedExtension_OptionalGroup_extension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  return target;
}

size_t TestNestedExtension_OptionalGroup_extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestNestedExtension_OptionalGroup_extension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  GOOGLE_DCHECK_NE(&from, this);
  const TestNestedExtension_OptionalGroup_extension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestNestedExtension_OptionalGroup_extension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
    MergeFrom(*source);
  }
}

void TestNestedExtension_OptionalGroup_extension::MergeFrom(const TestNestedExtension_OptionalGroup_extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void TestNestedExtension_OptionalGroup_extension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNestedExtension_OptionalGroup_extension::CopyFrom(const TestNestedExtension_OptionalGroup_extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedExtension_OptionalGroup_extension::IsInitialized() const {
  return true;
}

void TestNestedExtension_OptionalGroup_extension::InternalSwap(TestNestedExtension_OptionalGroup_extension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedExtension_OptionalGroup_extension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestNestedExtension::InitAsDefaultInstance() {
}
class TestNestedExtension::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedExtension>()._has_bits_);
};

TestNestedExtension::TestNestedExtension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestNestedExtension)
}
TestNestedExtension::TestNestedExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedExtension)
}
TestNestedExtension::TestNestedExtension(const TestNestedExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedExtension)
}

void TestNestedExtension::SharedCtor() {
}

TestNestedExtension::~TestNestedExtension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedExtension)
  SharedDtor();
}

void TestNestedExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestNestedExtension::ArenaDtor(void* object) {
  TestNestedExtension* _this = reinterpret_cast< TestNestedExtension* >(object);
  (void)_this;
}
void TestNestedExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestNestedExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestNestedExtension& TestNestedExtension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestNestedExtension_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestNestedExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestNestedExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestNestedExtension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedExtension)
  return target;
}

size_t TestNestedExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedExtension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestNestedExtension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestNestedExtension)
  GOOGLE_DCHECK_NE(&from, this);
  const TestNestedExtension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestNestedExtension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestNestedExtension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestNestedExtension)
    MergeFrom(*source);
  }
}

void TestNestedExtension::MergeFrom(const TestNestedExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedExtension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestNestedExtension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestNestedExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNestedExtension::CopyFrom(const TestNestedExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedExtension::IsInitialized() const {
  return true;
}

void TestNestedExtension::InternalSwap(TestNestedExtension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedExtension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRequired::InitAsDefaultInstance() {
}
class TestRequired::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequired>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dummy2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dummy4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dummy5(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dummy6(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dummy7(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dummy8(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dummy9(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dummy10(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dummy11(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_dummy12(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dummy13(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_dummy14(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dummy15(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dummy16(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_dummy17(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_dummy18(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_dummy19(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_dummy20(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_dummy21(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_dummy22(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_dummy23(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_dummy24(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_dummy25(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_dummy26(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_dummy27(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_dummy28(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_dummy29(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_dummy30(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_dummy31(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_dummy32(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
};

TestRequired::TestRequired()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestRequired)
}
TestRequired::TestRequired(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequired)
}
TestRequired::TestRequired(const TestRequired& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequired)
}

void TestRequired::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
}

TestRequired::~TestRequired() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequired)
  SharedDtor();
}

void TestRequired::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestRequired::ArenaDtor(void* object) {
  TestRequired* _this = reinterpret_cast< TestRequired* >(object);
  (void)_this;
}
void TestRequired::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRequired::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRequired& TestRequired::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRequired_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestRequired::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequired)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy8_) -
        reinterpret_cast<char*>(&a_)) + sizeof(dummy8_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&dummy9_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy16_) -
        reinterpret_cast<char*>(&dummy9_)) + sizeof(dummy16_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&dummy17_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy24_) -
        reinterpret_cast<char*>(&dummy17_)) + sizeof(dummy24_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&dummy25_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy32_) -
        reinterpret_cast<char*>(&dummy25_)) + sizeof(dummy32_));
  }
  c_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestRequired::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a(&_has_bits_);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dummy2(&_has_bits_);
          dummy2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_b(&_has_bits_);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dummy4(&_has_bits_);
          dummy4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dummy5(&_has_bits_);
          dummy5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dummy6(&_has_bits_);
          dummy6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_dummy7(&_has_bits_);
          dummy7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_dummy8(&_has_bits_);
          dummy8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy9 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_dummy9(&_has_bits_);
          dummy9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_dummy10(&_has_bits_);
          dummy10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy11 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_dummy11(&_has_bits_);
          dummy11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy12 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_dummy12(&_has_bits_);
          dummy12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy13 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_dummy13(&_has_bits_);
          dummy13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy14 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_dummy14(&_has_bits_);
          dummy14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy15 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_dummy15(&_has_bits_);
          dummy15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy16 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dummy16(&_has_bits_);
          dummy16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy17 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_dummy17(&_has_bits_);
          dummy17_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy18 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_dummy18(&_has_bits_);
          dummy18_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy19 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_dummy19(&_has_bits_);
          dummy19_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy20 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_dummy20(&_has_bits_);
          dummy20_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy21 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_dummy21(&_has_bits_);
          dummy21_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy22 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_dummy22(&_has_bits_);
          dummy22_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy23 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_dummy23(&_has_bits_);
          dummy23_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy24 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_dummy24(&_has_bits_);
          dummy24_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy25 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_dummy25(&_has_bits_);
          dummy25_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy26 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_dummy26(&_has_bits_);
          dummy26_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy27 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_dummy27(&_has_bits_);
          dummy27_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy28 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_dummy28(&_has_bits_);
          dummy28_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy29 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_dummy29(&_has_bits_);
          dummy29_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy30 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_dummy30(&_has_bits_);
          dummy30_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy31 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_dummy31(&_has_bits_);
          dummy31_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dummy32 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_dummy32(&_has_bits_);
          dummy32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 c = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_c(&_has_bits_);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRequired::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequired)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional int32 dummy2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dummy2(), target);
  }

  // required int32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  // optional int32 dummy4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dummy4(), target);
  }

  // optional int32 dummy5 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_dummy5(), target);
  }

  // optional int32 dummy6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_dummy6(), target);
  }

  // optional int32 dummy7 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_dummy7(), target);
  }

  // optional int32 dummy8 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dummy8(), target);
  }

  // optional int32 dummy9 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_dummy9(), target);
  }

  // optional int32 dummy10 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_dummy10(), target);
  }

  // optional int32 dummy11 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_dummy11(), target);
  }

  // optional int32 dummy12 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_dummy12(), target);
  }

  // optional int32 dummy13 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_dummy13(), target);
  }

  // optional int32 dummy14 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_dummy14(), target);
  }

  // optional int32 dummy15 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_dummy15(), target);
  }

  // optional int32 dummy16 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_dummy16(), target);
  }

  // optional int32 dummy17 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_dummy17(), target);
  }

  // optional int32 dummy18 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_dummy18(), target);
  }

  // optional int32 dummy19 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_dummy19(), target);
  }

  // optional int32 dummy20 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_dummy20(), target);
  }

  // optional int32 dummy21 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_dummy21(), target);
  }

  // optional int32 dummy22 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_dummy22(), target);
  }

  // optional int32 dummy23 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_dummy23(), target);
  }

  // optional int32 dummy24 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_dummy24(), target);
  }

  // optional int32 dummy25 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_dummy25(), target);
  }

  // optional int32 dummy26 = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_dummy26(), target);
  }

  // optional int32 dummy27 = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_dummy27(), target);
  }

  // optional int32 dummy28 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_dummy28(), target);
  }

  // optional int32 dummy29 = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_dummy29(), target);
  }

  // optional int32 dummy30 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_dummy30(), target);
  }

  // optional int32 dummy31 = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_dummy31(), target);
  }

  // optional int32 dummy32 = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_dummy32(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 c = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequired)
  return target;
}

size_t TestRequired::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_unittest.TestRequired)
  size_t total_size = 0;

  if (_internal_has_a()) {
    // required int32 a = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (_internal_has_b()) {
    // required int32 b = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  if (_internal_has_c()) {
    // required int32 c = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_c());
  }

  return total_size;
}
size_t TestRequired::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequired)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0x00000005) ^ 0x00000005)
       | ((_has_bits_[1] & 0x00000001) ^ 0x00000001)) == 0) {  // All required fields are present.
    // required int32 a = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());

    // required int32 b = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());

    // required int32 c = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_c());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy2 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dummy2());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional int32 dummy4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy4());
    }

    // optional int32 dummy5 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy5());
    }

    // optional int32 dummy6 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy6());
    }

    // optional int32 dummy7 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy7());
    }

    // optional int32 dummy8 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy8());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 dummy9 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy9());
    }

    // optional int32 dummy10 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy10());
    }

    // optional int32 dummy11 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy11());
    }

    // optional int32 dummy12 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy12());
    }

    // optional int32 dummy13 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy13());
    }

    // optional int32 dummy14 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy14());
    }

    // optional int32 dummy15 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy15());
    }

    // optional int32 dummy16 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy16());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 dummy17 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy17());
    }

    // optional int32 dummy18 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy18());
    }

    // optional int32 dummy19 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy19());
    }

    // optional int32 dummy20 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy20());
    }

    // optional int32 dummy21 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy21());
    }

    // optional int32 dummy22 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy22());
    }

    // optional int32 dummy23 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy23());
    }

    // optional int32 dummy24 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy24());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 dummy25 = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy25());
    }

    // optional int32 dummy26 = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy26());
    }

    // optional int32 dummy27 = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy27());
    }

    // optional int32 dummy28 = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy28());
    }

    // optional int32 dummy29 = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy29());
    }

    // optional int32 dummy30 = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy30());
    }

    // optional int32 dummy31 = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy31());
    }

    // optional int32 dummy32 = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy32());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequired::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestRequired)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequired* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRequired>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestRequired)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestRequired)
    MergeFrom(*source);
  }
}

void TestRequired::MergeFrom(const TestRequired& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequired)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      dummy2_ = from.dummy2_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      dummy4_ = from.dummy4_;
    }
    if (cached_has_bits & 0x00000010u) {
      dummy5_ = from.dummy5_;
    }
    if (cached_has_bits & 0x00000020u) {
      dummy6_ = from.dummy6_;
    }
    if (cached_has_bits & 0x00000040u) {
      dummy7_ = from.dummy7_;
    }
    if (cached_has_bits & 0x00000080u) {
      dummy8_ = from.dummy8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      dummy9_ = from.dummy9_;
    }
    if (cached_has_bits & 0x00000200u) {
      dummy10_ = from.dummy10_;
    }
    if (cached_has_bits & 0x00000400u) {
      dummy11_ = from.dummy11_;
    }
    if (cached_has_bits & 0x00000800u) {
      dummy12_ = from.dummy12_;
    }
    if (cached_has_bits & 0x00001000u) {
      dummy13_ = from.dummy13_;
    }
    if (cached_has_bits & 0x00002000u) {
      dummy14_ = from.dummy14_;
    }
    if (cached_has_bits & 0x00004000u) {
      dummy15_ = from.dummy15_;
    }
    if (cached_has_bits & 0x00008000u) {
      dummy16_ = from.dummy16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      dummy17_ = from.dummy17_;
    }
    if (cached_has_bits & 0x00020000u) {
      dummy18_ = from.dummy18_;
    }
    if (cached_has_bits & 0x00040000u) {
      dummy19_ = from.dummy19_;
    }
    if (cached_has_bits & 0x00080000u) {
      dummy20_ = from.dummy20_;
    }
    if (cached_has_bits & 0x00100000u) {
      dummy21_ = from.dummy21_;
    }
    if (cached_has_bits & 0x00200000u) {
      dummy22_ = from.dummy22_;
    }
    if (cached_has_bits & 0x00400000u) {
      dummy23_ = from.dummy23_;
    }
    if (cached_has_bits & 0x00800000u) {
      dummy24_ = from.dummy24_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      dummy25_ = from.dummy25_;
    }
    if (cached_has_bits & 0x02000000u) {
      dummy26_ = from.dummy26_;
    }
    if (cached_has_bits & 0x04000000u) {
      dummy27_ = from.dummy27_;
    }
    if (cached_has_bits & 0x08000000u) {
      dummy28_ = from.dummy28_;
    }
    if (cached_has_bits & 0x10000000u) {
      dummy29_ = from.dummy29_;
    }
    if (cached_has_bits & 0x20000000u) {
      dummy30_ = from.dummy30_;
    }
    if (cached_has_bits & 0x40000000u) {
      dummy31_ = from.dummy31_;
    }
    if (cached_has_bits & 0x80000000u) {
      dummy32_ = from.dummy32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_has_c()) {
    _internal_set_c(from._internal_c());
  }
}

void TestRequired::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestRequired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequired::CopyFrom(const TestRequired& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequired::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if ((_has_bits_[1] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TestRequired::InternalSwap(TestRequired* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(a_, other->a_);
  swap(dummy2_, other->dummy2_);
  swap(b_, other->b_);
  swap(dummy4_, other->dummy4_);
  swap(dummy5_, other->dummy5_);
  swap(dummy6_, other->dummy6_);
  swap(dummy7_, other->dummy7_);
  swap(dummy8_, other->dummy8_);
  swap(dummy9_, other->dummy9_);
  swap(dummy10_, other->dummy10_);
  swap(dummy11_, other->dummy11_);
  swap(dummy12_, other->dummy12_);
  swap(dummy13_, other->dummy13_);
  swap(dummy14_, other->dummy14_);
  swap(dummy15_, other->dummy15_);
  swap(dummy16_, other->dummy16_);
  swap(dummy17_, other->dummy17_);
  swap(dummy18_, other->dummy18_);
  swap(dummy19_, other->dummy19_);
  swap(dummy20_, other->dummy20_);
  swap(dummy21_, other->dummy21_);
  swap(dummy22_, other->dummy22_);
  swap(dummy23_, other->dummy23_);
  swap(dummy24_, other->dummy24_);
  swap(dummy25_, other->dummy25_);
  swap(dummy26_, other->dummy26_);
  swap(dummy27_, other->dummy27_);
  swap(dummy28_, other->dummy28_);
  swap(dummy29_, other->dummy29_);
  swap(dummy30_, other->dummy30_);
  swap(dummy31_, other->dummy31_);
  swap(dummy32_, other->dummy32_);
  swap(c_, other->c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequired::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRequiredForeign::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestRequiredForeign_default_instance_._instance.get_mutable()->optional_message_ = const_cast< ::protobuf_unittest::TestRequired*>(
      ::protobuf_unittest::TestRequired::internal_default_instance());
}
class TestRequiredForeign::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequiredForeign>()._has_bits_);
  static const ::protobuf_unittest::TestRequired& optional_message(const TestRequiredForeign* msg);
  static void set_has_optional_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestRequired&
TestRequiredForeign::_Internal::optional_message(const TestRequiredForeign* msg) {
  return *msg->optional_message_;
}
void TestRequiredForeign::unsafe_arena_set_allocated_optional_message(
    ::protobuf_unittest::TestRequired* optional_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_message_;
  }
  optional_message_ = optional_message;
  if (optional_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRequiredForeign.optional_message)
}
TestRequiredForeign::TestRequiredForeign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestRequiredForeign)
}
TestRequiredForeign::TestRequiredForeign(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeated_message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredForeign)
}
TestRequiredForeign::TestRequiredForeign(const TestRequiredForeign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_message_(from.repeated_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_optional_message()) {
    optional_message_ = new ::protobuf_unittest::TestRequired(*from.optional_message_);
  } else {
    optional_message_ = nullptr;
  }
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredForeign)
}

void TestRequiredForeign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestRequiredForeign_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&optional_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dummy_) -
      reinterpret_cast<char*>(&optional_message_)) + sizeof(dummy_));
}

TestRequiredForeign::~TestRequiredForeign() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredForeign)
  SharedDtor();
}

void TestRequiredForeign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete optional_message_;
}

void TestRequiredForeign::ArenaDtor(void* object) {
  TestRequiredForeign* _this = reinterpret_cast< TestRequiredForeign* >(object);
  (void)_this;
}
void TestRequiredForeign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRequiredForeign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRequiredForeign& TestRequiredForeign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRequiredForeign_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestRequiredForeign::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredForeign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(optional_message_ != nullptr);
    optional_message_->Clear();
  }
  dummy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestRequiredForeign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestRequired optional_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestRequired repeated_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 dummy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRequiredForeign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredForeign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestRequired optional_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::optional_message(this), target, stream);
  }

  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_repeated_message(i), target, stream);
  }

  // optional int32 dummy = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredForeign)
  return target;
}

size_t TestRequiredForeign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredForeign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  total_size += 1UL * this->_internal_repeated_message_size();
  for (const auto& msg : this->repeated_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestRequired optional_message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_message_);
    }

    // optional int32 dummy = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dummy());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequiredForeign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestRequiredForeign)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequiredForeign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRequiredForeign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestRequiredForeign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestRequiredForeign)
    MergeFrom(*source);
  }
}

void TestRequiredForeign::MergeFrom(const TestRequiredForeign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredForeign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_message_.MergeFrom(from.repeated_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_optional_message()->::protobuf_unittest::TestRequired::MergeFrom(from._internal_optional_message());
    }
    if (cached_has_bits & 0x00000002u) {
      dummy_ = from.dummy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestRequiredForeign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestRequiredForeign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequiredForeign::CopyFrom(const TestRequiredForeign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredForeign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredForeign::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(repeated_message_)) return false;
  if (_internal_has_optional_message()) {
    if (!optional_message_->IsInitialized()) return false;
  }
  return true;
}

void TestRequiredForeign::InternalSwap(TestRequiredForeign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_message_.InternalSwap(&other->repeated_message_);
  swap(optional_message_, other->optional_message_);
  swap(dummy_, other->dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequiredForeign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRequiredMessage::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestRequiredMessage_default_instance_._instance.get_mutable()->optional_message_ = const_cast< ::protobuf_unittest::TestRequired*>(
      ::protobuf_unittest::TestRequired::internal_default_instance());
  ::protobuf_unittest::_TestRequiredMessage_default_instance_._instance.get_mutable()->required_message_ = const_cast< ::protobuf_unittest::TestRequired*>(
      ::protobuf_unittest::TestRequired::internal_default_instance());
}
class TestRequiredMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequiredMessage>()._has_bits_);
  static const ::protobuf_unittest::TestRequired& optional_message(const TestRequiredMessage* msg);
  static void set_has_optional_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestRequired& required_message(const TestRequiredMessage* msg);
  static void set_has_required_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestRequired&
TestRequiredMessage::_Internal::optional_message(const TestRequiredMessage* msg) {
  return *msg->optional_message_;
}
const ::protobuf_unittest::TestRequired&
TestRequiredMessage::_Internal::required_message(const TestRequiredMessage* msg) {
  return *msg->required_message_;
}
void TestRequiredMessage::unsafe_arena_set_allocated_optional_message(
    ::protobuf_unittest::TestRequired* optional_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_message_;
  }
  optional_message_ = optional_message;
  if (optional_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRequiredMessage.optional_message)
}
void TestRequiredMessage::unsafe_arena_set_allocated_required_message(
    ::protobuf_unittest::TestRequired* required_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete required_message_;
  }
  required_message_ = required_message;
  if (required_message) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRequiredMessage.required_message)
}
TestRequiredMessage::TestRequiredMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestRequiredMessage)
}
TestRequiredMessage::TestRequiredMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeated_message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredMessage)
}
TestRequiredMessage::TestRequiredMessage(const TestRequiredMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_message_(from.repeated_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_optional_message()) {
    optional_message_ = new ::protobuf_unittest::TestRequired(*from.optional_message_);
  } else {
    optional_message_ = nullptr;
  }
  if (from._internal_has_required_message()) {
    required_message_ = new ::protobuf_unittest::TestRequired(*from.required_message_);
  } else {
    required_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredMessage)
}

void TestRequiredMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestRequiredMessage_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&optional_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_message_) -
      reinterpret_cast<char*>(&optional_message_)) + sizeof(required_message_));
}

TestRequiredMessage::~TestRequiredMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredMessage)
  SharedDtor();
}

void TestRequiredMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete optional_message_;
  if (this != internal_default_instance()) delete required_message_;
}

void TestRequiredMessage::ArenaDtor(void* object) {
  TestRequiredMessage* _this = reinterpret_cast< TestRequiredMessage* >(object);
  (void)_this;
}
void TestRequiredMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRequiredMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRequiredMessage& TestRequiredMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRequiredMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestRequiredMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(optional_message_ != nullptr);
      optional_message_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(required_message_ != nullptr);
      required_message_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestRequiredMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestRequired optional_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestRequired repeated_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required .protobuf_unittest.TestRequired required_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_required_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRequiredMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestRequired optional_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::optional_message(this), target, stream);
  }

  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_repeated_message(i), target, stream);
  }

  // required .protobuf_unittest.TestRequired required_message = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::required_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredMessage)
  return target;
}

size_t TestRequiredMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredMessage)
  size_t total_size = 0;

  // required .protobuf_unittest.TestRequired required_message = 3;
  if (_internal_has_required_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_message_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  total_size += 1UL * this->_internal_repeated_message_size();
  for (const auto& msg : this->repeated_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .protobuf_unittest.TestRequired optional_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequiredMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestRequiredMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequiredMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRequiredMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestRequiredMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestRequiredMessage)
    MergeFrom(*source);
  }
}

void TestRequiredMessage::MergeFrom(const TestRequiredMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_message_.MergeFrom(from.repeated_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_optional_message()->::protobuf_unittest::TestRequired::MergeFrom(from._internal_optional_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_required_message()->::protobuf_unittest::TestRequired::MergeFrom(from._internal_required_message());
    }
  }
}

void TestRequiredMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestRequiredMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequiredMessage::CopyFrom(const TestRequiredMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(repeated_message_)) return false;
  if (_internal_has_optional_message()) {
    if (!optional_message_->IsInitialized()) return false;
  }
  if (_internal_has_required_message()) {
    if (!required_message_->IsInitialized()) return false;
  }
  return true;
}

void TestRequiredMessage::InternalSwap(TestRequiredMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_message_.InternalSwap(&other->repeated_message_);
  swap(optional_message_, other->optional_message_);
  swap(required_message_, other->required_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequiredMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestForeignNested::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestForeignNested_default_instance_._instance.get_mutable()->foreign_nested_ = const_cast< ::protobuf_unittest::TestAllTypes_NestedMessage*>(
      ::protobuf_unittest::TestAllTypes_NestedMessage::internal_default_instance());
}
class TestForeignNested::_Internal {
 public:
  using HasBits = decltype(std::declval<TestForeignNested>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes_NestedMessage& foreign_nested(const TestForeignNested* msg);
  static void set_has_foreign_nested(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes_NestedMessage&
TestForeignNested::_Internal::foreign_nested(const TestForeignNested* msg) {
  return *msg->foreign_nested_;
}
void TestForeignNested::unsafe_arena_set_allocated_foreign_nested(
    ::protobuf_unittest::TestAllTypes_NestedMessage* foreign_nested) {
  if (GetArenaNoVirtual() == nullptr) {
    delete foreign_nested_;
  }
  foreign_nested_ = foreign_nested;
  if (foreign_nested) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestForeignNested.foreign_nested)
}
TestForeignNested::TestForeignNested()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestForeignNested)
}
TestForeignNested::TestForeignNested(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestForeignNested)
}
TestForeignNested::TestForeignNested(const TestForeignNested& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_foreign_nested()) {
    foreign_nested_ = new ::protobuf_unittest::TestAllTypes_NestedMessage(*from.foreign_nested_);
  } else {
    foreign_nested_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestForeignNested)
}

void TestForeignNested::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestForeignNested_google_2fprotobuf_2funittest_2eproto.base);
  foreign_nested_ = nullptr;
}

TestForeignNested::~TestForeignNested() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestForeignNested)
  SharedDtor();
}

void TestForeignNested::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete foreign_nested_;
}

void TestForeignNested::ArenaDtor(void* object) {
  TestForeignNested* _this = reinterpret_cast< TestForeignNested* >(object);
  (void)_this;
}
void TestForeignNested::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestForeignNested::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestForeignNested& TestForeignNested::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestForeignNested_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestForeignNested::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestForeignNested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(foreign_nested_ != nullptr);
    foreign_nested_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestForeignNested::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreign_nested(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestForeignNested::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestForeignNested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::foreign_nested(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestForeignNested)
  return target;
}

size_t TestForeignNested::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestForeignNested)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *foreign_nested_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestForeignNested::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestForeignNested)
  GOOGLE_DCHECK_NE(&from, this);
  const TestForeignNested* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestForeignNested>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestForeignNested)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestForeignNested)
    MergeFrom(*source);
  }
}

void TestForeignNested::MergeFrom(const TestForeignNested& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestForeignNested)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_foreign_nested()) {
    _internal_mutable_foreign_nested()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_foreign_nested());
  }
}

void TestForeignNested::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestForeignNested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestForeignNested::CopyFrom(const TestForeignNested& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestForeignNested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestForeignNested::IsInitialized() const {
  return true;
}

void TestForeignNested::InternalSwap(TestForeignNested* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foreign_nested_, other->foreign_nested_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestForeignNested::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestEmptyMessage::InitAsDefaultInstance() {
}
class TestEmptyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEmptyMessage>()._has_bits_);
};

TestEmptyMessage::TestEmptyMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestEmptyMessage)
}
TestEmptyMessage::TestEmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEmptyMessage)
}
TestEmptyMessage::TestEmptyMessage(const TestEmptyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEmptyMessage)
}

void TestEmptyMessage::SharedCtor() {
}

TestEmptyMessage::~TestEmptyMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEmptyMessage)
  SharedDtor();
}

void TestEmptyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestEmptyMessage::ArenaDtor(void* object) {
  TestEmptyMessage* _this = reinterpret_cast< TestEmptyMessage* >(object);
  (void)_this;
}
void TestEmptyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestEmptyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestEmptyMessage& TestEmptyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestEmptyMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestEmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestEmptyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestEmptyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEmptyMessage)
  return target;
}

size_t TestEmptyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEmptyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEmptyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestEmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEmptyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestEmptyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestEmptyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestEmptyMessage)
    MergeFrom(*source);
  }
}

void TestEmptyMessage::MergeFrom(const TestEmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestEmptyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestEmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEmptyMessage::CopyFrom(const TestEmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEmptyMessage::IsInitialized() const {
  return true;
}

void TestEmptyMessage::InternalSwap(TestEmptyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEmptyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestEmptyMessageWithExtensions::InitAsDefaultInstance() {
}
class TestEmptyMessageWithExtensions::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEmptyMessageWithExtensions>()._has_bits_);
};

TestEmptyMessageWithExtensions::TestEmptyMessageWithExtensions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestEmptyMessageWithExtensions)
}
TestEmptyMessageWithExtensions::TestEmptyMessageWithExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEmptyMessageWithExtensions)
}
TestEmptyMessageWithExtensions::TestEmptyMessageWithExtensions(const TestEmptyMessageWithExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEmptyMessageWithExtensions)
}

void TestEmptyMessageWithExtensions::SharedCtor() {
}

TestEmptyMessageWithExtensions::~TestEmptyMessageWithExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEmptyMessageWithExtensions)
  SharedDtor();
}

void TestEmptyMessageWithExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestEmptyMessageWithExtensions::ArenaDtor(void* object) {
  TestEmptyMessageWithExtensions* _this = reinterpret_cast< TestEmptyMessageWithExtensions* >(object);
  (void)_this;
}
void TestEmptyMessageWithExtensions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestEmptyMessageWithExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestEmptyMessageWithExtensions& TestEmptyMessageWithExtensions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestEmptyMessageWithExtensions_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestEmptyMessageWithExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestEmptyMessageWithExtensions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestEmptyMessageWithExtensions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
      1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEmptyMessageWithExtensions)
  return target;
}

size_t TestEmptyMessageWithExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEmptyMessageWithExtensions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEmptyMessageWithExtensions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestEmptyMessageWithExtensions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestEmptyMessageWithExtensions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestEmptyMessageWithExtensions)
    MergeFrom(*source);
  }
}

void TestEmptyMessageWithExtensions::MergeFrom(const TestEmptyMessageWithExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestEmptyMessageWithExtensions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEmptyMessageWithExtensions::CopyFrom(const TestEmptyMessageWithExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEmptyMessageWithExtensions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestEmptyMessageWithExtensions::InternalSwap(TestEmptyMessageWithExtensions* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEmptyMessageWithExtensions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::InitAsDefaultInstance() {
}
class TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestPickleNestedMessage_NestedMessage_NestedNestedMessage>()._has_bits_);
  static void set_has_cc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestPickleNestedMessage_NestedMessage_NestedNestedMessage::TestPickleNestedMessage_NestedMessage_NestedNestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
}
TestPickleNestedMessage_NestedMessage_NestedNestedMessage::TestPickleNestedMessage_NestedMessage_NestedNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
}
TestPickleNestedMessage_NestedMessage_NestedNestedMessage::TestPickleNestedMessage_NestedMessage_NestedNestedMessage(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cc_ = from.cc_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::SharedCtor() {
  cc_ = 0;
}

TestPickleNestedMessage_NestedMessage_NestedNestedMessage::~TestPickleNestedMessage_NestedMessage_NestedNestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  SharedDtor();
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::ArenaDtor(void* object) {
  TestPickleNestedMessage_NestedMessage_NestedNestedMessage* _this = reinterpret_cast< TestPickleNestedMessage_NestedMessage_NestedNestedMessage* >(object);
  (void)_this;
}
void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& TestPickleNestedMessage_NestedMessage_NestedNestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cc(&has_bits);
          cc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  return target;
}

size_t TestPickleNestedMessage_NestedMessage_NestedNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 cc = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPickleNestedMessage_NestedMessage_NestedNestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPickleNestedMessage_NestedMessage_NestedNestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
    MergeFrom(*source);
  }
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::MergeFrom(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cc()) {
    _internal_set_cc(from._internal_cc());
  }
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::CopyFrom(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPickleNestedMessage_NestedMessage_NestedNestedMessage::IsInitialized() const {
  return true;
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::InternalSwap(TestPickleNestedMessage_NestedMessage_NestedNestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cc_, other->cc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPickleNestedMessage_NestedMessage_NestedNestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPickleNestedMessage_NestedMessage::InitAsDefaultInstance() {
}
class TestPickleNestedMessage_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestPickleNestedMessage_NestedMessage>()._has_bits_);
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestPickleNestedMessage_NestedMessage::TestPickleNestedMessage_NestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
}
TestPickleNestedMessage_NestedMessage::TestPickleNestedMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
}
TestPickleNestedMessage_NestedMessage::TestPickleNestedMessage_NestedMessage(const TestPickleNestedMessage_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bb_ = from.bb_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
}

void TestPickleNestedMessage_NestedMessage::SharedCtor() {
  bb_ = 0;
}

TestPickleNestedMessage_NestedMessage::~TestPickleNestedMessage_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  SharedDtor();
}

void TestPickleNestedMessage_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestPickleNestedMessage_NestedMessage::ArenaDtor(void* object) {
  TestPickleNestedMessage_NestedMessage* _this = reinterpret_cast< TestPickleNestedMessage_NestedMessage* >(object);
  (void)_this;
}
void TestPickleNestedMessage_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPickleNestedMessage_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPickleNestedMessage_NestedMessage& TestPickleNestedMessage_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPickleNestedMessage_NestedMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestPickleNestedMessage_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bb_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestPickleNestedMessage_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPickleNestedMessage_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  return target;
}

size_t TestPickleNestedMessage_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 bb = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPickleNestedMessage_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPickleNestedMessage_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPickleNestedMessage_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
    MergeFrom(*source);
  }
}

void TestPickleNestedMessage_NestedMessage::MergeFrom(const TestPickleNestedMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bb()) {
    _internal_set_bb(from._internal_bb());
  }
}

void TestPickleNestedMessage_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPickleNestedMessage_NestedMessage::CopyFrom(const TestPickleNestedMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPickleNestedMessage_NestedMessage::IsInitialized() const {
  return true;
}

void TestPickleNestedMessage_NestedMessage::InternalSwap(TestPickleNestedMessage_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bb_, other->bb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPickleNestedMessage_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPickleNestedMessage::InitAsDefaultInstance() {
}
class TestPickleNestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestPickleNestedMessage>()._has_bits_);
};

TestPickleNestedMessage::TestPickleNestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestPickleNestedMessage)
}
TestPickleNestedMessage::TestPickleNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPickleNestedMessage)
}
TestPickleNestedMessage::TestPickleNestedMessage(const TestPickleNestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPickleNestedMessage)
}

void TestPickleNestedMessage::SharedCtor() {
}

TestPickleNestedMessage::~TestPickleNestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPickleNestedMessage)
  SharedDtor();
}

void TestPickleNestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestPickleNestedMessage::ArenaDtor(void* object) {
  TestPickleNestedMessage* _this = reinterpret_cast< TestPickleNestedMessage* >(object);
  (void)_this;
}
void TestPickleNestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPickleNestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPickleNestedMessage& TestPickleNestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPickleNestedMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestPickleNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPickleNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestPickleNestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPickleNestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPickleNestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPickleNestedMessage)
  return target;
}

size_t TestPickleNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPickleNestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPickleNestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestPickleNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPickleNestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPickleNestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestPickleNestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestPickleNestedMessage)
    MergeFrom(*source);
  }
}

void TestPickleNestedMessage::MergeFrom(const TestPickleNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPickleNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestPickleNestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestPickleNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPickleNestedMessage::CopyFrom(const TestPickleNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPickleNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPickleNestedMessage::IsInitialized() const {
  return true;
}

void TestPickleNestedMessage::InternalSwap(TestPickleNestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPickleNestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMultipleExtensionRanges::InitAsDefaultInstance() {
}
class TestMultipleExtensionRanges::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMultipleExtensionRanges>()._has_bits_);
};

TestMultipleExtensionRanges::TestMultipleExtensionRanges()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestMultipleExtensionRanges)
}
TestMultipleExtensionRanges::TestMultipleExtensionRanges(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMultipleExtensionRanges)
}
TestMultipleExtensionRanges::TestMultipleExtensionRanges(const TestMultipleExtensionRanges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMultipleExtensionRanges)
}

void TestMultipleExtensionRanges::SharedCtor() {
}

TestMultipleExtensionRanges::~TestMultipleExtensionRanges() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMultipleExtensionRanges)
  SharedDtor();
}

void TestMultipleExtensionRanges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestMultipleExtensionRanges::ArenaDtor(void* object) {
  TestMultipleExtensionRanges* _this = reinterpret_cast< TestMultipleExtensionRanges* >(object);
  (void)_this;
}
void TestMultipleExtensionRanges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMultipleExtensionRanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMultipleExtensionRanges& TestMultipleExtensionRanges::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMultipleExtensionRanges_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestMultipleExtensionRanges::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMultipleExtensionRanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestMultipleExtensionRanges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((336u <= tag && tag < 344u) ||
          (33144u <= tag && tag < 33952u) ||
          (524288u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMultipleExtensionRanges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMultipleExtensionRanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [42, 43)
  target = _extensions_._InternalSerialize(
      42, 43, target, stream);

  // Extension range [4143, 4244)
  target = _extensions_._InternalSerialize(
      4143, 4244, target, stream);

  // Extension range [65536, 536870912)
  target = _extensions_._InternalSerialize(
      65536, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMultipleExtensionRanges)
  return target;
}

size_t TestMultipleExtensionRanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMultipleExtensionRanges)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMultipleExtensionRanges::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestMultipleExtensionRanges)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMultipleExtensionRanges* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMultipleExtensionRanges>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestMultipleExtensionRanges)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestMultipleExtensionRanges)
    MergeFrom(*source);
  }
}

void TestMultipleExtensionRanges::MergeFrom(const TestMultipleExtensionRanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMultipleExtensionRanges)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestMultipleExtensionRanges::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestMultipleExtensionRanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMultipleExtensionRanges::CopyFrom(const TestMultipleExtensionRanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMultipleExtensionRanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMultipleExtensionRanges::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestMultipleExtensionRanges::InternalSwap(TestMultipleExtensionRanges* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMultipleExtensionRanges::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestReallyLargeTagNumber::InitAsDefaultInstance() {
}
class TestReallyLargeTagNumber::_Internal {
 public:
  using HasBits = decltype(std::declval<TestReallyLargeTagNumber>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestReallyLargeTagNumber::TestReallyLargeTagNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestReallyLargeTagNumber)
}
TestReallyLargeTagNumber::TestReallyLargeTagNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestReallyLargeTagNumber)
}
TestReallyLargeTagNumber::TestReallyLargeTagNumber(const TestReallyLargeTagNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&bb_) -
    reinterpret_cast<char*>(&a_)) + sizeof(bb_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestReallyLargeTagNumber)
}

void TestReallyLargeTagNumber::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bb_) -
      reinterpret_cast<char*>(&a_)) + sizeof(bb_));
}

TestReallyLargeTagNumber::~TestReallyLargeTagNumber() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestReallyLargeTagNumber)
  SharedDtor();
}

void TestReallyLargeTagNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestReallyLargeTagNumber::ArenaDtor(void* object) {
  TestReallyLargeTagNumber* _this = reinterpret_cast< TestReallyLargeTagNumber* >(object);
  (void)_this;
}
void TestReallyLargeTagNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestReallyLargeTagNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestReallyLargeTagNumber& TestReallyLargeTagNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestReallyLargeTagNumber_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestReallyLargeTagNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestReallyLargeTagNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bb_) -
        reinterpret_cast<char*>(&a_)) + sizeof(bb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestReallyLargeTagNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bb = 268435455;
      case 268435455:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestReallyLargeTagNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestReallyLargeTagNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional int32 bb = 268435455;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(268435455, this->_internal_bb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestReallyLargeTagNumber)
  return target;
}

size_t TestReallyLargeTagNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestReallyLargeTagNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

    // optional int32 bb = 268435455;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestReallyLargeTagNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestReallyLargeTagNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReallyLargeTagNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestReallyLargeTagNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestReallyLargeTagNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestReallyLargeTagNumber)
    MergeFrom(*source);
  }
}

void TestReallyLargeTagNumber::MergeFrom(const TestReallyLargeTagNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestReallyLargeTagNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      bb_ = from.bb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestReallyLargeTagNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestReallyLargeTagNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReallyLargeTagNumber::CopyFrom(const TestReallyLargeTagNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestReallyLargeTagNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReallyLargeTagNumber::IsInitialized() const {
  return true;
}

void TestReallyLargeTagNumber::InternalSwap(TestReallyLargeTagNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
  swap(bb_, other->bb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestReallyLargeTagNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRecursiveMessage::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestRecursiveMessage_default_instance_._instance.get_mutable()->a_ = const_cast< ::protobuf_unittest::TestRecursiveMessage*>(
      ::protobuf_unittest::TestRecursiveMessage::internal_default_instance());
}
class TestRecursiveMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRecursiveMessage>()._has_bits_);
  static const ::protobuf_unittest::TestRecursiveMessage& a(const TestRecursiveMessage* msg);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestRecursiveMessage&
TestRecursiveMessage::_Internal::a(const TestRecursiveMessage* msg) {
  return *msg->a_;
}
void TestRecursiveMessage::unsafe_arena_set_allocated_a(
    ::protobuf_unittest::TestRecursiveMessage* a) {
  if (GetArenaNoVirtual() == nullptr) {
    delete a_;
  }
  a_ = a;
  if (a) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRecursiveMessage.a)
}
TestRecursiveMessage::TestRecursiveMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestRecursiveMessage)
}
TestRecursiveMessage::TestRecursiveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRecursiveMessage)
}
TestRecursiveMessage::TestRecursiveMessage(const TestRecursiveMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_a()) {
    a_ = new ::protobuf_unittest::TestRecursiveMessage(*from.a_);
  } else {
    a_ = nullptr;
  }
  i_ = from.i_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRecursiveMessage)
}

void TestRecursiveMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestRecursiveMessage_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i_) -
      reinterpret_cast<char*>(&a_)) + sizeof(i_));
}

TestRecursiveMessage::~TestRecursiveMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRecursiveMessage)
  SharedDtor();
}

void TestRecursiveMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete a_;
}

void TestRecursiveMessage::ArenaDtor(void* object) {
  TestRecursiveMessage* _this = reinterpret_cast< TestRecursiveMessage* >(object);
  (void)_this;
}
void TestRecursiveMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRecursiveMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRecursiveMessage& TestRecursiveMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRecursiveMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestRecursiveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRecursiveMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(a_ != nullptr);
    a_->Clear();
  }
  i_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestRecursiveMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestRecursiveMessage a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_i(&has_bits);
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRecursiveMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRecursiveMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestRecursiveMessage a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::a(this), target, stream);
  }

  // optional int32 i = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRecursiveMessage)
  return target;
}

size_t TestRecursiveMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRecursiveMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestRecursiveMessage a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a_);
    }

    // optional int32 i = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRecursiveMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestRecursiveMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRecursiveMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRecursiveMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestRecursiveMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestRecursiveMessage)
    MergeFrom(*source);
  }
}

void TestRecursiveMessage::MergeFrom(const TestRecursiveMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRecursiveMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_a()->::protobuf_unittest::TestRecursiveMessage::MergeFrom(from._internal_a());
    }
    if (cached_has_bits & 0x00000002u) {
      i_ = from.i_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestRecursiveMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestRecursiveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRecursiveMessage::CopyFrom(const TestRecursiveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRecursiveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRecursiveMessage::IsInitialized() const {
  return true;
}

void TestRecursiveMessage::InternalSwap(TestRecursiveMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
  swap(i_, other->i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRecursiveMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMutualRecursionA_SubMessage::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestMutualRecursionA_SubMessage_default_instance_._instance.get_mutable()->b_ = const_cast< ::protobuf_unittest::TestMutualRecursionB*>(
      ::protobuf_unittest::TestMutualRecursionB::internal_default_instance());
}
class TestMutualRecursionA_SubMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMutualRecursionA_SubMessage>()._has_bits_);
  static const ::protobuf_unittest::TestMutualRecursionB& b(const TestMutualRecursionA_SubMessage* msg);
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestMutualRecursionB&
TestMutualRecursionA_SubMessage::_Internal::b(const TestMutualRecursionA_SubMessage* msg) {
  return *msg->b_;
}
void TestMutualRecursionA_SubMessage::unsafe_arena_set_allocated_b(
    ::protobuf_unittest::TestMutualRecursionB* b) {
  if (GetArenaNoVirtual() == nullptr) {
    delete b_;
  }
  b_ = b;
  if (b) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.SubMessage.b)
}
TestMutualRecursionA_SubMessage::TestMutualRecursionA_SubMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestMutualRecursionA.SubMessage)
}
TestMutualRecursionA_SubMessage::TestMutualRecursionA_SubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMutualRecursionA.SubMessage)
}
TestMutualRecursionA_SubMessage::TestMutualRecursionA_SubMessage(const TestMutualRecursionA_SubMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_b()) {
    b_ = new ::protobuf_unittest::TestMutualRecursionB(*from.b_);
  } else {
    b_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMutualRecursionA.SubMessage)
}

void TestMutualRecursionA_SubMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto.base);
  b_ = nullptr;
}

TestMutualRecursionA_SubMessage::~TestMutualRecursionA_SubMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMutualRecursionA.SubMessage)
  SharedDtor();
}

void TestMutualRecursionA_SubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete b_;
}

void TestMutualRecursionA_SubMessage::ArenaDtor(void* object) {
  TestMutualRecursionA_SubMessage* _this = reinterpret_cast< TestMutualRecursionA_SubMessage* >(object);
  (void)_this;
}
void TestMutualRecursionA_SubMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMutualRecursionA_SubMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMutualRecursionA_SubMessage& TestMutualRecursionA_SubMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestMutualRecursionA_SubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(b_ != nullptr);
    b_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestMutualRecursionA_SubMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMutualRecursionB b = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMutualRecursionA_SubMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMutualRecursionB b = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::b(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMutualRecursionA.SubMessage)
  return target;
}

size_t TestMutualRecursionA_SubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestMutualRecursionB b = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMutualRecursionA_SubMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMutualRecursionA_SubMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMutualRecursionA_SubMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestMutualRecursionA.SubMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestMutualRecursionA.SubMessage)
    MergeFrom(*source);
  }
}

void TestMutualRecursionA_SubMessage::MergeFrom(const TestMutualRecursionA_SubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_b()) {
    _internal_mutable_b()->::protobuf_unittest::TestMutualRecursionB::MergeFrom(from._internal_b());
  }
}

void TestMutualRecursionA_SubMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMutualRecursionA_SubMessage::CopyFrom(const TestMutualRecursionA_SubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMutualRecursionA_SubMessage::IsInitialized() const {
  return true;
}

void TestMutualRecursionA_SubMessage::InternalSwap(TestMutualRecursionA_SubMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(b_, other->b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMutualRecursionA_SubMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMutualRecursionA_SubGroup::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestMutualRecursionA_SubGroup_default_instance_._instance.get_mutable()->sub_message_ = const_cast< ::protobuf_unittest::TestMutualRecursionA_SubMessage*>(
      ::protobuf_unittest::TestMutualRecursionA_SubMessage::internal_default_instance());
  ::protobuf_unittest::_TestMutualRecursionA_SubGroup_default_instance_._instance.get_mutable()->not_in_this_scc_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
}
class TestMutualRecursionA_SubGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMutualRecursionA_SubGroup>()._has_bits_);
  static const ::protobuf_unittest::TestMutualRecursionA_SubMessage& sub_message(const TestMutualRecursionA_SubGroup* msg);
  static void set_has_sub_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypes& not_in_this_scc(const TestMutualRecursionA_SubGroup* msg);
  static void set_has_not_in_this_scc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestMutualRecursionA_SubMessage&
TestMutualRecursionA_SubGroup::_Internal::sub_message(const TestMutualRecursionA_SubGroup* msg) {
  return *msg->sub_message_;
}
const ::protobuf_unittest::TestAllTypes&
TestMutualRecursionA_SubGroup::_Internal::not_in_this_scc(const TestMutualRecursionA_SubGroup* msg) {
  return *msg->not_in_this_scc_;
}
void TestMutualRecursionA_SubGroup::unsafe_arena_set_allocated_sub_message(
    ::protobuf_unittest::TestMutualRecursionA_SubMessage* sub_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete sub_message_;
  }
  sub_message_ = sub_message;
  if (sub_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.SubGroup.sub_message)
}
void TestMutualRecursionA_SubGroup::unsafe_arena_set_allocated_not_in_this_scc(
    ::protobuf_unittest::TestAllTypes* not_in_this_scc) {
  if (GetArenaNoVirtual() == nullptr) {
    delete not_in_this_scc_;
  }
  not_in_this_scc_ = not_in_this_scc;
  if (not_in_this_scc) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.SubGroup.not_in_this_scc)
}
TestMutualRecursionA_SubGroup::TestMutualRecursionA_SubGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestMutualRecursionA.SubGroup)
}
TestMutualRecursionA_SubGroup::TestMutualRecursionA_SubGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMutualRecursionA.SubGroup)
}
TestMutualRecursionA_SubGroup::TestMutualRecursionA_SubGroup(const TestMutualRecursionA_SubGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sub_message()) {
    sub_message_ = new ::protobuf_unittest::TestMutualRecursionA_SubMessage(*from.sub_message_);
  } else {
    sub_message_ = nullptr;
  }
  if (from._internal_has_not_in_this_scc()) {
    not_in_this_scc_ = new ::protobuf_unittest::TestAllTypes(*from.not_in_this_scc_);
  } else {
    not_in_this_scc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMutualRecursionA.SubGroup)
}

void TestMutualRecursionA_SubGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&sub_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not_in_this_scc_) -
      reinterpret_cast<char*>(&sub_message_)) + sizeof(not_in_this_scc_));
}

TestMutualRecursionA_SubGroup::~TestMutualRecursionA_SubGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMutualRecursionA.SubGroup)
  SharedDtor();
}

void TestMutualRecursionA_SubGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete sub_message_;
  if (this != internal_default_instance()) delete not_in_this_scc_;
}

void TestMutualRecursionA_SubGroup::ArenaDtor(void* object) {
  TestMutualRecursionA_SubGroup* _this = reinterpret_cast< TestMutualRecursionA_SubGroup* >(object);
  (void)_this;
}
void TestMutualRecursionA_SubGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMutualRecursionA_SubGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMutualRecursionA_SubGroup& TestMutualRecursionA_SubGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestMutualRecursionA_SubGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sub_message_ != nullptr);
      sub_message_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(not_in_this_scc_ != nullptr);
      not_in_this_scc_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestMutualRecursionA_SubGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMutualRecursionA.SubMessage sub_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes not_in_this_scc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_in_this_scc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMutualRecursionA_SubGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMutualRecursionA.SubMessage sub_message = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sub_message(this), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes not_in_this_scc = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::not_in_this_scc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMutualRecursionA.SubGroup)
  return target;
}

size_t TestMutualRecursionA_SubGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestMutualRecursionA.SubMessage sub_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_message_);
    }

    // optional .protobuf_unittest.TestAllTypes not_in_this_scc = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *not_in_this_scc_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMutualRecursionA_SubGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMutualRecursionA_SubGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMutualRecursionA_SubGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestMutualRecursionA.SubGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestMutualRecursionA.SubGroup)
    MergeFrom(*source);
  }
}

void TestMutualRecursionA_SubGroup::MergeFrom(const TestMutualRecursionA_SubGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sub_message()->::protobuf_unittest::TestMutualRecursionA_SubMessage::MergeFrom(from._internal_sub_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_not_in_this_scc()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_not_in_this_scc());
    }
  }
}

void TestMutualRecursionA_SubGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMutualRecursionA_SubGroup::CopyFrom(const TestMutualRecursionA_SubGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMutualRecursionA_SubGroup::IsInitialized() const {
  return true;
}

void TestMutualRecursionA_SubGroup::InternalSwap(TestMutualRecursionA_SubGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sub_message_, other->sub_message_);
  swap(not_in_this_scc_, other->not_in_this_scc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMutualRecursionA_SubGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMutualRecursionA::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestMutualRecursionA_default_instance_._instance.get_mutable()->bb_ = const_cast< ::protobuf_unittest::TestMutualRecursionB*>(
      ::protobuf_unittest::TestMutualRecursionB::internal_default_instance());
  ::protobuf_unittest::_TestMutualRecursionA_default_instance_._instance.get_mutable()->subgroup_ = const_cast< ::protobuf_unittest::TestMutualRecursionA_SubGroup*>(
      ::protobuf_unittest::TestMutualRecursionA_SubGroup::internal_default_instance());
}
class TestMutualRecursionA::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMutualRecursionA>()._has_bits_);
  static const ::protobuf_unittest::TestMutualRecursionB& bb(const TestMutualRecursionA* msg);
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestMutualRecursionA_SubGroup& subgroup(const TestMutualRecursionA* msg);
  static void set_has_subgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestMutualRecursionB&
TestMutualRecursionA::_Internal::bb(const TestMutualRecursionA* msg) {
  return *msg->bb_;
}
const ::protobuf_unittest::TestMutualRecursionA_SubGroup&
TestMutualRecursionA::_Internal::subgroup(const TestMutualRecursionA* msg) {
  return *msg->subgroup_;
}
void TestMutualRecursionA::unsafe_arena_set_allocated_bb(
    ::protobuf_unittest::TestMutualRecursionB* bb) {
  if (GetArenaNoVirtual() == nullptr) {
    delete bb_;
  }
  bb_ = bb;
  if (bb) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.bb)
}
void TestMutualRecursionA::unsafe_arena_set_allocated_subgroup(
    ::protobuf_unittest::TestMutualRecursionA_SubGroup* subgroup) {
  if (GetArenaNoVirtual() == nullptr) {
    delete subgroup_;
  }
  subgroup_ = subgroup;
  if (subgroup) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.subgroup)
}
TestMutualRecursionA::TestMutualRecursionA()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestMutualRecursionA)
}
TestMutualRecursionA::TestMutualRecursionA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMutualRecursionA)
}
TestMutualRecursionA::TestMutualRecursionA(const TestMutualRecursionA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_bb()) {
    bb_ = new ::protobuf_unittest::TestMutualRecursionB(*from.bb_);
  } else {
    bb_ = nullptr;
  }
  if (from._internal_has_subgroup()) {
    subgroup_ = new ::protobuf_unittest::TestMutualRecursionA_SubGroup(*from.subgroup_);
  } else {
    subgroup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMutualRecursionA)
}

void TestMutualRecursionA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&bb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subgroup_) -
      reinterpret_cast<char*>(&bb_)) + sizeof(subgroup_));
}

TestMutualRecursionA::~TestMutualRecursionA() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMutualRecursionA)
  SharedDtor();
}

void TestMutualRecursionA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete bb_;
  if (this != internal_default_instance()) delete subgroup_;
}

void TestMutualRecursionA::ArenaDtor(void* object) {
  TestMutualRecursionA* _this = reinterpret_cast< TestMutualRecursionA* >(object);
  (void)_this;
}
void TestMutualRecursionA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMutualRecursionA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMutualRecursionA& TestMutualRecursionA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestMutualRecursionA::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMutualRecursionA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bb_ != nullptr);
      bb_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(subgroup_ != nullptr);
      subgroup_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestMutualRecursionA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMutualRecursionB bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group SubGroup = 2 { ... };
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 19)) {
          ptr = ctx->ParseGroup(_internal_mutable_subgroup(), ptr, 19);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMutualRecursionA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMutualRecursionA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMutualRecursionB bb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bb(this), target, stream);
  }

  // optional group SubGroup = 2 { ... };
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        2, _Internal::subgroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMutualRecursionA)
  return target;
}

size_t TestMutualRecursionA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMutualRecursionA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestMutualRecursionB bb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bb_);
    }

    // optional group SubGroup = 2 { ... };
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *subgroup_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMutualRecursionA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestMutualRecursionA)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMutualRecursionA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMutualRecursionA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestMutualRecursionA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestMutualRecursionA)
    MergeFrom(*source);
  }
}

void TestMutualRecursionA::MergeFrom(const TestMutualRecursionA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMutualRecursionA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bb()->::protobuf_unittest::TestMutualRecursionB::MergeFrom(from._internal_bb());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_subgroup()->::protobuf_unittest::TestMutualRecursionA_SubGroup::MergeFrom(from._internal_subgroup());
    }
  }
}

void TestMutualRecursionA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestMutualRecursionA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMutualRecursionA::CopyFrom(const TestMutualRecursionA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMutualRecursionA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMutualRecursionA::IsInitialized() const {
  return true;
}

void TestMutualRecursionA::InternalSwap(TestMutualRecursionA* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bb_, other->bb_);
  swap(subgroup_, other->subgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMutualRecursionA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMutualRecursionB::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestMutualRecursionB_default_instance_._instance.get_mutable()->a_ = const_cast< ::protobuf_unittest::TestMutualRecursionA*>(
      ::protobuf_unittest::TestMutualRecursionA::internal_default_instance());
}
class TestMutualRecursionB::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMutualRecursionB>()._has_bits_);
  static const ::protobuf_unittest::TestMutualRecursionA& a(const TestMutualRecursionB* msg);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestMutualRecursionA&
TestMutualRecursionB::_Internal::a(const TestMutualRecursionB* msg) {
  return *msg->a_;
}
void TestMutualRecursionB::unsafe_arena_set_allocated_a(
    ::protobuf_unittest::TestMutualRecursionA* a) {
  if (GetArenaNoVirtual() == nullptr) {
    delete a_;
  }
  a_ = a;
  if (a) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionB.a)
}
TestMutualRecursionB::TestMutualRecursionB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestMutualRecursionB)
}
TestMutualRecursionB::TestMutualRecursionB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMutualRecursionB)
}
TestMutualRecursionB::TestMutualRecursionB(const TestMutualRecursionB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_a()) {
    a_ = new ::protobuf_unittest::TestMutualRecursionA(*from.a_);
  } else {
    a_ = nullptr;
  }
  optional_int32_ = from.optional_int32_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMutualRecursionB)
}

void TestMutualRecursionB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_int32_) -
      reinterpret_cast<char*>(&a_)) + sizeof(optional_int32_));
}

TestMutualRecursionB::~TestMutualRecursionB() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMutualRecursionB)
  SharedDtor();
}

void TestMutualRecursionB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete a_;
}

void TestMutualRecursionB::ArenaDtor(void* object) {
  TestMutualRecursionB* _this = reinterpret_cast< TestMutualRecursionB* >(object);
  (void)_this;
}
void TestMutualRecursionB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMutualRecursionB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMutualRecursionB& TestMutualRecursionB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMutualRecursionA_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestMutualRecursionB::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMutualRecursionB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(a_ != nullptr);
    a_->Clear();
  }
  optional_int32_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestMutualRecursionB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMutualRecursionA a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 optional_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_optional_int32(&has_bits);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMutualRecursionB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMutualRecursionB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMutualRecursionA a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::a(this), target, stream);
  }

  // optional int32 optional_int32 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_optional_int32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMutualRecursionB)
  return target;
}

size_t TestMutualRecursionB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMutualRecursionB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestMutualRecursionA a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a_);
    }

    // optional int32 optional_int32 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMutualRecursionB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestMutualRecursionB)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMutualRecursionB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMutualRecursionB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestMutualRecursionB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestMutualRecursionB)
    MergeFrom(*source);
  }
}

void TestMutualRecursionB::MergeFrom(const TestMutualRecursionB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMutualRecursionB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_a()->::protobuf_unittest::TestMutualRecursionA::MergeFrom(from._internal_a());
    }
    if (cached_has_bits & 0x00000002u) {
      optional_int32_ = from.optional_int32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestMutualRecursionB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestMutualRecursionB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMutualRecursionB::CopyFrom(const TestMutualRecursionB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMutualRecursionB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMutualRecursionB::IsInitialized() const {
  return true;
}

void TestMutualRecursionB::InternalSwap(TestMutualRecursionB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
  swap(optional_int32_, other->optional_int32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMutualRecursionB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestIsInitialized_SubMessage_SubGroup::InitAsDefaultInstance() {
}
class TestIsInitialized_SubMessage_SubGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestIsInitialized_SubMessage_SubGroup>()._has_bits_);
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestIsInitialized_SubMessage_SubGroup::TestIsInitialized_SubMessage_SubGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
}
TestIsInitialized_SubMessage_SubGroup::TestIsInitialized_SubMessage_SubGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
}
TestIsInitialized_SubMessage_SubGroup::TestIsInitialized_SubMessage_SubGroup(const TestIsInitialized_SubMessage_SubGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  i_ = from.i_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
}

void TestIsInitialized_SubMessage_SubGroup::SharedCtor() {
  i_ = 0;
}

TestIsInitialized_SubMessage_SubGroup::~TestIsInitialized_SubMessage_SubGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  SharedDtor();
}

void TestIsInitialized_SubMessage_SubGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestIsInitialized_SubMessage_SubGroup::ArenaDtor(void* object) {
  TestIsInitialized_SubMessage_SubGroup* _this = reinterpret_cast< TestIsInitialized_SubMessage_SubGroup* >(object);
  (void)_this;
}
void TestIsInitialized_SubMessage_SubGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestIsInitialized_SubMessage_SubGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestIsInitialized_SubMessage_SubGroup& TestIsInitialized_SubMessage_SubGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestIsInitialized_SubMessage_SubGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestIsInitialized_SubMessage_SubGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestIsInitialized_SubMessage_SubGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_i(&has_bits);
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestIsInitialized_SubMessage_SubGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 i = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  return target;
}

size_t TestIsInitialized_SubMessage_SubGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  size_t total_size = 0;

  // required int32 i = 2;
  if (_internal_has_i()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_i());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestIsInitialized_SubMessage_SubGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestIsInitialized_SubMessage_SubGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestIsInitialized_SubMessage_SubGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
    MergeFrom(*source);
  }
}

void TestIsInitialized_SubMessage_SubGroup::MergeFrom(const TestIsInitialized_SubMessage_SubGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_i()) {
    _internal_set_i(from._internal_i());
  }
}

void TestIsInitialized_SubMessage_SubGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestIsInitialized_SubMessage_SubGroup::CopyFrom(const TestIsInitialized_SubMessage_SubGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIsInitialized_SubMessage_SubGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TestIsInitialized_SubMessage_SubGroup::InternalSwap(TestIsInitialized_SubMessage_SubGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(i_, other->i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestIsInitialized_SubMessage_SubGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestIsInitialized_SubMessage::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestIsInitialized_SubMessage_default_instance_._instance.get_mutable()->subgroup_ = const_cast< ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup*>(
      ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup::internal_default_instance());
}
class TestIsInitialized_SubMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestIsInitialized_SubMessage>()._has_bits_);
  static const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup& subgroup(const TestIsInitialized_SubMessage* msg);
  static void set_has_subgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup&
TestIsInitialized_SubMessage::_Internal::subgroup(const TestIsInitialized_SubMessage* msg) {
  return *msg->subgroup_;
}
void TestIsInitialized_SubMessage::unsafe_arena_set_allocated_subgroup(
    ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* subgroup) {
  if (GetArenaNoVirtual() == nullptr) {
    delete subgroup_;
  }
  subgroup_ = subgroup;
  if (subgroup) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestIsInitialized.SubMessage.subgroup)
}
TestIsInitialized_SubMessage::TestIsInitialized_SubMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestIsInitialized.SubMessage)
}
TestIsInitialized_SubMessage::TestIsInitialized_SubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestIsInitialized.SubMessage)
}
TestIsInitialized_SubMessage::TestIsInitialized_SubMessage(const TestIsInitialized_SubMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_subgroup()) {
    subgroup_ = new ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup(*from.subgroup_);
  } else {
    subgroup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestIsInitialized.SubMessage)
}

void TestIsInitialized_SubMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestIsInitialized_SubMessage_google_2fprotobuf_2funittest_2eproto.base);
  subgroup_ = nullptr;
}

TestIsInitialized_SubMessage::~TestIsInitialized_SubMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestIsInitialized.SubMessage)
  SharedDtor();
}

void TestIsInitialized_SubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete subgroup_;
}

void TestIsInitialized_SubMessage::ArenaDtor(void* object) {
  TestIsInitialized_SubMessage* _this = reinterpret_cast< TestIsInitialized_SubMessage* >(object);
  (void)_this;
}
void TestIsInitialized_SubMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestIsInitialized_SubMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestIsInitialized_SubMessage& TestIsInitialized_SubMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestIsInitialized_SubMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestIsInitialized_SubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestIsInitialized.SubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(subgroup_ != nullptr);
    subgroup_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestIsInitialized_SubMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional group SubGroup = 1 { ... };
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 11)) {
          ptr = ctx->ParseGroup(_internal_mutable_subgroup(), ptr, 11);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestIsInitialized_SubMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestIsInitialized.SubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional group SubGroup = 1 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        1, _Internal::subgroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestIsInitialized.SubMessage)
  return target;
}

size_t TestIsInitialized_SubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestIsInitialized.SubMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional group SubGroup = 1 { ... };
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
        *subgroup_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestIsInitialized_SubMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestIsInitialized.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestIsInitialized_SubMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestIsInitialized_SubMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestIsInitialized.SubMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestIsInitialized.SubMessage)
    MergeFrom(*source);
  }
}

void TestIsInitialized_SubMessage::MergeFrom(const TestIsInitialized_SubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestIsInitialized.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subgroup()) {
    _internal_mutable_subgroup()->::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup::MergeFrom(from._internal_subgroup());
  }
}

void TestIsInitialized_SubMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestIsInitialized.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestIsInitialized_SubMessage::CopyFrom(const TestIsInitialized_SubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestIsInitialized.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIsInitialized_SubMessage::IsInitialized() const {
  if (_internal_has_subgroup()) {
    if (!subgroup_->IsInitialized()) return false;
  }
  return true;
}

void TestIsInitialized_SubMessage::InternalSwap(TestIsInitialized_SubMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(subgroup_, other->subgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestIsInitialized_SubMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestIsInitialized::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestIsInitialized_default_instance_._instance.get_mutable()->sub_message_ = const_cast< ::protobuf_unittest::TestIsInitialized_SubMessage*>(
      ::protobuf_unittest::TestIsInitialized_SubMessage::internal_default_instance());
}
class TestIsInitialized::_Internal {
 public:
  using HasBits = decltype(std::declval<TestIsInitialized>()._has_bits_);
  static const ::protobuf_unittest::TestIsInitialized_SubMessage& sub_message(const TestIsInitialized* msg);
  static void set_has_sub_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestIsInitialized_SubMessage&
TestIsInitialized::_Internal::sub_message(const TestIsInitialized* msg) {
  return *msg->sub_message_;
}
void TestIsInitialized::unsafe_arena_set_allocated_sub_message(
    ::protobuf_unittest::TestIsInitialized_SubMessage* sub_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete sub_message_;
  }
  sub_message_ = sub_message;
  if (sub_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestIsInitialized.sub_message)
}
TestIsInitialized::TestIsInitialized()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestIsInitialized)
}
TestIsInitialized::TestIsInitialized(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestIsInitialized)
}
TestIsInitialized::TestIsInitialized(const TestIsInitialized& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sub_message()) {
    sub_message_ = new ::protobuf_unittest::TestIsInitialized_SubMessage(*from.sub_message_);
  } else {
    sub_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestIsInitialized)
}

void TestIsInitialized::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestIsInitialized_google_2fprotobuf_2funittest_2eproto.base);
  sub_message_ = nullptr;
}

TestIsInitialized::~TestIsInitialized() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestIsInitialized)
  SharedDtor();
}

void TestIsInitialized::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete sub_message_;
}

void TestIsInitialized::ArenaDtor(void* object) {
  TestIsInitialized* _this = reinterpret_cast< TestIsInitialized* >(object);
  (void)_this;
}
void TestIsInitialized::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestIsInitialized::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestIsInitialized& TestIsInitialized::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestIsInitialized_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestIsInitialized::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestIsInitialized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sub_message_ != nullptr);
    sub_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestIsInitialized::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestIsInitialized.SubMessage sub_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestIsInitialized::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestIsInitialized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestIsInitialized.SubMessage sub_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sub_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestIsInitialized)
  return target;
}

size_t TestIsInitialized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestIsInitialized)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestIsInitialized.SubMessage sub_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestIsInitialized::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestIsInitialized)
  GOOGLE_DCHECK_NE(&from, this);
  const TestIsInitialized* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestIsInitialized>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestIsInitialized)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestIsInitialized)
    MergeFrom(*source);
  }
}

void TestIsInitialized::MergeFrom(const TestIsInitialized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestIsInitialized)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sub_message()) {
    _internal_mutable_sub_message()->::protobuf_unittest::TestIsInitialized_SubMessage::MergeFrom(from._internal_sub_message());
  }
}

void TestIsInitialized::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestIsInitialized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestIsInitialized::CopyFrom(const TestIsInitialized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestIsInitialized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIsInitialized::IsInitialized() const {
  if (_internal_has_sub_message()) {
    if (!sub_message_->IsInitialized()) return false;
  }
  return true;
}

void TestIsInitialized::InternalSwap(TestIsInitialized* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sub_message_, other->sub_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestIsInitialized::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestDupFieldNumber_Foo::InitAsDefaultInstance() {
}
class TestDupFieldNumber_Foo::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDupFieldNumber_Foo>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestDupFieldNumber_Foo::TestDupFieldNumber_Foo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestDupFieldNumber.Foo)
}
TestDupFieldNumber_Foo::TestDupFieldNumber_Foo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDupFieldNumber.Foo)
}
TestDupFieldNumber_Foo::TestDupFieldNumber_Foo(const TestDupFieldNumber_Foo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDupFieldNumber.Foo)
}

void TestDupFieldNumber_Foo::SharedCtor() {
  a_ = 0;
}

TestDupFieldNumber_Foo::~TestDupFieldNumber_Foo() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDupFieldNumber.Foo)
  SharedDtor();
}

void TestDupFieldNumber_Foo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestDupFieldNumber_Foo::ArenaDtor(void* object) {
  TestDupFieldNumber_Foo* _this = reinterpret_cast< TestDupFieldNumber_Foo* >(object);
  (void)_this;
}
void TestDupFieldNumber_Foo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestDupFieldNumber_Foo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestDupFieldNumber_Foo& TestDupFieldNumber_Foo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestDupFieldNumber_Foo_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestDupFieldNumber_Foo::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDupFieldNumber.Foo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestDupFieldNumber_Foo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestDupFieldNumber_Foo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDupFieldNumber.Foo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDupFieldNumber.Foo)
  return target;
}

size_t TestDupFieldNumber_Foo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDupFieldNumber.Foo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDupFieldNumber_Foo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestDupFieldNumber.Foo)
  GOOGLE_DCHECK_NE(&from, this);
  const TestDupFieldNumber_Foo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestDupFieldNumber_Foo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestDupFieldNumber.Foo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestDupFieldNumber.Foo)
    MergeFrom(*source);
  }
}

void TestDupFieldNumber_Foo::MergeFrom(const TestDupFieldNumber_Foo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDupFieldNumber.Foo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void TestDupFieldNumber_Foo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestDupFieldNumber.Foo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDupFieldNumber_Foo::CopyFrom(const TestDupFieldNumber_Foo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDupFieldNumber.Foo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDupFieldNumber_Foo::IsInitialized() const {
  return true;
}

void TestDupFieldNumber_Foo::InternalSwap(TestDupFieldNumber_Foo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDupFieldNumber_Foo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestDupFieldNumber_Bar::InitAsDefaultInstance() {
}
class TestDupFieldNumber_Bar::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDupFieldNumber_Bar>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestDupFieldNumber_Bar::TestDupFieldNumber_Bar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestDupFieldNumber.Bar)
}
TestDupFieldNumber_Bar::TestDupFieldNumber_Bar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDupFieldNumber.Bar)
}
TestDupFieldNumber_Bar::TestDupFieldNumber_Bar(const TestDupFieldNumber_Bar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDupFieldNumber.Bar)
}

void TestDupFieldNumber_Bar::SharedCtor() {
  a_ = 0;
}

TestDupFieldNumber_Bar::~TestDupFieldNumber_Bar() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDupFieldNumber.Bar)
  SharedDtor();
}

void TestDupFieldNumber_Bar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestDupFieldNumber_Bar::ArenaDtor(void* object) {
  TestDupFieldNumber_Bar* _this = reinterpret_cast< TestDupFieldNumber_Bar* >(object);
  (void)_this;
}
void TestDupFieldNumber_Bar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestDupFieldNumber_Bar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestDupFieldNumber_Bar& TestDupFieldNumber_Bar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestDupFieldNumber_Bar_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestDupFieldNumber_Bar::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDupFieldNumber.Bar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestDupFieldNumber_Bar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestDupFieldNumber_Bar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDupFieldNumber.Bar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDupFieldNumber.Bar)
  return target;
}

size_t TestDupFieldNumber_Bar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDupFieldNumber.Bar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDupFieldNumber_Bar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestDupFieldNumber.Bar)
  GOOGLE_DCHECK_NE(&from, this);
  const TestDupFieldNumber_Bar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestDupFieldNumber_Bar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestDupFieldNumber.Bar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestDupFieldNumber.Bar)
    MergeFrom(*source);
  }
}

void TestDupFieldNumber_Bar::MergeFrom(const TestDupFieldNumber_Bar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDupFieldNumber.Bar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void TestDupFieldNumber_Bar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestDupFieldNumber.Bar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDupFieldNumber_Bar::CopyFrom(const TestDupFieldNumber_Bar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDupFieldNumber.Bar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDupFieldNumber_Bar::IsInitialized() const {
  return true;
}

void TestDupFieldNumber_Bar::InternalSwap(TestDupFieldNumber_Bar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDupFieldNumber_Bar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestDupFieldNumber::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestDupFieldNumber_default_instance_._instance.get_mutable()->foo_ = const_cast< ::protobuf_unittest::TestDupFieldNumber_Foo*>(
      ::protobuf_unittest::TestDupFieldNumber_Foo::internal_default_instance());
  ::protobuf_unittest::_TestDupFieldNumber_default_instance_._instance.get_mutable()->bar_ = const_cast< ::protobuf_unittest::TestDupFieldNumber_Bar*>(
      ::protobuf_unittest::TestDupFieldNumber_Bar::internal_default_instance());
}
class TestDupFieldNumber::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDupFieldNumber>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf_unittest::TestDupFieldNumber_Foo& foo(const TestDupFieldNumber* msg);
  static void set_has_foo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestDupFieldNumber_Bar& bar(const TestDupFieldNumber* msg);
  static void set_has_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestDupFieldNumber_Foo&
TestDupFieldNumber::_Internal::foo(const TestDupFieldNumber* msg) {
  return *msg->foo_;
}
const ::protobuf_unittest::TestDupFieldNumber_Bar&
TestDupFieldNumber::_Internal::bar(const TestDupFieldNumber* msg) {
  return *msg->bar_;
}
void TestDupFieldNumber::unsafe_arena_set_allocated_foo(
    ::protobuf_unittest::TestDupFieldNumber_Foo* foo) {
  if (GetArenaNoVirtual() == nullptr) {
    delete foo_;
  }
  foo_ = foo;
  if (foo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDupFieldNumber.foo)
}
void TestDupFieldNumber::unsafe_arena_set_allocated_bar(
    ::protobuf_unittest::TestDupFieldNumber_Bar* bar) {
  if (GetArenaNoVirtual() == nullptr) {
    delete bar_;
  }
  bar_ = bar;
  if (bar) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDupFieldNumber.bar)
}
TestDupFieldNumber::TestDupFieldNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestDupFieldNumber)
}
TestDupFieldNumber::TestDupFieldNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDupFieldNumber)
}
TestDupFieldNumber::TestDupFieldNumber(const TestDupFieldNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_foo()) {
    foo_ = new ::protobuf_unittest::TestDupFieldNumber_Foo(*from.foo_);
  } else {
    foo_ = nullptr;
  }
  if (from._internal_has_bar()) {
    bar_ = new ::protobuf_unittest::TestDupFieldNumber_Bar(*from.bar_);
  } else {
    bar_ = nullptr;
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDupFieldNumber)
}

void TestDupFieldNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestDupFieldNumber_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&foo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&foo_)) + sizeof(a_));
}

TestDupFieldNumber::~TestDupFieldNumber() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDupFieldNumber)
  SharedDtor();
}

void TestDupFieldNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete foo_;
  if (this != internal_default_instance()) delete bar_;
}

void TestDupFieldNumber::ArenaDtor(void* object) {
  TestDupFieldNumber* _this = reinterpret_cast< TestDupFieldNumber* >(object);
  (void)_this;
}
void TestDupFieldNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestDupFieldNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestDupFieldNumber& TestDupFieldNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestDupFieldNumber_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestDupFieldNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDupFieldNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(foo_ != nullptr);
      foo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bar_ != nullptr);
      bar_->Clear();
    }
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestDupFieldNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Foo = 2 { ... };
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 19)) {
          ptr = ctx->ParseGroup(_internal_mutable_foo(), ptr, 19);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Bar = 3 { ... };
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 27)) {
          ptr = ctx->ParseGroup(_internal_mutable_bar(), ptr, 27);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestDupFieldNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDupFieldNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional group Foo = 2 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        2, _Internal::foo(this), target, stream);
  }

  // optional group Bar = 3 { ... };
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        3, _Internal::bar(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDupFieldNumber)
  return target;
}

size_t TestDupFieldNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDupFieldNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional group Foo = 2 { ... };
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *foo_);
    }

    // optional group Bar = 3 { ... };
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *bar_);
    }

    // optional int32 a = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDupFieldNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestDupFieldNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const TestDupFieldNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestDupFieldNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestDupFieldNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestDupFieldNumber)
    MergeFrom(*source);
  }
}

void TestDupFieldNumber::MergeFrom(const TestDupFieldNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDupFieldNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_foo()->::protobuf_unittest::TestDupFieldNumber_Foo::MergeFrom(from._internal_foo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bar()->::protobuf_unittest::TestDupFieldNumber_Bar::MergeFrom(from._internal_bar());
    }
    if (cached_has_bits & 0x00000004u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestDupFieldNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestDupFieldNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDupFieldNumber::CopyFrom(const TestDupFieldNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDupFieldNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDupFieldNumber::IsInitialized() const {
  return true;
}

void TestDupFieldNumber::InternalSwap(TestDupFieldNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foo_, other->foo_);
  swap(bar_, other->bar_);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDupFieldNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestEagerMessage::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestEagerMessage_default_instance_._instance.get_mutable()->sub_message_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
}
class TestEagerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEagerMessage>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& sub_message(const TestEagerMessage* msg);
  static void set_has_sub_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestEagerMessage::_Internal::sub_message(const TestEagerMessage* msg) {
  return *msg->sub_message_;
}
void TestEagerMessage::unsafe_arena_set_allocated_sub_message(
    ::protobuf_unittest::TestAllTypes* sub_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete sub_message_;
  }
  sub_message_ = sub_message;
  if (sub_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestEagerMessage.sub_message)
}
TestEagerMessage::TestEagerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestEagerMessage)
}
TestEagerMessage::TestEagerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEagerMessage)
}
TestEagerMessage::TestEagerMessage(const TestEagerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sub_message()) {
    sub_message_ = new ::protobuf_unittest::TestAllTypes(*from.sub_message_);
  } else {
    sub_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEagerMessage)
}

void TestEagerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestEagerMessage_google_2fprotobuf_2funittest_2eproto.base);
  sub_message_ = nullptr;
}

TestEagerMessage::~TestEagerMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEagerMessage)
  SharedDtor();
}

void TestEagerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete sub_message_;
}

void TestEagerMessage::ArenaDtor(void* object) {
  TestEagerMessage* _this = reinterpret_cast< TestEagerMessage* >(object);
  (void)_this;
}
void TestEagerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestEagerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestEagerMessage& TestEagerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestEagerMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestEagerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEagerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sub_message_ != nullptr);
    sub_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestEagerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestEagerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEagerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sub_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEagerMessage)
  return target;
}

size_t TestEagerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEagerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEagerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestEagerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEagerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestEagerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestEagerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestEagerMessage)
    MergeFrom(*source);
  }
}

void TestEagerMessage::MergeFrom(const TestEagerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEagerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sub_message()) {
    _internal_mutable_sub_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_sub_message());
  }
}

void TestEagerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestEagerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEagerMessage::CopyFrom(const TestEagerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEagerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEagerMessage::IsInitialized() const {
  return true;
}

void TestEagerMessage::InternalSwap(TestEagerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sub_message_, other->sub_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEagerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestLazyMessage::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestLazyMessage_default_instance_._instance.get_mutable()->sub_message_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
}
class TestLazyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestLazyMessage>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& sub_message(const TestLazyMessage* msg);
  static void set_has_sub_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestLazyMessage::_Internal::sub_message(const TestLazyMessage* msg) {
  return *msg->sub_message_;
}
void TestLazyMessage::unsafe_arena_set_allocated_sub_message(
    ::protobuf_unittest::TestAllTypes* sub_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete sub_message_;
  }
  sub_message_ = sub_message;
  if (sub_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestLazyMessage.sub_message)
}
TestLazyMessage::TestLazyMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestLazyMessage)
}
TestLazyMessage::TestLazyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestLazyMessage)
}
TestLazyMessage::TestLazyMessage(const TestLazyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sub_message()) {
    sub_message_ = new ::protobuf_unittest::TestAllTypes(*from.sub_message_);
  } else {
    sub_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestLazyMessage)
}

void TestLazyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestLazyMessage_google_2fprotobuf_2funittest_2eproto.base);
  sub_message_ = nullptr;
}

TestLazyMessage::~TestLazyMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestLazyMessage)
  SharedDtor();
}

void TestLazyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete sub_message_;
}

void TestLazyMessage::ArenaDtor(void* object) {
  TestLazyMessage* _this = reinterpret_cast< TestLazyMessage* >(object);
  (void)_this;
}
void TestLazyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestLazyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestLazyMessage& TestLazyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestLazyMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestLazyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestLazyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sub_message_ != nullptr);
    sub_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestLazyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestLazyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestLazyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sub_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestLazyMessage)
  return target;
}

size_t TestLazyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestLazyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestLazyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestLazyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestLazyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestLazyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestLazyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestLazyMessage)
    MergeFrom(*source);
  }
}

void TestLazyMessage::MergeFrom(const TestLazyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestLazyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sub_message()) {
    _internal_mutable_sub_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_sub_message());
  }
}

void TestLazyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestLazyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestLazyMessage::CopyFrom(const TestLazyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestLazyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestLazyMessage::IsInitialized() const {
  return true;
}

void TestLazyMessage::InternalSwap(TestLazyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sub_message_, other->sub_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestLazyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestNestedMessageHasBits_NestedMessage::InitAsDefaultInstance() {
}
class TestNestedMessageHasBits_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedMessageHasBits_NestedMessage>()._has_bits_);
};

TestNestedMessageHasBits_NestedMessage::TestNestedMessageHasBits_NestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
}
TestNestedMessageHasBits_NestedMessage::TestNestedMessageHasBits_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  nestedmessage_repeated_int32_(arena),
  nestedmessage_repeated_foreignmessage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
}
TestNestedMessageHasBits_NestedMessage::TestNestedMessageHasBits_NestedMessage(const TestNestedMessageHasBits_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      nestedmessage_repeated_int32_(from.nestedmessage_repeated_int32_),
      nestedmessage_repeated_foreignmessage_(from.nestedmessage_repeated_foreignmessage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
}

void TestNestedMessageHasBits_NestedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestNestedMessageHasBits_NestedMessage_google_2fprotobuf_2funittest_2eproto.base);
}

TestNestedMessageHasBits_NestedMessage::~TestNestedMessageHasBits_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  SharedDtor();
}

void TestNestedMessageHasBits_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestNestedMessageHasBits_NestedMessage::ArenaDtor(void* object) {
  TestNestedMessageHasBits_NestedMessage* _this = reinterpret_cast< TestNestedMessageHasBits_NestedMessage* >(object);
  (void)_this;
}
void TestNestedMessageHasBits_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestNestedMessageHasBits_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestNestedMessageHasBits_NestedMessage& TestNestedMessageHasBits_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestNestedMessageHasBits_NestedMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestNestedMessageHasBits_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nestedmessage_repeated_int32_.Clear();
  nestedmessage_repeated_foreignmessage_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestNestedMessageHasBits_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 nestedmessage_repeated_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nestedmessage_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nestedmessage_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignMessage nestedmessage_repeated_foreignmessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nestedmessage_repeated_foreignmessage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestNestedMessageHasBits_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 nestedmessage_repeated_int32 = 1;
  for (int i = 0, n = this->_internal_nestedmessage_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nestedmessage_repeated_int32(i), target);
  }

  // repeated .protobuf_unittest.ForeignMessage nestedmessage_repeated_foreignmessage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nestedmessage_repeated_foreignmessage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_nestedmessage_repeated_foreignmessage(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  return target;
}

size_t TestNestedMessageHasBits_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nestedmessage_repeated_int32 = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nestedmessage_repeated_int32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nestedmessage_repeated_int32_size());
    total_size += data_size;
  }

  // repeated .protobuf_unittest.ForeignMessage nestedmessage_repeated_foreignmessage = 2;
  total_size += 1UL * this->_internal_nestedmessage_repeated_foreignmessage_size();
  for (const auto& msg : this->nestedmessage_repeated_foreignmessage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestNestedMessageHasBits_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestNestedMessageHasBits_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestNestedMessageHasBits_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
    MergeFrom(*source);
  }
}

void TestNestedMessageHasBits_NestedMessage::MergeFrom(const TestNestedMessageHasBits_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nestedmessage_repeated_int32_.MergeFrom(from.nestedmessage_repeated_int32_);
  nestedmessage_repeated_foreignmessage_.MergeFrom(from.nestedmessage_repeated_foreignmessage_);
}

void TestNestedMessageHasBits_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNestedMessageHasBits_NestedMessage::CopyFrom(const TestNestedMessageHasBits_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedMessageHasBits_NestedMessage::IsInitialized() const {
  return true;
}

void TestNestedMessageHasBits_NestedMessage::InternalSwap(TestNestedMessageHasBits_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nestedmessage_repeated_int32_.InternalSwap(&other->nestedmessage_repeated_int32_);
  nestedmessage_repeated_foreignmessage_.InternalSwap(&other->nestedmessage_repeated_foreignmessage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedMessageHasBits_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestNestedMessageHasBits::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestNestedMessageHasBits_default_instance_._instance.get_mutable()->optional_nested_message_ = const_cast< ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage*>(
      ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage::internal_default_instance());
}
class TestNestedMessageHasBits::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedMessageHasBits>()._has_bits_);
  static const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage& optional_nested_message(const TestNestedMessageHasBits* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage&
TestNestedMessageHasBits::_Internal::optional_nested_message(const TestNestedMessageHasBits* msg) {
  return *msg->optional_nested_message_;
}
void TestNestedMessageHasBits::unsafe_arena_set_allocated_optional_nested_message(
    ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* optional_nested_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_nested_message_;
  }
  optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestNestedMessageHasBits.optional_nested_message)
}
TestNestedMessageHasBits::TestNestedMessageHasBits()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestNestedMessageHasBits)
}
TestNestedMessageHasBits::TestNestedMessageHasBits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedMessageHasBits)
}
TestNestedMessageHasBits::TestNestedMessageHasBits(const TestNestedMessageHasBits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedMessageHasBits)
}

void TestNestedMessageHasBits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestNestedMessageHasBits_google_2fprotobuf_2funittest_2eproto.base);
  optional_nested_message_ = nullptr;
}

TestNestedMessageHasBits::~TestNestedMessageHasBits() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedMessageHasBits)
  SharedDtor();
}

void TestNestedMessageHasBits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete optional_nested_message_;
}

void TestNestedMessageHasBits::ArenaDtor(void* object) {
  TestNestedMessageHasBits* _this = reinterpret_cast< TestNestedMessageHasBits* >(object);
  (void)_this;
}
void TestNestedMessageHasBits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestNestedMessageHasBits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestNestedMessageHasBits& TestNestedMessageHasBits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestNestedMessageHasBits_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestNestedMessageHasBits::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedMessageHasBits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(optional_nested_message_ != nullptr);
    optional_nested_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestNestedMessageHasBits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestNestedMessageHasBits.NestedMessage optional_nested_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestNestedMessageHasBits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedMessageHasBits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestNestedMessageHasBits.NestedMessage optional_nested_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::optional_nested_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedMessageHasBits)
  return target;
}

size_t TestNestedMessageHasBits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedMessageHasBits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestNestedMessageHasBits.NestedMessage optional_nested_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_nested_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestNestedMessageHasBits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestNestedMessageHasBits)
  GOOGLE_DCHECK_NE(&from, this);
  const TestNestedMessageHasBits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestNestedMessageHasBits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestNestedMessageHasBits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestNestedMessageHasBits)
    MergeFrom(*source);
  }
}

void TestNestedMessageHasBits::MergeFrom(const TestNestedMessageHasBits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedMessageHasBits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_optional_nested_message()) {
    _internal_mutable_optional_nested_message()->::protobuf_unittest::TestNestedMessageHasBits_NestedMessage::MergeFrom(from._internal_optional_nested_message());
  }
}

void TestNestedMessageHasBits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestNestedMessageHasBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNestedMessageHasBits::CopyFrom(const TestNestedMessageHasBits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedMessageHasBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedMessageHasBits::IsInitialized() const {
  return true;
}

void TestNestedMessageHasBits::InternalSwap(TestNestedMessageHasBits* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(optional_nested_message_, other->optional_nested_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedMessageHasBits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestCamelCaseFieldNames::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestCamelCaseFieldNames_default_instance_._instance.get_mutable()->messagefield_ = const_cast< ::protobuf_unittest::ForeignMessage*>(
      ::protobuf_unittest::ForeignMessage::internal_default_instance());
}
class TestCamelCaseFieldNames::_Internal {
 public:
  using HasBits = decltype(std::declval<TestCamelCaseFieldNames>()._has_bits_);
  static void set_has_primitivefield(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stringfield(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enumfield(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::protobuf_unittest::ForeignMessage& messagefield(const TestCamelCaseFieldNames* msg);
  static void set_has_messagefield(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stringpiecefield(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cordfield(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf_unittest::ForeignMessage&
TestCamelCaseFieldNames::_Internal::messagefield(const TestCamelCaseFieldNames* msg) {
  return *msg->messagefield_;
}
void TestCamelCaseFieldNames::unsafe_arena_set_allocated_messagefield(
    ::protobuf_unittest::ForeignMessage* messagefield) {
  if (GetArenaNoVirtual() == nullptr) {
    delete messagefield_;
  }
  messagefield_ = messagefield;
  if (messagefield) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestCamelCaseFieldNames.MessageField)
}
TestCamelCaseFieldNames::TestCamelCaseFieldNames()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestCamelCaseFieldNames)
}
TestCamelCaseFieldNames::TestCamelCaseFieldNames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeatedprimitivefield_(arena),
  repeatedstringfield_(arena),
  repeatedenumfield_(arena),
  repeatedmessagefield_(arena),
  repeatedstringpiecefield_(arena),
  repeatedcordfield_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestCamelCaseFieldNames)
}
TestCamelCaseFieldNames::TestCamelCaseFieldNames(const TestCamelCaseFieldNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeatedprimitivefield_(from.repeatedprimitivefield_),
      repeatedstringfield_(from.repeatedstringfield_),
      repeatedenumfield_(from.repeatedenumfield_),
      repeatedmessagefield_(from.repeatedmessagefield_),
      repeatedstringpiecefield_(from.repeatedstringpiecefield_),
      repeatedcordfield_(from.repeatedcordfield_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stringfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stringfield()) {
    stringfield_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stringfield(),
      GetArenaNoVirtual());
  }
  stringpiecefield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stringpiecefield()) {
    stringpiecefield_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stringpiecefield(),
      GetArenaNoVirtual());
  }
  cordfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cordfield()) {
    cordfield_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cordfield(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_messagefield()) {
    messagefield_ = new ::protobuf_unittest::ForeignMessage(*from.messagefield_);
  } else {
    messagefield_ = nullptr;
  }
  ::memcpy(&primitivefield_, &from.primitivefield_,
    static_cast<size_t>(reinterpret_cast<char*>(&enumfield_) -
    reinterpret_cast<char*>(&primitivefield_)) + sizeof(enumfield_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestCamelCaseFieldNames)
}

void TestCamelCaseFieldNames::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestCamelCaseFieldNames_google_2fprotobuf_2funittest_2eproto.base);
  stringfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stringpiecefield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cordfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&messagefield_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primitivefield_) -
      reinterpret_cast<char*>(&messagefield_)) + sizeof(primitivefield_));
  enumfield_ = 4;
}

TestCamelCaseFieldNames::~TestCamelCaseFieldNames() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestCamelCaseFieldNames)
  SharedDtor();
}

void TestCamelCaseFieldNames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  stringfield_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stringpiecefield_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cordfield_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete messagefield_;
}

void TestCamelCaseFieldNames::ArenaDtor(void* object) {
  TestCamelCaseFieldNames* _this = reinterpret_cast< TestCamelCaseFieldNames* >(object);
  (void)_this;
}
void TestCamelCaseFieldNames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestCamelCaseFieldNames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestCamelCaseFieldNames& TestCamelCaseFieldNames::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestCamelCaseFieldNames_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestCamelCaseFieldNames::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestCamelCaseFieldNames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeatedprimitivefield_.Clear();
  repeatedstringfield_.Clear();
  repeatedenumfield_.Clear();
  repeatedmessagefield_.Clear();
  repeatedstringpiecefield_.Clear();
  repeatedcordfield_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      stringfield_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      stringpiecefield_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      cordfield_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(messagefield_ != nullptr);
      messagefield_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    primitivefield_ = 0;
    enumfield_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestCamelCaseFieldNames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 PrimitiveField = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_primitivefield(&has_bits);
          primitivefield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string StringField = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stringfield();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.StringField");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum EnumField = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_enumfield(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessage MessageField = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagefield(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string StringPieceField = 5 [ctype = STRING_PIECE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stringpiecefield();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.StringPieceField");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string CordField = 6 [ctype = CORD];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_cordfield();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.CordField");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 RepeatedPrimitiveField = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeatedprimitivefield(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeatedprimitivefield(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string RepeatedStringField = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repeatedstringfield();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
              _internal_add_repeatedenumfield(static_cast<::protobuf_unittest::ForeignEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeatedenumfield(), ptr, ctx, ::protobuf_unittest::ForeignEnum_IsValid, &_internal_metadata_, 9);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeatedmessagefield(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repeatedstringpiecefield();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string RepeatedCordField = 12 [ctype = CORD];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repeatedcordfield();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestCamelCaseFieldNames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestCamelCaseFieldNames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 PrimitiveField = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_primitivefield(), target);
  }

  // optional string StringField = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringfield().data(), static_cast<int>(this->_internal_stringfield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.StringField");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stringfield(), target);
  }

  // optional .protobuf_unittest.ForeignEnum EnumField = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_enumfield(), target);
  }

  // optional .protobuf_unittest.ForeignMessage MessageField = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::messagefield(this), target, stream);
  }

  // optional string StringPieceField = 5 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringpiecefield().data(), static_cast<int>(this->_internal_stringpiecefield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.StringPieceField");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stringpiecefield(), target);
  }

  // optional string CordField = 6 [ctype = CORD];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cordfield().data(), static_cast<int>(this->_internal_cordfield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.CordField");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cordfield(), target);
  }

  // repeated int32 RepeatedPrimitiveField = 7;
  for (int i = 0, n = this->_internal_repeatedprimitivefield_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_repeatedprimitivefield(i), target);
  }

  // repeated string RepeatedStringField = 8;
  for (int i = 0, n = this->_internal_repeatedstringfield_size(); i < n; i++) {
    const auto& s = this->_internal_repeatedstringfield(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField");
    target = stream->WriteString(8, s, target);
  }

  // repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
  for (int i = 0, n = this->_internal_repeatedenumfield_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        9, this->_internal_repeatedenumfield(i), target);
  }

  // repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeatedmessagefield_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_repeatedmessagefield(i), target, stream);
  }

  // repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_repeatedstringpiecefield_size(); i < n; i++) {
    const auto& s = this->_internal_repeatedstringpiecefield(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField");
    target = stream->WriteString(11, s, target);
  }

  // repeated string RepeatedCordField = 12 [ctype = CORD];
  for (int i = 0, n = this->_internal_repeatedcordfield_size(); i < n; i++) {
    const auto& s = this->_internal_repeatedcordfield(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestCamelCaseFieldNames)
  return target;
}

size_t TestCamelCaseFieldNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestCamelCaseFieldNames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 RepeatedPrimitiveField = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeatedprimitivefield_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeatedprimitivefield_size());
    total_size += data_size;
  }

  // repeated string RepeatedStringField = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeatedstringfield_.size());
  for (int i = 0, n = repeatedstringfield_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeatedstringfield_.Get(i));
  }

  // repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeatedenumfield_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeatedenumfield(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
  total_size += 1UL * this->_internal_repeatedmessagefield_size();
  for (const auto& msg : this->repeatedmessagefield_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeatedstringpiecefield_.size());
  for (int i = 0, n = repeatedstringpiecefield_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeatedstringpiecefield_.Get(i));
  }

  // repeated string RepeatedCordField = 12 [ctype = CORD];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeatedcordfield_.size());
  for (int i = 0, n = repeatedcordfield_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeatedcordfield_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string StringField = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringfield());
    }

    // optional string StringPieceField = 5 [ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringpiecefield());
    }

    // optional string CordField = 6 [ctype = CORD];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cordfield());
    }

    // optional .protobuf_unittest.ForeignMessage MessageField = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *messagefield_);
    }

    // optional int32 PrimitiveField = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_primitivefield());
    }

    // optional .protobuf_unittest.ForeignEnum EnumField = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enumfield());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestCamelCaseFieldNames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestCamelCaseFieldNames)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCamelCaseFieldNames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestCamelCaseFieldNames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestCamelCaseFieldNames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestCamelCaseFieldNames)
    MergeFrom(*source);
  }
}

void TestCamelCaseFieldNames::MergeFrom(const TestCamelCaseFieldNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestCamelCaseFieldNames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeatedprimitivefield_.MergeFrom(from.repeatedprimitivefield_);
  repeatedstringfield_.MergeFrom(from.repeatedstringfield_);
  repeatedenumfield_.MergeFrom(from.repeatedenumfield_);
  repeatedmessagefield_.MergeFrom(from.repeatedmessagefield_);
  repeatedstringpiecefield_.MergeFrom(from.repeatedstringpiecefield_);
  repeatedcordfield_.MergeFrom(from.repeatedcordfield_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stringfield(from._internal_stringfield());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_stringpiecefield(from._internal_stringpiecefield());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cordfield(from._internal_cordfield());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_messagefield()->::protobuf_unittest::ForeignMessage::MergeFrom(from._internal_messagefield());
    }
    if (cached_has_bits & 0x00000010u) {
      primitivefield_ = from.primitivefield_;
    }
    if (cached_has_bits & 0x00000020u) {
      enumfield_ = from.enumfield_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestCamelCaseFieldNames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestCamelCaseFieldNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCamelCaseFieldNames::CopyFrom(const TestCamelCaseFieldNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestCamelCaseFieldNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCamelCaseFieldNames::IsInitialized() const {
  return true;
}

void TestCamelCaseFieldNames::InternalSwap(TestCamelCaseFieldNames* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeatedprimitivefield_.InternalSwap(&other->repeatedprimitivefield_);
  repeatedstringfield_.InternalSwap(&other->repeatedstringfield_);
  repeatedenumfield_.InternalSwap(&other->repeatedenumfield_);
  repeatedmessagefield_.InternalSwap(&other->repeatedmessagefield_);
  repeatedstringpiecefield_.InternalSwap(&other->repeatedstringpiecefield_);
  repeatedcordfield_.InternalSwap(&other->repeatedcordfield_);
  stringfield_.Swap(&other->stringfield_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stringpiecefield_.Swap(&other->stringpiecefield_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cordfield_.Swap(&other->cordfield_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(messagefield_, other->messagefield_);
  swap(primitivefield_, other->primitivefield_);
  swap(enumfield_, other->enumfield_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCamelCaseFieldNames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldOrderings_NestedMessage::InitAsDefaultInstance() {
}
class TestFieldOrderings_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldOrderings_NestedMessage>()._has_bits_);
  static void set_has_oo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestFieldOrderings_NestedMessage::TestFieldOrderings_NestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestFieldOrderings.NestedMessage)
}
TestFieldOrderings_NestedMessage::TestFieldOrderings_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestFieldOrderings.NestedMessage)
}
TestFieldOrderings_NestedMessage::TestFieldOrderings_NestedMessage(const TestFieldOrderings_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oo_, &from.oo_,
    static_cast<size_t>(reinterpret_cast<char*>(&bb_) -
    reinterpret_cast<char*>(&oo_)) + sizeof(bb_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestFieldOrderings.NestedMessage)
}

void TestFieldOrderings_NestedMessage::SharedCtor() {
  ::memset(&oo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bb_) -
      reinterpret_cast<char*>(&oo_)) + sizeof(bb_));
}

TestFieldOrderings_NestedMessage::~TestFieldOrderings_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestFieldOrderings.NestedMessage)
  SharedDtor();
}

void TestFieldOrderings_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestFieldOrderings_NestedMessage::ArenaDtor(void* object) {
  TestFieldOrderings_NestedMessage* _this = reinterpret_cast< TestFieldOrderings_NestedMessage* >(object);
  (void)_this;
}
void TestFieldOrderings_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldOrderings_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldOrderings_NestedMessage& TestFieldOrderings_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldOrderings_NestedMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestFieldOrderings_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&oo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bb_) -
        reinterpret_cast<char*>(&oo_)) + sizeof(bb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestFieldOrderings_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 oo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_oo(&has_bits);
          oo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldOrderings_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bb = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  // optional int64 oo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_oo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestFieldOrderings.NestedMessage)
  return target;
}

size_t TestFieldOrderings_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 oo = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_oo());
    }

    // optional int32 bb = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldOrderings_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldOrderings_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldOrderings_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestFieldOrderings.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestFieldOrderings.NestedMessage)
    MergeFrom(*source);
  }
}

void TestFieldOrderings_NestedMessage::MergeFrom(const TestFieldOrderings_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      oo_ = from.oo_;
    }
    if (cached_has_bits & 0x00000002u) {
      bb_ = from.bb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestFieldOrderings_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldOrderings_NestedMessage::CopyFrom(const TestFieldOrderings_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldOrderings_NestedMessage::IsInitialized() const {
  return true;
}

void TestFieldOrderings_NestedMessage::InternalSwap(TestFieldOrderings_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(oo_, other->oo_);
  swap(bb_, other->bb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldOrderings_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldOrderings::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestFieldOrderings_default_instance_._instance.get_mutable()->optional_nested_message_ = const_cast< ::protobuf_unittest::TestFieldOrderings_NestedMessage*>(
      ::protobuf_unittest::TestFieldOrderings_NestedMessage::internal_default_instance());
}
class TestFieldOrderings::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldOrderings>()._has_bits_);
  static void set_has_my_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_my_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_my_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_unittest::TestFieldOrderings_NestedMessage& optional_nested_message(const TestFieldOrderings* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestFieldOrderings_NestedMessage&
TestFieldOrderings::_Internal::optional_nested_message(const TestFieldOrderings* msg) {
  return *msg->optional_nested_message_;
}
void TestFieldOrderings::unsafe_arena_set_allocated_optional_nested_message(
    ::protobuf_unittest::TestFieldOrderings_NestedMessage* optional_nested_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_nested_message_;
  }
  optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestFieldOrderings.optional_nested_message)
}
TestFieldOrderings::TestFieldOrderings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestFieldOrderings)
}
TestFieldOrderings::TestFieldOrderings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestFieldOrderings)
}
TestFieldOrderings::TestFieldOrderings(const TestFieldOrderings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_my_string()) {
    my_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_my_string(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_unittest::TestFieldOrderings_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  ::memcpy(&my_int_, &from.my_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&my_float_) -
    reinterpret_cast<char*>(&my_int_)) + sizeof(my_float_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestFieldOrderings)
}

void TestFieldOrderings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFieldOrderings_google_2fprotobuf_2funittest_2eproto.base);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_nested_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&my_float_) -
      reinterpret_cast<char*>(&optional_nested_message_)) + sizeof(my_float_));
}

TestFieldOrderings::~TestFieldOrderings() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestFieldOrderings)
  SharedDtor();
}

void TestFieldOrderings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  my_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optional_nested_message_;
}

void TestFieldOrderings::ArenaDtor(void* object) {
  TestFieldOrderings* _this = reinterpret_cast< TestFieldOrderings* >(object);
  (void)_this;
}
void TestFieldOrderings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldOrderings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldOrderings& TestFieldOrderings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldOrderings_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestFieldOrderings::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestFieldOrderings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      my_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(optional_nested_message_ != nullptr);
      optional_nested_message_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&my_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&my_float_) -
        reinterpret_cast<char*>(&my_int_)) + sizeof(my_float_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestFieldOrderings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 my_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_my_int(&has_bits);
          my_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string my_string = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_my_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestFieldOrderings.my_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float my_float = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_my_float(&has_bits);
          my_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestFieldOrderings.NestedMessage optional_nested_message = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((16u <= tag && tag < 88u) ||
          (96u <= tag && tag < 808u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldOrderings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestFieldOrderings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 my_int = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_my_int(), target);
  }

  // Extension range [2, 11)
  target = _extensions_._InternalSerialize(
      2, 11, target, stream);

  // optional string my_string = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestFieldOrderings.my_string");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_my_string(), target);
  }

  // Extension range [12, 101)
  target = _extensions_._InternalSerialize(
      12, 101, target, stream);

  // optional float my_float = 101;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(101, this->_internal_my_float(), target);
  }

  // optional .protobuf_unittest.TestFieldOrderings.NestedMessage optional_nested_message = 200;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::optional_nested_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestFieldOrderings)
  return target;
}

size_t TestFieldOrderings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestFieldOrderings)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string my_string = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_my_string());
    }

    // optional .protobuf_unittest.TestFieldOrderings.NestedMessage optional_nested_message = 200;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_nested_message_);
    }

    // optional int64 my_int = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_my_int());
    }

    // optional float my_float = 101;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldOrderings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestFieldOrderings)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldOrderings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldOrderings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestFieldOrderings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestFieldOrderings)
    MergeFrom(*source);
  }
}

void TestFieldOrderings::MergeFrom(const TestFieldOrderings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestFieldOrderings)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_my_string(from._internal_my_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_optional_nested_message()->::protobuf_unittest::TestFieldOrderings_NestedMessage::MergeFrom(from._internal_optional_nested_message());
    }
    if (cached_has_bits & 0x00000004u) {
      my_int_ = from.my_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      my_float_ = from.my_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestFieldOrderings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestFieldOrderings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldOrderings::CopyFrom(const TestFieldOrderings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestFieldOrderings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldOrderings::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestFieldOrderings::InternalSwap(TestFieldOrderings* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  my_string_.Swap(&other->my_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(optional_nested_message_, other->optional_nested_message_);
  swap(my_int_, other->my_int_);
  swap(my_float_, other->my_float_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldOrderings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestExtensionOrderings1::InitAsDefaultInstance() {
}
class TestExtensionOrderings1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionOrderings1>()._has_bits_);
  static void set_has_my_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestExtensionOrderings1::TestExtensionOrderings1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestExtensionOrderings1)
}
TestExtensionOrderings1::TestExtensionOrderings1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtensionOrderings1)
}
TestExtensionOrderings1::TestExtensionOrderings1(const TestExtensionOrderings1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_my_string()) {
    my_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_my_string(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtensionOrderings1)
}

void TestExtensionOrderings1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestExtensionOrderings1_google_2fprotobuf_2funittest_2eproto.base);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestExtensionOrderings1::~TestExtensionOrderings1() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtensionOrderings1)
  SharedDtor();
}

void TestExtensionOrderings1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  my_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestExtensionOrderings1::ArenaDtor(void* object) {
  TestExtensionOrderings1* _this = reinterpret_cast< TestExtensionOrderings1* >(object);
  (void)_this;
}
void TestExtensionOrderings1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestExtensionOrderings1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestExtensionOrderings1& TestExtensionOrderings1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestExtensionOrderings1_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestExtensionOrderings1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtensionOrderings1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    my_string_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestExtensionOrderings1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string my_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_my_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestExtensionOrderings1.my_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestExtensionOrderings1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtensionOrderings1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string my_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtensionOrderings1.my_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_my_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtensionOrderings1)
  return target;
}

size_t TestExtensionOrderings1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtensionOrderings1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string my_string = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_my_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestExtensionOrderings1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestExtensionOrderings1)
  GOOGLE_DCHECK_NE(&from, this);
  const TestExtensionOrderings1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestExtensionOrderings1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestExtensionOrderings1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestExtensionOrderings1)
    MergeFrom(*source);
  }
}

void TestExtensionOrderings1::MergeFrom(const TestExtensionOrderings1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtensionOrderings1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_my_string()) {
    _internal_set_my_string(from._internal_my_string());
  }
}

void TestExtensionOrderings1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestExtensionOrderings1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestExtensionOrderings1::CopyFrom(const TestExtensionOrderings1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtensionOrderings1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionOrderings1::IsInitialized() const {
  return true;
}

void TestExtensionOrderings1::InternalSwap(TestExtensionOrderings1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  my_string_.Swap(&other->my_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtensionOrderings1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestExtensionOrderings2_TestExtensionOrderings3::InitAsDefaultInstance() {
}
class TestExtensionOrderings2_TestExtensionOrderings3::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionOrderings2_TestExtensionOrderings3>()._has_bits_);
  static void set_has_my_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestExtensionOrderings2_TestExtensionOrderings3::TestExtensionOrderings2_TestExtensionOrderings3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
}
TestExtensionOrderings2_TestExtensionOrderings3::TestExtensionOrderings2_TestExtensionOrderings3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
}
TestExtensionOrderings2_TestExtensionOrderings3::TestExtensionOrderings2_TestExtensionOrderings3(const TestExtensionOrderings2_TestExtensionOrderings3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_my_string()) {
    my_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_my_string(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
}

void TestExtensionOrderings2_TestExtensionOrderings3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestExtensionOrderings2_TestExtensionOrderings3_google_2fprotobuf_2funittest_2eproto.base);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestExtensionOrderings2_TestExtensionOrderings3::~TestExtensionOrderings2_TestExtensionOrderings3() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  SharedDtor();
}

void TestExtensionOrderings2_TestExtensionOrderings3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  my_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestExtensionOrderings2_TestExtensionOrderings3::ArenaDtor(void* object) {
  TestExtensionOrderings2_TestExtensionOrderings3* _this = reinterpret_cast< TestExtensionOrderings2_TestExtensionOrderings3* >(object);
  (void)_this;
}
void TestExtensionOrderings2_TestExtensionOrderings3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestExtensionOrderings2_TestExtensionOrderings3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestExtensionOrderings2_TestExtensionOrderings3& TestExtensionOrderings2_TestExtensionOrderings3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestExtensionOrderings2_TestExtensionOrderings3_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestExtensionOrderings2_TestExtensionOrderings3::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    my_string_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestExtensionOrderings2_TestExtensionOrderings3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string my_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_my_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.my_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestExtensionOrderings2_TestExtensionOrderings3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string my_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.my_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_my_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  return target;
}

size_t TestExtensionOrderings2_TestExtensionOrderings3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string my_string = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_my_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestExtensionOrderings2_TestExtensionOrderings3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  GOOGLE_DCHECK_NE(&from, this);
  const TestExtensionOrderings2_TestExtensionOrderings3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestExtensionOrderings2_TestExtensionOrderings3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
    MergeFrom(*source);
  }
}

void TestExtensionOrderings2_TestExtensionOrderings3::MergeFrom(const TestExtensionOrderings2_TestExtensionOrderings3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_my_string()) {
    _internal_set_my_string(from._internal_my_string());
  }
}

void TestExtensionOrderings2_TestExtensionOrderings3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestExtensionOrderings2_TestExtensionOrderings3::CopyFrom(const TestExtensionOrderings2_TestExtensionOrderings3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionOrderings2_TestExtensionOrderings3::IsInitialized() const {
  return true;
}

void TestExtensionOrderings2_TestExtensionOrderings3::InternalSwap(TestExtensionOrderings2_TestExtensionOrderings3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  my_string_.Swap(&other->my_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtensionOrderings2_TestExtensionOrderings3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestExtensionOrderings2::InitAsDefaultInstance() {
}
class TestExtensionOrderings2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionOrderings2>()._has_bits_);
  static void set_has_my_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestExtensionOrderings2::TestExtensionOrderings2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestExtensionOrderings2)
}
TestExtensionOrderings2::TestExtensionOrderings2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtensionOrderings2)
}
TestExtensionOrderings2::TestExtensionOrderings2(const TestExtensionOrderings2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_my_string()) {
    my_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_my_string(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtensionOrderings2)
}

void TestExtensionOrderings2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestExtensionOrderings2_google_2fprotobuf_2funittest_2eproto.base);
  my_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestExtensionOrderings2::~TestExtensionOrderings2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtensionOrderings2)
  SharedDtor();
}

void TestExtensionOrderings2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  my_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestExtensionOrderings2::ArenaDtor(void* object) {
  TestExtensionOrderings2* _this = reinterpret_cast< TestExtensionOrderings2* >(object);
  (void)_this;
}
void TestExtensionOrderings2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestExtensionOrderings2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestExtensionOrderings2& TestExtensionOrderings2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestExtensionOrderings2_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestExtensionOrderings2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtensionOrderings2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    my_string_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestExtensionOrderings2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string my_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_my_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestExtensionOrderings2.my_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestExtensionOrderings2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtensionOrderings2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string my_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtensionOrderings2.my_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_my_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtensionOrderings2)
  return target;
}

size_t TestExtensionOrderings2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtensionOrderings2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string my_string = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_my_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestExtensionOrderings2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestExtensionOrderings2)
  GOOGLE_DCHECK_NE(&from, this);
  const TestExtensionOrderings2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestExtensionOrderings2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestExtensionOrderings2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestExtensionOrderings2)
    MergeFrom(*source);
  }
}

void TestExtensionOrderings2::MergeFrom(const TestExtensionOrderings2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtensionOrderings2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_my_string()) {
    _internal_set_my_string(from._internal_my_string());
  }
}

void TestExtensionOrderings2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestExtensionOrderings2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestExtensionOrderings2::CopyFrom(const TestExtensionOrderings2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtensionOrderings2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionOrderings2::IsInitialized() const {
  return true;
}

void TestExtensionOrderings2::InternalSwap(TestExtensionOrderings2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  my_string_.Swap(&other->my_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtensionOrderings2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestExtremeDefaultValues::InitAsDefaultInstance() {
}
class TestExtremeDefaultValues::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtremeDefaultValues>()._has_bits_);
  static void set_has_escaped_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_large_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_large_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_small_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_small_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_really_small_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_really_small_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_utf8_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zero_float(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_one_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_small_float(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_negative_one_float(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_negative_float(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_large_float(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_small_negative_float(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_inf_double(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_neg_inf_double(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_nan_double(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_inf_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_neg_inf_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_nan_float(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_cpp_trigraph(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_with_zero(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes_with_zero(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_string_piece_with_zero(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cord_with_zero(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_replacement_string(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_;
TestExtremeDefaultValues::TestExtremeDefaultValues()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestExtremeDefaultValues)
}
TestExtremeDefaultValues::TestExtremeDefaultValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtremeDefaultValues)
}
TestExtremeDefaultValues::TestExtremeDefaultValues(const TestExtremeDefaultValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  escaped_bytes_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_.get());
  if (from._internal_has_escaped_bytes()) {
    escaped_bytes_.Set(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_.get(), from._internal_escaped_bytes(),
      GetArenaNoVirtual());
  }
  utf8_string_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_.get());
  if (from._internal_has_utf8_string()) {
    utf8_string_.Set(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_.get(), from._internal_utf8_string(),
      GetArenaNoVirtual());
  }
  cpp_trigraph_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_.get());
  if (from._internal_has_cpp_trigraph()) {
    cpp_trigraph_.Set(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_.get(), from._internal_cpp_trigraph(),
      GetArenaNoVirtual());
  }
  string_with_zero_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_.get());
  if (from._internal_has_string_with_zero()) {
    string_with_zero_.Set(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_.get(), from._internal_string_with_zero(),
      GetArenaNoVirtual());
  }
  bytes_with_zero_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_.get());
  if (from._internal_has_bytes_with_zero()) {
    bytes_with_zero_.Set(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_.get(), from._internal_bytes_with_zero(),
      GetArenaNoVirtual());
  }
  string_piece_with_zero_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_.get());
  if (from._internal_has_string_piece_with_zero()) {
    string_piece_with_zero_.Set(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_.get(), from._internal_string_piece_with_zero(),
      GetArenaNoVirtual());
  }
  cord_with_zero_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_.get());
  if (from._internal_has_cord_with_zero()) {
    cord_with_zero_.Set(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_.get(), from._internal_cord_with_zero(),
      GetArenaNoVirtual());
  }
  replacement_string_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_.get());
  if (from._internal_has_replacement_string()) {
    replacement_string_.Set(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_.get(), from._internal_replacement_string(),
      GetArenaNoVirtual());
  }
  ::memcpy(&zero_float_, &from.zero_float_,
    static_cast<size_t>(reinterpret_cast<char*>(&really_small_int64_) -
    reinterpret_cast<char*>(&zero_float_)) + sizeof(really_small_int64_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtremeDefaultValues)
}

void TestExtremeDefaultValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestExtremeDefaultValues_google_2fprotobuf_2funittest_2eproto.base);
  escaped_bytes_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_.get());
  utf8_string_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_.get());
  cpp_trigraph_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_.get());
  string_with_zero_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_.get());
  bytes_with_zero_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_.get());
  string_piece_with_zero_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_.get());
  cord_with_zero_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_.get());
  replacement_string_.UnsafeSetDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_.get());
  zero_float_ = 0;
  large_uint64_ = PROTOBUF_ULONGLONG(18446744073709551615);
  large_uint32_ = 4294967295u;
  small_int32_ = -2147483647;
  small_int64_ = PROTOBUF_LONGLONG(-9223372036854775807);
  one_float_ = 1;
  small_float_ = 1.5f;
  negative_one_float_ = -1;
  negative_float_ = -1.5f;
  large_float_ = 2e+08f;
  small_negative_float_ = -8e-28f;
  inf_double_ = std::numeric_limits<double>::infinity();
  neg_inf_double_ = -std::numeric_limits<double>::infinity();
  nan_double_ = std::numeric_limits<double>::quiet_NaN();
  inf_float_ = std::numeric_limits<float>::infinity();
  neg_inf_float_ = -std::numeric_limits<float>::infinity();
  nan_float_ = std::numeric_limits<float>::quiet_NaN();
  really_small_int32_ = -2147483647 - 1;
  really_small_int64_ = PROTOBUF_LONGLONG(-9223372036854775807) - 1;
}

TestExtremeDefaultValues::~TestExtremeDefaultValues() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtremeDefaultValues)
  SharedDtor();
}

void TestExtremeDefaultValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  escaped_bytes_.DestroyNoArena(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_.get());
  utf8_string_.DestroyNoArena(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_.get());
  cpp_trigraph_.DestroyNoArena(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_.get());
  string_with_zero_.DestroyNoArena(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_.get());
  bytes_with_zero_.DestroyNoArena(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_.get());
  string_piece_with_zero_.DestroyNoArena(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_.get());
  cord_with_zero_.DestroyNoArena(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_.get());
  replacement_string_.DestroyNoArena(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_.get());
}

void TestExtremeDefaultValues::ArenaDtor(void* object) {
  TestExtremeDefaultValues* _this = reinterpret_cast< TestExtremeDefaultValues* >(object);
  (void)_this;
}
void TestExtremeDefaultValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestExtremeDefaultValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestExtremeDefaultValues& TestExtremeDefaultValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestExtremeDefaultValues_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestExtremeDefaultValues::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtremeDefaultValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      escaped_bytes_.ClearToDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      utf8_string_.ClearToDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000004u) {
      cpp_trigraph_.ClearToDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000008u) {
      string_with_zero_.ClearToDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000010u) {
      bytes_with_zero_.ClearToDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000020u) {
      string_piece_with_zero_.ClearToDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000040u) {
      cord_with_zero_.ClearToDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_.get(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000080u) {
      replacement_string_.ClearToDefault(&::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_.get(), GetArenaNoVirtual());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    zero_float_ = 0;
    large_uint64_ = PROTOBUF_ULONGLONG(18446744073709551615);
    large_uint32_ = 4294967295u;
    small_int32_ = -2147483647;
    small_int64_ = PROTOBUF_LONGLONG(-9223372036854775807);
    one_float_ = 1;
    small_float_ = 1.5f;
    negative_one_float_ = -1;
  }
  if (cached_has_bits & 0x00ff0000u) {
    negative_float_ = -1.5f;
    large_float_ = 2e+08f;
    small_negative_float_ = -8e-28f;
    inf_double_ = std::numeric_limits<double>::infinity();
    neg_inf_double_ = -std::numeric_limits<double>::infinity();
    nan_double_ = std::numeric_limits<double>::quiet_NaN();
    inf_float_ = std::numeric_limits<float>::infinity();
    neg_inf_float_ = -std::numeric_limits<float>::infinity();
  }
  if (cached_has_bits & 0x07000000u) {
    nan_float_ = std::numeric_limits<float>::quiet_NaN();
    really_small_int32_ = -2147483647 - 1;
    really_small_int64_ = PROTOBUF_LONGLONG(-9223372036854775807) - 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestExtremeDefaultValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes escaped_bytes = 1 [default = "\000\001\007\010\014\n\r\t\013\\\'\"\376"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_escaped_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 large_uint32 = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_large_uint32(&has_bits);
          large_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 large_uint64 = 3 [default = 18446744073709551615];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_large_uint64(&has_bits);
          large_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 small_int32 = 4 [default = -2147483647];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_small_int32(&has_bits);
          small_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 small_int64 = 5 [default = -9223372036854775807];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_small_int64(&has_bits);
          small_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string utf8_string = 6 [default = "\341\210\264"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_utf8_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.utf8_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float zero_float = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_zero_float(&has_bits);
          zero_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float one_float = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_one_float(&has_bits);
          one_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float small_float = 9 [default = 1.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_small_float(&has_bits);
          small_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float negative_one_float = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_negative_one_float(&has_bits);
          negative_one_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float negative_float = 11 [default = -1.5];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_negative_float(&has_bits);
          negative_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float large_float = 12 [default = 2e+08];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_large_float(&has_bits);
          large_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float small_negative_float = 13 [default = -8e-28];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_small_negative_float(&has_bits);
          small_negative_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double inf_double = 14 [default = inf];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_inf_double(&has_bits);
          inf_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double neg_inf_double = 15 [default = -inf];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_neg_inf_double(&has_bits);
          neg_inf_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double nan_double = 16 [default = nan];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_nan_double(&has_bits);
          nan_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float inf_float = 17 [default = inf];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_inf_float(&has_bits);
          inf_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float neg_inf_float = 18 [default = -inf];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_neg_inf_float(&has_bits);
          neg_inf_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float nan_float = 19 [default = nan];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_nan_float(&has_bits);
          nan_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string cpp_trigraph = 20 [default = "? ? ?? ?? ??? ??/ ??-"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_cpp_trigraph();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.cpp_trigraph");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 really_small_int32 = 21 [default = -2147483648];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_really_small_int32(&has_bits);
          really_small_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 really_small_int64 = 22 [default = -9223372036854775808];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_really_small_int64(&has_bits);
          really_small_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_with_zero = 23 [default = "hel\000lo"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_string_with_zero();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.string_with_zero");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bytes_with_zero = 24 [default = "wor\000ld"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_bytes_with_zero();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_piece_with_zero = 25 [default = "ab\000c", ctype = STRING_PIECE];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_string_piece_with_zero();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.string_piece_with_zero");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cord_with_zero = 26 [default = "12\0003", ctype = CORD];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_cord_with_zero();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.cord_with_zero");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string replacement_string = 27 [default = "${unknown}"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_replacement_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.replacement_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestExtremeDefaultValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtremeDefaultValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes escaped_bytes = 1 [default = "\000\001\007\010\014\n\r\t\013\\\'\"\376"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_escaped_bytes(), target);
  }

  // optional uint32 large_uint32 = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_large_uint32(), target);
  }

  // optional uint64 large_uint64 = 3 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_large_uint64(), target);
  }

  // optional int32 small_int32 = 4 [default = -2147483647];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_small_int32(), target);
  }

  // optional int64 small_int64 = 5 [default = -9223372036854775807];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_small_int64(), target);
  }

  // optional string utf8_string = 6 [default = "\341\210\264"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_utf8_string().data(), static_cast<int>(this->_internal_utf8_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.utf8_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_utf8_string(), target);
  }

  // optional float zero_float = 7 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_zero_float(), target);
  }

  // optional float one_float = 8 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_one_float(), target);
  }

  // optional float small_float = 9 [default = 1.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_small_float(), target);
  }

  // optional float negative_one_float = 10 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_negative_one_float(), target);
  }

  // optional float negative_float = 11 [default = -1.5];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_negative_float(), target);
  }

  // optional float large_float = 12 [default = 2e+08];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_large_float(), target);
  }

  // optional float small_negative_float = 13 [default = -8e-28];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_small_negative_float(), target);
  }

  // optional double inf_double = 14 [default = inf];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_inf_double(), target);
  }

  // optional double neg_inf_double = 15 [default = -inf];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_neg_inf_double(), target);
  }

  // optional double nan_double = 16 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_nan_double(), target);
  }

  // optional float inf_float = 17 [default = inf];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_inf_float(), target);
  }

  // optional float neg_inf_float = 18 [default = -inf];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_neg_inf_float(), target);
  }

  // optional float nan_float = 19 [default = nan];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_nan_float(), target);
  }

  // optional string cpp_trigraph = 20 [default = "? ? ?? ?? ??? ??/ ??-"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cpp_trigraph().data(), static_cast<int>(this->_internal_cpp_trigraph().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.cpp_trigraph");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_cpp_trigraph(), target);
  }

  // optional int32 really_small_int32 = 21 [default = -2147483648];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_really_small_int32(), target);
  }

  // optional int64 really_small_int64 = 22 [default = -9223372036854775808];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_really_small_int64(), target);
  }

  // optional string string_with_zero = 23 [default = "hel\000lo"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_with_zero().data(), static_cast<int>(this->_internal_string_with_zero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.string_with_zero");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_string_with_zero(), target);
  }

  // optional bytes bytes_with_zero = 24 [default = "wor\000ld"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_bytes_with_zero(), target);
  }

  // optional string string_piece_with_zero = 25 [default = "ab\000c", ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_piece_with_zero().data(), static_cast<int>(this->_internal_string_piece_with_zero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.string_piece_with_zero");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_string_piece_with_zero(), target);
  }

  // optional string cord_with_zero = 26 [default = "12\0003", ctype = CORD];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cord_with_zero().data(), static_cast<int>(this->_internal_cord_with_zero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.cord_with_zero");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_cord_with_zero(), target);
  }

  // optional string replacement_string = 27 [default = "${unknown}"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_replacement_string().data(), static_cast<int>(this->_internal_replacement_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.replacement_string");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_replacement_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtremeDefaultValues)
  return target;
}

size_t TestExtremeDefaultValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtremeDefaultValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes escaped_bytes = 1 [default = "\000\001\007\010\014\n\r\t\013\\\'\"\376"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_escaped_bytes());
    }

    // optional string utf8_string = 6 [default = "\341\210\264"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_utf8_string());
    }

    // optional string cpp_trigraph = 20 [default = "? ? ?? ?? ??? ??/ ??-"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpp_trigraph());
    }

    // optional string string_with_zero = 23 [default = "hel\000lo"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_with_zero());
    }

    // optional bytes bytes_with_zero = 24 [default = "wor\000ld"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_with_zero());
    }

    // optional string string_piece_with_zero = 25 [default = "ab\000c", ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_piece_with_zero());
    }

    // optional string cord_with_zero = 26 [default = "12\0003", ctype = CORD];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cord_with_zero());
    }

    // optional string replacement_string = 27 [default = "${unknown}"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_replacement_string());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float zero_float = 7 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint64 large_uint64 = 3 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_large_uint64());
    }

    // optional uint32 large_uint32 = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_large_uint32());
    }

    // optional int32 small_int32 = 4 [default = -2147483647];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_small_int32());
    }

    // optional int64 small_int64 = 5 [default = -9223372036854775807];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_small_int64());
    }

    // optional float one_float = 8 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float small_float = 9 [default = 1.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float negative_one_float = 10 [default = -1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float negative_float = 11 [default = -1.5];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float large_float = 12 [default = 2e+08];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float small_negative_float = 13 [default = -8e-28];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional double inf_double = 14 [default = inf];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double neg_inf_double = 15 [default = -inf];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

    // optional double nan_double = 16 [default = nan];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional float inf_float = 17 [default = inf];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float neg_inf_float = 18 [default = -inf];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional float nan_float = 19 [default = nan];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 really_small_int32 = 21 [default = -2147483648];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_really_small_int32());
    }

    // optional int64 really_small_int64 = 22 [default = -9223372036854775808];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_really_small_int64());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestExtremeDefaultValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestExtremeDefaultValues)
  GOOGLE_DCHECK_NE(&from, this);
  const TestExtremeDefaultValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestExtremeDefaultValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestExtremeDefaultValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestExtremeDefaultValues)
    MergeFrom(*source);
  }
}

void TestExtremeDefaultValues::MergeFrom(const TestExtremeDefaultValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtremeDefaultValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_escaped_bytes(from._internal_escaped_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_utf8_string(from._internal_utf8_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cpp_trigraph(from._internal_cpp_trigraph());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_string_with_zero(from._internal_string_with_zero());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_bytes_with_zero(from._internal_bytes_with_zero());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_string_piece_with_zero(from._internal_string_piece_with_zero());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_cord_with_zero(from._internal_cord_with_zero());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_replacement_string(from._internal_replacement_string());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      zero_float_ = from.zero_float_;
    }
    if (cached_has_bits & 0x00000200u) {
      large_uint64_ = from.large_uint64_;
    }
    if (cached_has_bits & 0x00000400u) {
      large_uint32_ = from.large_uint32_;
    }
    if (cached_has_bits & 0x00000800u) {
      small_int32_ = from.small_int32_;
    }
    if (cached_has_bits & 0x00001000u) {
      small_int64_ = from.small_int64_;
    }
    if (cached_has_bits & 0x00002000u) {
      one_float_ = from.one_float_;
    }
    if (cached_has_bits & 0x00004000u) {
      small_float_ = from.small_float_;
    }
    if (cached_has_bits & 0x00008000u) {
      negative_one_float_ = from.negative_one_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      negative_float_ = from.negative_float_;
    }
    if (cached_has_bits & 0x00020000u) {
      large_float_ = from.large_float_;
    }
    if (cached_has_bits & 0x00040000u) {
      small_negative_float_ = from.small_negative_float_;
    }
    if (cached_has_bits & 0x00080000u) {
      inf_double_ = from.inf_double_;
    }
    if (cached_has_bits & 0x00100000u) {
      neg_inf_double_ = from.neg_inf_double_;
    }
    if (cached_has_bits & 0x00200000u) {
      nan_double_ = from.nan_double_;
    }
    if (cached_has_bits & 0x00400000u) {
      inf_float_ = from.inf_float_;
    }
    if (cached_has_bits & 0x00800000u) {
      neg_inf_float_ = from.neg_inf_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      nan_float_ = from.nan_float_;
    }
    if (cached_has_bits & 0x02000000u) {
      really_small_int32_ = from.really_small_int32_;
    }
    if (cached_has_bits & 0x04000000u) {
      really_small_int64_ = from.really_small_int64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestExtremeDefaultValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestExtremeDefaultValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestExtremeDefaultValues::CopyFrom(const TestExtremeDefaultValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtremeDefaultValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtremeDefaultValues::IsInitialized() const {
  return true;
}

void TestExtremeDefaultValues::InternalSwap(TestExtremeDefaultValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  escaped_bytes_.Swap(&other->escaped_bytes_, &::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_.get(),
    GetArenaNoVirtual());
  utf8_string_.Swap(&other->utf8_string_, &::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_.get(),
    GetArenaNoVirtual());
  cpp_trigraph_.Swap(&other->cpp_trigraph_, &::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_.get(),
    GetArenaNoVirtual());
  string_with_zero_.Swap(&other->string_with_zero_, &::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_.get(),
    GetArenaNoVirtual());
  bytes_with_zero_.Swap(&other->bytes_with_zero_, &::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_.get(),
    GetArenaNoVirtual());
  string_piece_with_zero_.Swap(&other->string_piece_with_zero_, &::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_.get(),
    GetArenaNoVirtual());
  cord_with_zero_.Swap(&other->cord_with_zero_, &::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_.get(),
    GetArenaNoVirtual());
  replacement_string_.Swap(&other->replacement_string_, &::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_.get(),
    GetArenaNoVirtual());
  swap(zero_float_, other->zero_float_);
  swap(large_uint64_, other->large_uint64_);
  swap(large_uint32_, other->large_uint32_);
  swap(small_int32_, other->small_int32_);
  swap(small_int64_, other->small_int64_);
  swap(one_float_, other->one_float_);
  swap(small_float_, other->small_float_);
  swap(negative_one_float_, other->negative_one_float_);
  swap(negative_float_, other->negative_float_);
  swap(large_float_, other->large_float_);
  swap(small_negative_float_, other->small_negative_float_);
  swap(inf_double_, other->inf_double_);
  swap(neg_inf_double_, other->neg_inf_double_);
  swap(nan_double_, other->nan_double_);
  swap(inf_float_, other->inf_float_);
  swap(neg_inf_float_, other->neg_inf_float_);
  swap(nan_float_, other->nan_float_);
  swap(really_small_int32_, other->really_small_int32_);
  swap(really_small_int64_, other->really_small_int64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtremeDefaultValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SparseEnumMessage::InitAsDefaultInstance() {
}
class SparseEnumMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseEnumMessage>()._has_bits_);
  static void set_has_sparse_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SparseEnumMessage::SparseEnumMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.SparseEnumMessage)
}
SparseEnumMessage::SparseEnumMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.SparseEnumMessage)
}
SparseEnumMessage::SparseEnumMessage(const SparseEnumMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sparse_enum_ = from.sparse_enum_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.SparseEnumMessage)
}

void SparseEnumMessage::SharedCtor() {
  sparse_enum_ = 123;
}

SparseEnumMessage::~SparseEnumMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.SparseEnumMessage)
  SharedDtor();
}

void SparseEnumMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void SparseEnumMessage::ArenaDtor(void* object) {
  SparseEnumMessage* _this = reinterpret_cast< SparseEnumMessage* >(object);
  (void)_this;
}
void SparseEnumMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseEnumMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparseEnumMessage& SparseEnumMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparseEnumMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void SparseEnumMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.SparseEnumMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sparse_enum_ = 123;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SparseEnumMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestSparseEnum sparse_enum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestSparseEnum_IsValid(val))) {
            _internal_set_sparse_enum(static_cast<::protobuf_unittest::TestSparseEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseEnumMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.SparseEnumMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestSparseEnum sparse_enum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sparse_enum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.SparseEnumMessage)
  return target;
}

size_t SparseEnumMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.SparseEnumMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestSparseEnum sparse_enum = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sparse_enum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseEnumMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.SparseEnumMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseEnumMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseEnumMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.SparseEnumMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.SparseEnumMessage)
    MergeFrom(*source);
  }
}

void SparseEnumMessage::MergeFrom(const SparseEnumMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.SparseEnumMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sparse_enum()) {
    _internal_set_sparse_enum(from._internal_sparse_enum());
  }
}

void SparseEnumMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.SparseEnumMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseEnumMessage::CopyFrom(const SparseEnumMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.SparseEnumMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseEnumMessage::IsInitialized() const {
  return true;
}

void SparseEnumMessage::InternalSwap(SparseEnumMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sparse_enum_, other->sparse_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseEnumMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OneString::InitAsDefaultInstance() {
}
class OneString::_Internal {
 public:
  using HasBits = decltype(std::declval<OneString>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OneString::OneString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.OneString)
}
OneString::OneString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.OneString)
}
OneString::OneString(const OneString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.OneString)
}

void OneString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OneString_google_2fprotobuf_2funittest_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OneString::~OneString() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.OneString)
  SharedDtor();
}

void OneString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OneString::ArenaDtor(void* object) {
  OneString* _this = reinterpret_cast< OneString* >(object);
  (void)_this;
}
void OneString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OneString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OneString& OneString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OneString_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void OneString::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.OneString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OneString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.OneString.data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.OneString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.OneString.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.OneString)
  return target;
}

size_t OneString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.OneString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.OneString)
  GOOGLE_DCHECK_NE(&from, this);
  const OneString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OneString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.OneString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.OneString)
    MergeFrom(*source);
  }
}

void OneString::MergeFrom(const OneString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.OneString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void OneString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.OneString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneString::CopyFrom(const OneString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.OneString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneString::IsInitialized() const {
  return true;
}

void OneString::InternalSwap(OneString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata OneString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoreString::InitAsDefaultInstance() {
}
class MoreString::_Internal {
 public:
  using HasBits = decltype(std::declval<MoreString>()._has_bits_);
};

MoreString::MoreString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.MoreString)
}
MoreString::MoreString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.MoreString)
}
MoreString::MoreString(const MoreString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.MoreString)
}

void MoreString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoreString_google_2fprotobuf_2funittest_2eproto.base);
}

MoreString::~MoreString() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.MoreString)
  SharedDtor();
}

void MoreString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void MoreString::ArenaDtor(void* object) {
  MoreString* _this = reinterpret_cast< MoreString* >(object);
  (void)_this;
}
void MoreString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoreString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoreString& MoreString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoreString_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void MoreString::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.MoreString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoreString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.MoreString.data");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoreString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.MoreString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.MoreString.data");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.MoreString)
  return target;
}

size_t MoreString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.MoreString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoreString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.MoreString)
  GOOGLE_DCHECK_NE(&from, this);
  const MoreString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoreString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.MoreString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.MoreString)
    MergeFrom(*source);
  }
}

void MoreString::MergeFrom(const MoreString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.MoreString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MoreString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.MoreString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoreString::CopyFrom(const MoreString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.MoreString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoreString::IsInitialized() const {
  return true;
}

void MoreString::InternalSwap(MoreString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoreString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OneBytes::InitAsDefaultInstance() {
}
class OneBytes::_Internal {
 public:
  using HasBits = decltype(std::declval<OneBytes>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OneBytes::OneBytes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.OneBytes)
}
OneBytes::OneBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.OneBytes)
}
OneBytes::OneBytes(const OneBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.OneBytes)
}

void OneBytes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OneBytes_google_2fprotobuf_2funittest_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OneBytes::~OneBytes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.OneBytes)
  SharedDtor();
}

void OneBytes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OneBytes::ArenaDtor(void* object) {
  OneBytes* _this = reinterpret_cast< OneBytes* >(object);
  (void)_this;
}
void OneBytes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OneBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OneBytes& OneBytes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OneBytes_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void OneBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.OneBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OneBytes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneBytes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.OneBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.OneBytes)
  return target;
}

size_t OneBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.OneBytes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneBytes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.OneBytes)
  GOOGLE_DCHECK_NE(&from, this);
  const OneBytes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OneBytes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.OneBytes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.OneBytes)
    MergeFrom(*source);
  }
}

void OneBytes::MergeFrom(const OneBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.OneBytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void OneBytes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.OneBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneBytes::CopyFrom(const OneBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.OneBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneBytes::IsInitialized() const {
  return true;
}

void OneBytes::InternalSwap(OneBytes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata OneBytes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoreBytes::InitAsDefaultInstance() {
}
class MoreBytes::_Internal {
 public:
  using HasBits = decltype(std::declval<MoreBytes>()._has_bits_);
};

MoreBytes::MoreBytes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.MoreBytes)
}
MoreBytes::MoreBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.MoreBytes)
}
MoreBytes::MoreBytes(const MoreBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.MoreBytes)
}

void MoreBytes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoreBytes_google_2fprotobuf_2funittest_2eproto.base);
}

MoreBytes::~MoreBytes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.MoreBytes)
  SharedDtor();
}

void MoreBytes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void MoreBytes::ArenaDtor(void* object) {
  MoreBytes* _this = reinterpret_cast< MoreBytes* >(object);
  (void)_this;
}
void MoreBytes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoreBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoreBytes& MoreBytes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoreBytes_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void MoreBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.MoreBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoreBytes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoreBytes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.MoreBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.MoreBytes)
  return target;
}

size_t MoreBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.MoreBytes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoreBytes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.MoreBytes)
  GOOGLE_DCHECK_NE(&from, this);
  const MoreBytes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoreBytes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.MoreBytes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.MoreBytes)
    MergeFrom(*source);
  }
}

void MoreBytes::MergeFrom(const MoreBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.MoreBytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MoreBytes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.MoreBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoreBytes::CopyFrom(const MoreBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.MoreBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoreBytes::IsInitialized() const {
  return true;
}

void MoreBytes::InternalSwap(MoreBytes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoreBytes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Int32Message::InitAsDefaultInstance() {
}
class Int32Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Int32Message>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Int32Message::Int32Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.Int32Message)
}
Int32Message::Int32Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Int32Message)
}
Int32Message::Int32Message(const Int32Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Int32Message)
}

void Int32Message::SharedCtor() {
  data_ = 0;
}

Int32Message::~Int32Message() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.Int32Message)
  SharedDtor();
}

void Int32Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Int32Message::ArenaDtor(void* object) {
  Int32Message* _this = reinterpret_cast< Int32Message* >(object);
  (void)_this;
}
void Int32Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Int32Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int32Message& Int32Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int32Message_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void Int32Message::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.Int32Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Int32Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Int32Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.Int32Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.Int32Message)
  return target;
}

size_t Int32Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.Int32Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int32Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.Int32Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Int32Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Int32Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.Int32Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.Int32Message)
    MergeFrom(*source);
  }
}

void Int32Message::MergeFrom(const Int32Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.Int32Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void Int32Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.Int32Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int32Message::CopyFrom(const Int32Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.Int32Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Message::IsInitialized() const {
  return true;
}

void Int32Message::InternalSwap(Int32Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int32Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Uint32Message::InitAsDefaultInstance() {
}
class Uint32Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Uint32Message>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Uint32Message::Uint32Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.Uint32Message)
}
Uint32Message::Uint32Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Uint32Message)
}
Uint32Message::Uint32Message(const Uint32Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Uint32Message)
}

void Uint32Message::SharedCtor() {
  data_ = 0u;
}

Uint32Message::~Uint32Message() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.Uint32Message)
  SharedDtor();
}

void Uint32Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Uint32Message::ArenaDtor(void* object) {
  Uint32Message* _this = reinterpret_cast< Uint32Message* >(object);
  (void)_this;
}
void Uint32Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uint32Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uint32Message& Uint32Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Uint32Message_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void Uint32Message::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.Uint32Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Uint32Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uint32Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.Uint32Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.Uint32Message)
  return target;
}

size_t Uint32Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.Uint32Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uint32Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.Uint32Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Uint32Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uint32Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.Uint32Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.Uint32Message)
    MergeFrom(*source);
  }
}

void Uint32Message::MergeFrom(const Uint32Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.Uint32Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void Uint32Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.Uint32Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint32Message::CopyFrom(const Uint32Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.Uint32Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint32Message::IsInitialized() const {
  return true;
}

void Uint32Message::InternalSwap(Uint32Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint32Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Int64Message::InitAsDefaultInstance() {
}
class Int64Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Int64Message>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Int64Message::Int64Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.Int64Message)
}
Int64Message::Int64Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Int64Message)
}
Int64Message::Int64Message(const Int64Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Int64Message)
}

void Int64Message::SharedCtor() {
  data_ = PROTOBUF_LONGLONG(0);
}

Int64Message::~Int64Message() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.Int64Message)
  SharedDtor();
}

void Int64Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Int64Message::ArenaDtor(void* object) {
  Int64Message* _this = reinterpret_cast< Int64Message* >(object);
  (void)_this;
}
void Int64Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Int64Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int64Message& Int64Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int64Message_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void Int64Message::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.Int64Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Int64Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Int64Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.Int64Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.Int64Message)
  return target;
}

size_t Int64Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.Int64Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int64Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.Int64Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Int64Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Int64Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.Int64Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.Int64Message)
    MergeFrom(*source);
  }
}

void Int64Message::MergeFrom(const Int64Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.Int64Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void Int64Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.Int64Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64Message::CopyFrom(const Int64Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.Int64Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Message::IsInitialized() const {
  return true;
}

void Int64Message::InternalSwap(Int64Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int64Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Uint64Message::InitAsDefaultInstance() {
}
class Uint64Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Uint64Message>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Uint64Message::Uint64Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.Uint64Message)
}
Uint64Message::Uint64Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Uint64Message)
}
Uint64Message::Uint64Message(const Uint64Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Uint64Message)
}

void Uint64Message::SharedCtor() {
  data_ = PROTOBUF_ULONGLONG(0);
}

Uint64Message::~Uint64Message() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.Uint64Message)
  SharedDtor();
}

void Uint64Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Uint64Message::ArenaDtor(void* object) {
  Uint64Message* _this = reinterpret_cast< Uint64Message* >(object);
  (void)_this;
}
void Uint64Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uint64Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uint64Message& Uint64Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Uint64Message_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void Uint64Message::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.Uint64Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Uint64Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uint64Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.Uint64Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.Uint64Message)
  return target;
}

size_t Uint64Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.Uint64Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uint64Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.Uint64Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Uint64Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uint64Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.Uint64Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.Uint64Message)
    MergeFrom(*source);
  }
}

void Uint64Message::MergeFrom(const Uint64Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.Uint64Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void Uint64Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.Uint64Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint64Message::CopyFrom(const Uint64Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.Uint64Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint64Message::IsInitialized() const {
  return true;
}

void Uint64Message::InternalSwap(Uint64Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint64Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoolMessage::InitAsDefaultInstance() {
}
class BoolMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<BoolMessage>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BoolMessage::BoolMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.BoolMessage)
}
BoolMessage::BoolMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.BoolMessage)
}
BoolMessage::BoolMessage(const BoolMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.BoolMessage)
}

void BoolMessage::SharedCtor() {
  data_ = false;
}

BoolMessage::~BoolMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.BoolMessage)
  SharedDtor();
}

void BoolMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void BoolMessage::ArenaDtor(void* object) {
  BoolMessage* _this = reinterpret_cast< BoolMessage* >(object);
  (void)_this;
}
void BoolMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolMessage& BoolMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void BoolMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.BoolMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BoolMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.BoolMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.BoolMessage)
  return target;
}

size_t BoolMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.BoolMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.BoolMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.BoolMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.BoolMessage)
    MergeFrom(*source);
  }
}

void BoolMessage::MergeFrom(const BoolMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.BoolMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void BoolMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.BoolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolMessage::CopyFrom(const BoolMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.BoolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolMessage::IsInitialized() const {
  return true;
}

void BoolMessage::InternalSwap(BoolMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestOneof_FooGroup::InitAsDefaultInstance() {
}
class TestOneof_FooGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneof_FooGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOneof_FooGroup::TestOneof_FooGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestOneof.FooGroup)
}
TestOneof_FooGroup::TestOneof_FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof.FooGroup)
}
TestOneof_FooGroup::TestOneof_FooGroup(const TestOneof_FooGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_b()) {
    b_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_b(),
      GetArenaNoVirtual());
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof.FooGroup)
}

void TestOneof_FooGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestOneof_FooGroup_google_2fprotobuf_2funittest_2eproto.base);
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_ = 0;
}

TestOneof_FooGroup::~TestOneof_FooGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof.FooGroup)
  SharedDtor();
}

void TestOneof_FooGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestOneof_FooGroup::ArenaDtor(void* object) {
  TestOneof_FooGroup* _this = reinterpret_cast< TestOneof_FooGroup* >(object);
  (void)_this;
}
void TestOneof_FooGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestOneof_FooGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestOneof_FooGroup& TestOneof_FooGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestOneof_FooGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestOneof_FooGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof.FooGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    b_.ClearNonDefaultToEmpty();
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestOneof_FooGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof.FooGroup.b");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestOneof_FooGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof.FooGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_a(), target);
  }

  // optional string b = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneof.FooGroup.b");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof.FooGroup)
  return target;
}

size_t TestOneof_FooGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof.FooGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string b = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_b());
    }

    // optional int32 a = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestOneof_FooGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestOneof.FooGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestOneof_FooGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestOneof_FooGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestOneof.FooGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestOneof.FooGroup)
    MergeFrom(*source);
  }
}

void TestOneof_FooGroup::MergeFrom(const TestOneof_FooGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof.FooGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_b(from._internal_b());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestOneof_FooGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestOneof.FooGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestOneof_FooGroup::CopyFrom(const TestOneof_FooGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof.FooGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof_FooGroup::IsInitialized() const {
  return true;
}

void TestOneof_FooGroup::InternalSwap(TestOneof_FooGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  b_.Swap(&other->b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof_FooGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestOneof::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestOneof_default_instance_.foo_int_ = 0;
  ::protobuf_unittest::_TestOneof_default_instance_.foo_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_unittest::_TestOneof_default_instance_.foo_message_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
  ::protobuf_unittest::_TestOneof_default_instance_.foogroup_ = const_cast< ::protobuf_unittest::TestOneof_FooGroup*>(
      ::protobuf_unittest::TestOneof_FooGroup::internal_default_instance());
}
class TestOneof::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneof>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& foo_message(const TestOneof* msg);
  static const ::protobuf_unittest::TestOneof_FooGroup& foogroup(const TestOneof* msg);
};

const ::protobuf_unittest::TestAllTypes&
TestOneof::_Internal::foo_message(const TestOneof* msg) {
  return *msg->foo_.foo_message_;
}
const ::protobuf_unittest::TestOneof_FooGroup&
TestOneof::_Internal::foogroup(const TestOneof* msg) {
  return *msg->foo_.foogroup_;
}
void TestOneof::set_allocated_foo_message(::protobuf_unittest::TestAllTypes* foo_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_foo();
  if (foo_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foo_message);
    if (message_arena != submessage_arena) {
      foo_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo_message, submessage_arena);
    }
    set_has_foo_message();
    foo_.foo_message_ = foo_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof.foo_message)
}
void TestOneof::set_allocated_foogroup(::protobuf_unittest::TestOneof_FooGroup* foogroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_foo();
  if (foogroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foogroup);
    if (message_arena != submessage_arena) {
      foogroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foogroup, submessage_arena);
    }
    set_has_foogroup();
    foo_.foogroup_ = foogroup;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof.foogroup)
}
TestOneof::TestOneof()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestOneof)
}
TestOneof::TestOneof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof)
}
TestOneof::TestOneof(const TestOneof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_foo();
  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_foo_message());
      break;
    }
    case kFoogroup: {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneof_FooGroup::MergeFrom(from._internal_foogroup());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof)
}

void TestOneof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestOneof_google_2fprotobuf_2funittest_2eproto.base);
  clear_has_foo();
}

TestOneof::~TestOneof() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof)
  SharedDtor();
}

void TestOneof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_foo()) {
    clear_foo();
  }
}

void TestOneof::ArenaDtor(void* object) {
  TestOneof* _this = reinterpret_cast< TestOneof* >(object);
  (void)_this;
}
void TestOneof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestOneof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestOneof& TestOneof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestOneof_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestOneof::clear_foo() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestOneof)
  switch (foo_case()) {
    case kFooInt: {
      // No need to clear
      break;
    }
    case kFooString: {
      foo_.foo_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kFooMessage: {
      if (GetArenaNoVirtual() == nullptr) {
        delete foo_.foo_message_;
      }
      break;
    }
    case kFoogroup: {
      if (GetArenaNoVirtual() == nullptr) {
        delete foo_.foogroup_;
      }
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FOO_NOT_SET;
}


void TestOneof::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_foo();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestOneof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 foo_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_foo_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string foo_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_foo_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof.foo_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes foo_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group FooGroup = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 35)) {
          ptr = ctx->ParseGroup(_internal_mutable_foogroup(), ptr, 35);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestOneof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (foo_case()) {
    case kFooInt: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo_int(), target);
      break;
    }
    case kFooString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_string().data(), static_cast<int>(this->_internal_foo_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof.foo_string");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_foo_string(), target);
      break;
    }
    case kFooMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::foo_message(this), target, stream);
      break;
    }
    case kFoogroup: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteGroup(
          4, _Internal::foogroup(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof)
  return target;
}

size_t TestOneof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (foo_case()) {
    // optional int32 foo_int = 1;
    case kFooInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_foo_int());
      break;
    }
    // optional string foo_string = 2;
    case kFooString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string());
      break;
    }
    // optional .protobuf_unittest.TestAllTypes foo_message = 3;
    case kFooMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_.foo_message_);
      break;
    }
    // optional group FooGroup = 4 { ... };
    case kFoogroup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *foo_.foogroup_);
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestOneof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestOneof)
  GOOGLE_DCHECK_NE(&from, this);
  const TestOneof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestOneof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestOneof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestOneof)
    MergeFrom(*source);
  }
}

void TestOneof::MergeFrom(const TestOneof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_foo_message());
      break;
    }
    case kFoogroup: {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneof_FooGroup::MergeFrom(from._internal_foogroup());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
}

void TestOneof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestOneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestOneof::CopyFrom(const TestOneof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof::IsInitialized() const {
  return true;
}

void TestOneof::InternalSwap(TestOneof* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foo_, other->foo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestOneofBackwardsCompatible_FooGroup::InitAsDefaultInstance() {
}
class TestOneofBackwardsCompatible_FooGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneofBackwardsCompatible_FooGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOneofBackwardsCompatible_FooGroup::TestOneofBackwardsCompatible_FooGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
}
TestOneofBackwardsCompatible_FooGroup::TestOneofBackwardsCompatible_FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
}
TestOneofBackwardsCompatible_FooGroup::TestOneofBackwardsCompatible_FooGroup(const TestOneofBackwardsCompatible_FooGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_b()) {
    b_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_b(),
      GetArenaNoVirtual());
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
}

void TestOneofBackwardsCompatible_FooGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestOneofBackwardsCompatible_FooGroup_google_2fprotobuf_2funittest_2eproto.base);
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_ = 0;
}

TestOneofBackwardsCompatible_FooGroup::~TestOneofBackwardsCompatible_FooGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  SharedDtor();
}

void TestOneofBackwardsCompatible_FooGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestOneofBackwardsCompatible_FooGroup::ArenaDtor(void* object) {
  TestOneofBackwardsCompatible_FooGroup* _this = reinterpret_cast< TestOneofBackwardsCompatible_FooGroup* >(object);
  (void)_this;
}
void TestOneofBackwardsCompatible_FooGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestOneofBackwardsCompatible_FooGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestOneofBackwardsCompatible_FooGroup& TestOneofBackwardsCompatible_FooGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestOneofBackwardsCompatible_FooGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestOneofBackwardsCompatible_FooGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    b_.ClearNonDefaultToEmpty();
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestOneofBackwardsCompatible_FooGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.b");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestOneofBackwardsCompatible_FooGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_a(), target);
  }

  // optional string b = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.b");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  return target;
}

size_t TestOneofBackwardsCompatible_FooGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string b = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_b());
    }

    // optional int32 a = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestOneofBackwardsCompatible_FooGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestOneofBackwardsCompatible_FooGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestOneofBackwardsCompatible_FooGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
    MergeFrom(*source);
  }
}

void TestOneofBackwardsCompatible_FooGroup::MergeFrom(const TestOneofBackwardsCompatible_FooGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_b(from._internal_b());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestOneofBackwardsCompatible_FooGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestOneofBackwardsCompatible_FooGroup::CopyFrom(const TestOneofBackwardsCompatible_FooGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneofBackwardsCompatible_FooGroup::IsInitialized() const {
  return true;
}

void TestOneofBackwardsCompatible_FooGroup::InternalSwap(TestOneofBackwardsCompatible_FooGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  b_.Swap(&other->b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneofBackwardsCompatible_FooGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestOneofBackwardsCompatible::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestOneofBackwardsCompatible_default_instance_._instance.get_mutable()->foo_message_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
  ::protobuf_unittest::_TestOneofBackwardsCompatible_default_instance_._instance.get_mutable()->foogroup_ = const_cast< ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup*>(
      ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup::internal_default_instance());
}
class TestOneofBackwardsCompatible::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneofBackwardsCompatible>()._has_bits_);
  static void set_has_foo_int(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_foo_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypes& foo_message(const TestOneofBackwardsCompatible* msg);
  static void set_has_foo_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup& foogroup(const TestOneofBackwardsCompatible* msg);
  static void set_has_foogroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestOneofBackwardsCompatible::_Internal::foo_message(const TestOneofBackwardsCompatible* msg) {
  return *msg->foo_message_;
}
const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup&
TestOneofBackwardsCompatible::_Internal::foogroup(const TestOneofBackwardsCompatible* msg) {
  return *msg->foogroup_;
}
void TestOneofBackwardsCompatible::unsafe_arena_set_allocated_foo_message(
    ::protobuf_unittest::TestAllTypes* foo_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete foo_message_;
  }
  foo_message_ = foo_message;
  if (foo_message) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestOneofBackwardsCompatible.foo_message)
}
void TestOneofBackwardsCompatible::unsafe_arena_set_allocated_foogroup(
    ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* foogroup) {
  if (GetArenaNoVirtual() == nullptr) {
    delete foogroup_;
  }
  foogroup_ = foogroup;
  if (foogroup) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestOneofBackwardsCompatible.foogroup)
}
TestOneofBackwardsCompatible::TestOneofBackwardsCompatible()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestOneofBackwardsCompatible)
}
TestOneofBackwardsCompatible::TestOneofBackwardsCompatible(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneofBackwardsCompatible)
}
TestOneofBackwardsCompatible::TestOneofBackwardsCompatible(const TestOneofBackwardsCompatible& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  foo_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_foo_string()) {
    foo_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_foo_string(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_foo_message()) {
    foo_message_ = new ::protobuf_unittest::TestAllTypes(*from.foo_message_);
  } else {
    foo_message_ = nullptr;
  }
  if (from._internal_has_foogroup()) {
    foogroup_ = new ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup(*from.foogroup_);
  } else {
    foogroup_ = nullptr;
  }
  foo_int_ = from.foo_int_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneofBackwardsCompatible)
}

void TestOneofBackwardsCompatible::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestOneofBackwardsCompatible_google_2fprotobuf_2funittest_2eproto.base);
  foo_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&foo_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foo_int_) -
      reinterpret_cast<char*>(&foo_message_)) + sizeof(foo_int_));
}

TestOneofBackwardsCompatible::~TestOneofBackwardsCompatible() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneofBackwardsCompatible)
  SharedDtor();
}

void TestOneofBackwardsCompatible::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  foo_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete foo_message_;
  if (this != internal_default_instance()) delete foogroup_;
}

void TestOneofBackwardsCompatible::ArenaDtor(void* object) {
  TestOneofBackwardsCompatible* _this = reinterpret_cast< TestOneofBackwardsCompatible* >(object);
  (void)_this;
}
void TestOneofBackwardsCompatible::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestOneofBackwardsCompatible::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestOneofBackwardsCompatible& TestOneofBackwardsCompatible::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestOneofBackwardsCompatible_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestOneofBackwardsCompatible::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneofBackwardsCompatible)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      foo_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(foo_message_ != nullptr);
      foo_message_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(foogroup_ != nullptr);
      foogroup_->Clear();
    }
  }
  foo_int_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestOneofBackwardsCompatible::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 foo_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_foo_int(&has_bits);
          foo_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string foo_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_foo_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneofBackwardsCompatible.foo_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes foo_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group FooGroup = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 35)) {
          ptr = ctx->ParseGroup(_internal_mutable_foogroup(), ptr, 35);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestOneofBackwardsCompatible::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneofBackwardsCompatible)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 foo_int = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo_int(), target);
  }

  // optional string foo_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_foo_string().data(), static_cast<int>(this->_internal_foo_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneofBackwardsCompatible.foo_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_foo_string(), target);
  }

  // optional .protobuf_unittest.TestAllTypes foo_message = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::foo_message(this), target, stream);
  }

  // optional group FooGroup = 4 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        4, _Internal::foogroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneofBackwardsCompatible)
  return target;
}

size_t TestOneofBackwardsCompatible::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneofBackwardsCompatible)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string foo_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string());
    }

    // optional .protobuf_unittest.TestAllTypes foo_message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_message_);
    }

    // optional group FooGroup = 4 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *foogroup_);
    }

    // optional int32 foo_int = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_foo_int());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestOneofBackwardsCompatible::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestOneofBackwardsCompatible)
  GOOGLE_DCHECK_NE(&from, this);
  const TestOneofBackwardsCompatible* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestOneofBackwardsCompatible>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestOneofBackwardsCompatible)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestOneofBackwardsCompatible)
    MergeFrom(*source);
  }
}

void TestOneofBackwardsCompatible::MergeFrom(const TestOneofBackwardsCompatible& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneofBackwardsCompatible)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_foo_string(from._internal_foo_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_foo_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_foo_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup::MergeFrom(from._internal_foogroup());
    }
    if (cached_has_bits & 0x00000008u) {
      foo_int_ = from.foo_int_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestOneofBackwardsCompatible::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestOneofBackwardsCompatible)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestOneofBackwardsCompatible::CopyFrom(const TestOneofBackwardsCompatible& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneofBackwardsCompatible)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneofBackwardsCompatible::IsInitialized() const {
  return true;
}

void TestOneofBackwardsCompatible::InternalSwap(TestOneofBackwardsCompatible* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  foo_string_.Swap(&other->foo_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(foo_message_, other->foo_message_);
  swap(foogroup_, other->foogroup_);
  swap(foo_int_, other->foo_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneofBackwardsCompatible::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestOneof2_FooGroup::InitAsDefaultInstance() {
}
class TestOneof2_FooGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneof2_FooGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOneof2_FooGroup::TestOneof2_FooGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestOneof2.FooGroup)
}
TestOneof2_FooGroup::TestOneof2_FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof2.FooGroup)
}
TestOneof2_FooGroup::TestOneof2_FooGroup(const TestOneof2_FooGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_b()) {
    b_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_b(),
      GetArenaNoVirtual());
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof2.FooGroup)
}

void TestOneof2_FooGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestOneof2_FooGroup_google_2fprotobuf_2funittest_2eproto.base);
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_ = 0;
}

TestOneof2_FooGroup::~TestOneof2_FooGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof2.FooGroup)
  SharedDtor();
}

void TestOneof2_FooGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestOneof2_FooGroup::ArenaDtor(void* object) {
  TestOneof2_FooGroup* _this = reinterpret_cast< TestOneof2_FooGroup* >(object);
  (void)_this;
}
void TestOneof2_FooGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestOneof2_FooGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestOneof2_FooGroup& TestOneof2_FooGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestOneof2_FooGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestOneof2_FooGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof2.FooGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    b_.ClearNonDefaultToEmpty();
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestOneof2_FooGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string b = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof2.FooGroup.b");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestOneof2_FooGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof2.FooGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_a(), target);
  }

  // optional string b = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneof2.FooGroup.b");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof2.FooGroup)
  return target;
}

size_t TestOneof2_FooGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof2.FooGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string b = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_b());
    }

    // optional int32 a = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestOneof2_FooGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestOneof2.FooGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestOneof2_FooGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestOneof2_FooGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestOneof2.FooGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestOneof2.FooGroup)
    MergeFrom(*source);
  }
}

void TestOneof2_FooGroup::MergeFrom(const TestOneof2_FooGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof2.FooGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_b(from._internal_b());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestOneof2_FooGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestOneof2.FooGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestOneof2_FooGroup::CopyFrom(const TestOneof2_FooGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof2.FooGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof2_FooGroup::IsInitialized() const {
  return true;
}

void TestOneof2_FooGroup::InternalSwap(TestOneof2_FooGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  b_.Swap(&other->b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof2_FooGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestOneof2_NestedMessage::InitAsDefaultInstance() {
}
class TestOneof2_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneof2_NestedMessage>()._has_bits_);
  static void set_has_qux_int(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOneof2_NestedMessage::TestOneof2_NestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestOneof2.NestedMessage)
}
TestOneof2_NestedMessage::TestOneof2_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  corge_int_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof2.NestedMessage)
}
TestOneof2_NestedMessage::TestOneof2_NestedMessage(const TestOneof2_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      corge_int_(from.corge_int_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qux_int_ = from.qux_int_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof2.NestedMessage)
}

void TestOneof2_NestedMessage::SharedCtor() {
  qux_int_ = PROTOBUF_LONGLONG(0);
}

TestOneof2_NestedMessage::~TestOneof2_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof2.NestedMessage)
  SharedDtor();
}

void TestOneof2_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestOneof2_NestedMessage::ArenaDtor(void* object) {
  TestOneof2_NestedMessage* _this = reinterpret_cast< TestOneof2_NestedMessage* >(object);
  (void)_this;
}
void TestOneof2_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestOneof2_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestOneof2_NestedMessage& TestOneof2_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestOneof2_NestedMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestOneof2_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof2.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corge_int_.Clear();
  qux_int_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestOneof2_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 qux_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_qux_int(&has_bits);
          qux_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 corge_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_corge_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_corge_int(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestOneof2_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof2.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 qux_int = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_qux_int(), target);
  }

  // repeated int32 corge_int = 2;
  for (int i = 0, n = this->_internal_corge_int_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_corge_int(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof2.NestedMessage)
  return target;
}

size_t TestOneof2_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof2.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 corge_int = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->corge_int_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_corge_int_size());
    total_size += data_size;
  }

  // optional int64 qux_int = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_qux_int());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestOneof2_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestOneof2.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestOneof2_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestOneof2_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestOneof2.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestOneof2.NestedMessage)
    MergeFrom(*source);
  }
}

void TestOneof2_NestedMessage::MergeFrom(const TestOneof2_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof2.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  corge_int_.MergeFrom(from.corge_int_);
  if (from._internal_has_qux_int()) {
    _internal_set_qux_int(from._internal_qux_int());
  }
}

void TestOneof2_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestOneof2.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestOneof2_NestedMessage::CopyFrom(const TestOneof2_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof2.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof2_NestedMessage::IsInitialized() const {
  return true;
}

void TestOneof2_NestedMessage::InternalSwap(TestOneof2_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  corge_int_.InternalSwap(&other->corge_int_);
  swap(qux_int_, other->qux_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof2_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestOneof2::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestOneof2_default_instance_.foo_int_ = 0;
  ::protobuf_unittest::_TestOneof2_default_instance_.foo_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_unittest::_TestOneof2_default_instance_.foo_cord_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_unittest::_TestOneof2_default_instance_.foo_string_piece_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_unittest::_TestOneof2_default_instance_.foo_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_unittest::_TestOneof2_default_instance_.foo_enum_ = 1;
  ::protobuf_unittest::_TestOneof2_default_instance_.foo_message_ = const_cast< ::protobuf_unittest::TestOneof2_NestedMessage*>(
      ::protobuf_unittest::TestOneof2_NestedMessage::internal_default_instance());
  ::protobuf_unittest::_TestOneof2_default_instance_.foogroup_ = const_cast< ::protobuf_unittest::TestOneof2_FooGroup*>(
      ::protobuf_unittest::TestOneof2_FooGroup::internal_default_instance());
  ::protobuf_unittest::_TestOneof2_default_instance_.foo_lazy_message_ = const_cast< ::protobuf_unittest::TestOneof2_NestedMessage*>(
      ::protobuf_unittest::TestOneof2_NestedMessage::internal_default_instance());
  ::protobuf_unittest::_TestOneof2_default_instance_.bar_int_ = 5;
  ::protobuf_unittest::_TestOneof2_default_instance_.bar_string_.UnsafeSetDefault(
      &::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_.get());
  ::protobuf_unittest::_TestOneof2_default_instance_.bar_cord_.UnsafeSetDefault(
      &::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_cord_.get());
  ::protobuf_unittest::_TestOneof2_default_instance_.bar_string_piece_.UnsafeSetDefault(
      &::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_piece_.get());
  ::protobuf_unittest::_TestOneof2_default_instance_.bar_bytes_.UnsafeSetDefault(
      &::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_bytes_.get());
  ::protobuf_unittest::_TestOneof2_default_instance_.bar_enum_ = 2;
}
class TestOneof2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneof2>()._has_bits_);
  static const ::protobuf_unittest::TestOneof2_NestedMessage& foo_message(const TestOneof2* msg);
  static const ::protobuf_unittest::TestOneof2_FooGroup& foogroup(const TestOneof2* msg);
  static const ::protobuf_unittest::TestOneof2_NestedMessage& foo_lazy_message(const TestOneof2* msg);
  static void set_has_baz_int(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_baz_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestOneof2_NestedMessage&
TestOneof2::_Internal::foo_message(const TestOneof2* msg) {
  return *msg->foo_.foo_message_;
}
const ::protobuf_unittest::TestOneof2_FooGroup&
TestOneof2::_Internal::foogroup(const TestOneof2* msg) {
  return *msg->foo_.foogroup_;
}
const ::protobuf_unittest::TestOneof2_NestedMessage&
TestOneof2::_Internal::foo_lazy_message(const TestOneof2* msg) {
  return *msg->foo_.foo_lazy_message_;
}
void TestOneof2::set_allocated_foo_message(::protobuf_unittest::TestOneof2_NestedMessage* foo_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_foo();
  if (foo_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foo_message);
    if (message_arena != submessage_arena) {
      foo_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo_message, submessage_arena);
    }
    set_has_foo_message();
    foo_.foo_message_ = foo_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foo_message)
}
void TestOneof2::set_allocated_foogroup(::protobuf_unittest::TestOneof2_FooGroup* foogroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_foo();
  if (foogroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foogroup);
    if (message_arena != submessage_arena) {
      foogroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foogroup, submessage_arena);
    }
    set_has_foogroup();
    foo_.foogroup_ = foogroup;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foogroup)
}
void TestOneof2::set_allocated_foo_lazy_message(::protobuf_unittest::TestOneof2_NestedMessage* foo_lazy_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_foo();
  if (foo_lazy_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foo_lazy_message);
    if (message_arena != submessage_arena) {
      foo_lazy_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo_lazy_message, submessage_arena);
    }
    set_has_foo_lazy_message();
    foo_.foo_lazy_message_ = foo_lazy_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foo_lazy_message)
}
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestOneof2::_i_give_permission_to_break_this_code_default_bar_cord_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_piece_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestOneof2::_i_give_permission_to_break_this_code_default_bar_bytes_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_;
TestOneof2::TestOneof2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestOneof2)
}
TestOneof2::TestOneof2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof2)
}
TestOneof2::TestOneof2(const TestOneof2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  baz_string_.UnsafeSetDefault(&::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_.get());
  if (from._internal_has_baz_string()) {
    baz_string_.Set(&::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_.get(), from._internal_baz_string(),
      GetArenaNoVirtual());
  }
  baz_int_ = from.baz_int_;
  clear_has_foo();
  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooCord: {
      _internal_set_foo_cord(from._internal_foo_cord());
      break;
    }
    case kFooStringPiece: {
      _internal_set_foo_string_piece(from._internal_foo_string_piece());
      break;
    }
    case kFooBytes: {
      _internal_set_foo_bytes(from._internal_foo_bytes());
      break;
    }
    case kFooEnum: {
      _internal_set_foo_enum(from._internal_foo_enum());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestOneof2_NestedMessage::MergeFrom(from._internal_foo_message());
      break;
    }
    case kFoogroup: {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneof2_FooGroup::MergeFrom(from._internal_foogroup());
      break;
    }
    case kFooLazyMessage: {
      _internal_mutable_foo_lazy_message()->::protobuf_unittest::TestOneof2_NestedMessage::MergeFrom(from._internal_foo_lazy_message());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  clear_has_bar();
  switch (from.bar_case()) {
    case kBarInt: {
      _internal_set_bar_int(from._internal_bar_int());
      break;
    }
    case kBarString: {
      _internal_set_bar_string(from._internal_bar_string());
      break;
    }
    case kBarCord: {
      _internal_set_bar_cord(from._internal_bar_cord());
      break;
    }
    case kBarStringPiece: {
      _internal_set_bar_string_piece(from._internal_bar_string_piece());
      break;
    }
    case kBarBytes: {
      _internal_set_bar_bytes(from._internal_bar_bytes());
      break;
    }
    case kBarEnum: {
      _internal_set_bar_enum(from._internal_bar_enum());
      break;
    }
    case BAR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof2)
}

void TestOneof2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestOneof2_google_2fprotobuf_2funittest_2eproto.base);
  baz_string_.UnsafeSetDefault(&::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_.get());
  baz_int_ = 0;
  clear_has_foo();
  clear_has_bar();
}

TestOneof2::~TestOneof2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof2)
  SharedDtor();
}

void TestOneof2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  baz_string_.DestroyNoArena(&::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_.get());
  if (has_foo()) {
    clear_foo();
  }
  if (has_bar()) {
    clear_bar();
  }
}

void TestOneof2::ArenaDtor(void* object) {
  TestOneof2* _this = reinterpret_cast< TestOneof2* >(object);
  (void)_this;
}
void TestOneof2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestOneof2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestOneof2& TestOneof2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestOneof2_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestOneof2::clear_foo() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestOneof2)
  switch (foo_case()) {
    case kFooInt: {
      // No need to clear
      break;
    }
    case kFooString: {
      foo_.foo_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kFooCord: {
      foo_.foo_cord_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kFooStringPiece: {
      foo_.foo_string_piece_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kFooBytes: {
      foo_.foo_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kFooEnum: {
      // No need to clear
      break;
    }
    case kFooMessage: {
      if (GetArenaNoVirtual() == nullptr) {
        delete foo_.foo_message_;
      }
      break;
    }
    case kFoogroup: {
      if (GetArenaNoVirtual() == nullptr) {
        delete foo_.foogroup_;
      }
      break;
    }
    case kFooLazyMessage: {
      if (GetArenaNoVirtual() == nullptr) {
        delete foo_.foo_lazy_message_;
      }
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FOO_NOT_SET;
}

void TestOneof2::clear_bar() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestOneof2)
  switch (bar_case()) {
    case kBarInt: {
      // No need to clear
      break;
    }
    case kBarString: {
      bar_.bar_string_.Destroy(&::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_.get(),
          GetArenaNoVirtual());
      break;
    }
    case kBarCord: {
      bar_.bar_cord_.Destroy(&::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_cord_.get(),
          GetArenaNoVirtual());
      break;
    }
    case kBarStringPiece: {
      bar_.bar_string_piece_.Destroy(&::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_piece_.get(),
          GetArenaNoVirtual());
      break;
    }
    case kBarBytes: {
      bar_.bar_bytes_.Destroy(&::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_bytes_.get(),
          GetArenaNoVirtual());
      break;
    }
    case kBarEnum: {
      // No need to clear
      break;
    }
    case BAR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = BAR_NOT_SET;
}


void TestOneof2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    baz_string_.ClearToDefault(&::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_.get(), GetArenaNoVirtual());
  }
  baz_int_ = 0;
  clear_foo();
  clear_bar();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestOneof2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 foo_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_foo_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string foo_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_foo_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof2.foo_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string foo_cord = 3 [ctype = CORD];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_foo_cord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof2.foo_cord");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string foo_string_piece = 4 [ctype = STRING_PIECE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_foo_string_piece();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof2.foo_string_piece");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes foo_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_foo_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestOneof2.NestedEnum foo_enum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestOneof2_NestedEnum_IsValid(val))) {
            _internal_set_foo_enum(static_cast<::protobuf_unittest::TestOneof2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestOneof2.NestedMessage foo_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group FooGroup = 8 { ... };
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 67)) {
          ptr = ctx->ParseGroup(_internal_mutable_foogroup(), ptr, 67);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestOneof2.NestedMessage foo_lazy_message = 11 [lazy = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_lazy_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bar_int = 12 [default = 5];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _internal_set_bar_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bar_string = 13 [default = "STRING"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_bar_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof2.bar_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bar_cord = 14 [default = "CORD", ctype = CORD];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_bar_cord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof2.bar_cord");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bar_string_piece = 15 [default = "SPIECE", ctype = STRING_PIECE];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_bar_string_piece();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof2.bar_string_piece");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bar_bytes = 16 [default = "BYTES"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_bar_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestOneof2.NestedEnum bar_enum = 17 [default = BAR];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestOneof2_NestedEnum_IsValid(val))) {
            _internal_set_bar_enum(static_cast<::protobuf_unittest::TestOneof2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 baz_int = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_baz_int(&has_bits);
          baz_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string baz_string = 19 [default = "BAZ"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_baz_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestOneof2.baz_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestOneof2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (foo_case()) {
    case kFooInt: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo_int(), target);
      break;
    }
    case kFooString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_string().data(), static_cast<int>(this->_internal_foo_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.foo_string");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_foo_string(), target);
      break;
    }
    case kFooCord: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_cord().data(), static_cast<int>(this->_internal_foo_cord().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.foo_cord");
      target = stream->WriteStringMaybeAliased(
          3, this->_internal_foo_cord(), target);
      break;
    }
    case kFooStringPiece: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_string_piece().data(), static_cast<int>(this->_internal_foo_string_piece().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.foo_string_piece");
      target = stream->WriteStringMaybeAliased(
          4, this->_internal_foo_string_piece(), target);
      break;
    }
    case kFooBytes: {
      target = stream->WriteBytesMaybeAliased(
          5, this->_internal_foo_bytes(), target);
      break;
    }
    case kFooEnum: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        6, this->_internal_foo_enum(), target);
      break;
    }
    case kFooMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::foo_message(this), target, stream);
      break;
    }
    case kFoogroup: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteGroup(
          8, _Internal::foogroup(this), target, stream);
      break;
    }
    case kFooLazyMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::foo_lazy_message(this), target, stream);
      break;
    }
    default: ;
  }
  switch (bar_case()) {
    case kBarInt: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_bar_int(), target);
      break;
    }
    case kBarString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_bar_string().data(), static_cast<int>(this->_internal_bar_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.bar_string");
      target = stream->WriteStringMaybeAliased(
          13, this->_internal_bar_string(), target);
      break;
    }
    case kBarCord: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_bar_cord().data(), static_cast<int>(this->_internal_bar_cord().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.bar_cord");
      target = stream->WriteStringMaybeAliased(
          14, this->_internal_bar_cord(), target);
      break;
    }
    case kBarStringPiece: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_bar_string_piece().data(), static_cast<int>(this->_internal_bar_string_piece().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.bar_string_piece");
      target = stream->WriteStringMaybeAliased(
          15, this->_internal_bar_string_piece(), target);
      break;
    }
    case kBarBytes: {
      target = stream->WriteBytesMaybeAliased(
          16, this->_internal_bar_bytes(), target);
      break;
    }
    case kBarEnum: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        17, this->_internal_bar_enum(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional int32 baz_int = 18;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_baz_int(), target);
  }

  // optional string baz_string = 19 [default = "BAZ"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_baz_string().data(), static_cast<int>(this->_internal_baz_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneof2.baz_string");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_baz_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof2)
  return target;
}

size_t TestOneof2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string baz_string = 19 [default = "BAZ"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_baz_string());
    }

    // optional int32 baz_int = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_baz_int());
    }

  }
  switch (foo_case()) {
    // optional int32 foo_int = 1;
    case kFooInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_foo_int());
      break;
    }
    // optional string foo_string = 2;
    case kFooString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string());
      break;
    }
    // optional string foo_cord = 3 [ctype = CORD];
    case kFooCord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_cord());
      break;
    }
    // optional string foo_string_piece = 4 [ctype = STRING_PIECE];
    case kFooStringPiece: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string_piece());
      break;
    }
    // optional bytes foo_bytes = 5;
    case kFooBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_foo_bytes());
      break;
    }
    // optional .protobuf_unittest.TestOneof2.NestedEnum foo_enum = 6;
    case kFooEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_foo_enum());
      break;
    }
    // optional .protobuf_unittest.TestOneof2.NestedMessage foo_message = 7;
    case kFooMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_.foo_message_);
      break;
    }
    // optional group FooGroup = 8 { ... };
    case kFoogroup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *foo_.foogroup_);
      break;
    }
    // optional .protobuf_unittest.TestOneof2.NestedMessage foo_lazy_message = 11 [lazy = true];
    case kFooLazyMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_.foo_lazy_message_);
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  switch (bar_case()) {
    // optional int32 bar_int = 12 [default = 5];
    case kBarInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bar_int());
      break;
    }
    // optional string bar_string = 13 [default = "STRING"];
    case kBarString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bar_string());
      break;
    }
    // optional string bar_cord = 14 [default = "CORD", ctype = CORD];
    case kBarCord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bar_cord());
      break;
    }
    // optional string bar_string_piece = 15 [default = "SPIECE", ctype = STRING_PIECE];
    case kBarStringPiece: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bar_string_piece());
      break;
    }
    // optional bytes bar_bytes = 16 [default = "BYTES"];
    case kBarBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bar_bytes());
      break;
    }
    // optional .protobuf_unittest.TestOneof2.NestedEnum bar_enum = 17 [default = BAR];
    case kBarEnum: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bar_enum());
      break;
    }
    case BAR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestOneof2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestOneof2)
  GOOGLE_DCHECK_NE(&from, this);
  const TestOneof2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestOneof2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestOneof2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestOneof2)
    MergeFrom(*source);
  }
}

void TestOneof2::MergeFrom(const TestOneof2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_baz_string(from._internal_baz_string());
    }
    if (cached_has_bits & 0x00000002u) {
      baz_int_ = from.baz_int_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooCord: {
      _internal_set_foo_cord(from._internal_foo_cord());
      break;
    }
    case kFooStringPiece: {
      _internal_set_foo_string_piece(from._internal_foo_string_piece());
      break;
    }
    case kFooBytes: {
      _internal_set_foo_bytes(from._internal_foo_bytes());
      break;
    }
    case kFooEnum: {
      _internal_set_foo_enum(from._internal_foo_enum());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestOneof2_NestedMessage::MergeFrom(from._internal_foo_message());
      break;
    }
    case kFoogroup: {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneof2_FooGroup::MergeFrom(from._internal_foogroup());
      break;
    }
    case kFooLazyMessage: {
      _internal_mutable_foo_lazy_message()->::protobuf_unittest::TestOneof2_NestedMessage::MergeFrom(from._internal_foo_lazy_message());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  switch (from.bar_case()) {
    case kBarInt: {
      _internal_set_bar_int(from._internal_bar_int());
      break;
    }
    case kBarString: {
      _internal_set_bar_string(from._internal_bar_string());
      break;
    }
    case kBarCord: {
      _internal_set_bar_cord(from._internal_bar_cord());
      break;
    }
    case kBarStringPiece: {
      _internal_set_bar_string_piece(from._internal_bar_string_piece());
      break;
    }
    case kBarBytes: {
      _internal_set_bar_bytes(from._internal_bar_bytes());
      break;
    }
    case kBarEnum: {
      _internal_set_bar_enum(from._internal_bar_enum());
      break;
    }
    case BAR_NOT_SET: {
      break;
    }
  }
}

void TestOneof2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestOneof2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestOneof2::CopyFrom(const TestOneof2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof2::IsInitialized() const {
  return true;
}

void TestOneof2::InternalSwap(TestOneof2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  baz_string_.Swap(&other->baz_string_, &::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_.get(),
    GetArenaNoVirtual());
  swap(baz_int_, other->baz_int_);
  swap(foo_, other->foo_);
  swap(bar_, other->bar_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRequiredOneof_NestedMessage::InitAsDefaultInstance() {
}
class TestRequiredOneof_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequiredOneof_NestedMessage>()._has_bits_);
  static void set_has_required_double(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestRequiredOneof_NestedMessage::TestRequiredOneof_NestedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestRequiredOneof.NestedMessage)
}
TestRequiredOneof_NestedMessage::TestRequiredOneof_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredOneof.NestedMessage)
}
TestRequiredOneof_NestedMessage::TestRequiredOneof_NestedMessage(const TestRequiredOneof_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  required_double_ = from.required_double_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredOneof.NestedMessage)
}

void TestRequiredOneof_NestedMessage::SharedCtor() {
  required_double_ = 0;
}

TestRequiredOneof_NestedMessage::~TestRequiredOneof_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredOneof.NestedMessage)
  SharedDtor();
}

void TestRequiredOneof_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestRequiredOneof_NestedMessage::ArenaDtor(void* object) {
  TestRequiredOneof_NestedMessage* _this = reinterpret_cast< TestRequiredOneof_NestedMessage* >(object);
  (void)_this;
}
void TestRequiredOneof_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRequiredOneof_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRequiredOneof_NestedMessage& TestRequiredOneof_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRequiredOneof_NestedMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestRequiredOneof_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_double_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestRequiredOneof_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double required_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_required_double(&has_bits);
          required_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRequiredOneof_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double required_double = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_required_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredOneof.NestedMessage)
  return target;
}

size_t TestRequiredOneof_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  size_t total_size = 0;

  // required double required_double = 1;
  if (_internal_has_required_double()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequiredOneof_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequiredOneof_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRequiredOneof_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestRequiredOneof.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestRequiredOneof.NestedMessage)
    MergeFrom(*source);
  }
}

void TestRequiredOneof_NestedMessage::MergeFrom(const TestRequiredOneof_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_required_double()) {
    _internal_set_required_double(from._internal_required_double());
  }
}

void TestRequiredOneof_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequiredOneof_NestedMessage::CopyFrom(const TestRequiredOneof_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredOneof_NestedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TestRequiredOneof_NestedMessage::InternalSwap(TestRequiredOneof_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(required_double_, other->required_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequiredOneof_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRequiredOneof::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestRequiredOneof_default_instance_.foo_int_ = 0;
  ::protobuf_unittest::_TestRequiredOneof_default_instance_.foo_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_unittest::_TestRequiredOneof_default_instance_.foo_message_ = const_cast< ::protobuf_unittest::TestRequiredOneof_NestedMessage*>(
      ::protobuf_unittest::TestRequiredOneof_NestedMessage::internal_default_instance());
}
class TestRequiredOneof::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequiredOneof>()._has_bits_);
  static const ::protobuf_unittest::TestRequiredOneof_NestedMessage& foo_message(const TestRequiredOneof* msg);
};

const ::protobuf_unittest::TestRequiredOneof_NestedMessage&
TestRequiredOneof::_Internal::foo_message(const TestRequiredOneof* msg) {
  return *msg->foo_.foo_message_;
}
void TestRequiredOneof::set_allocated_foo_message(::protobuf_unittest::TestRequiredOneof_NestedMessage* foo_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_foo();
  if (foo_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foo_message);
    if (message_arena != submessage_arena) {
      foo_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo_message, submessage_arena);
    }
    set_has_foo_message();
    foo_.foo_message_ = foo_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestRequiredOneof.foo_message)
}
TestRequiredOneof::TestRequiredOneof()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestRequiredOneof)
}
TestRequiredOneof::TestRequiredOneof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredOneof)
}
TestRequiredOneof::TestRequiredOneof(const TestRequiredOneof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_foo();
  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestRequiredOneof_NestedMessage::MergeFrom(from._internal_foo_message());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredOneof)
}

void TestRequiredOneof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestRequiredOneof_google_2fprotobuf_2funittest_2eproto.base);
  clear_has_foo();
}

TestRequiredOneof::~TestRequiredOneof() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredOneof)
  SharedDtor();
}

void TestRequiredOneof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_foo()) {
    clear_foo();
  }
}

void TestRequiredOneof::ArenaDtor(void* object) {
  TestRequiredOneof* _this = reinterpret_cast< TestRequiredOneof* >(object);
  (void)_this;
}
void TestRequiredOneof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRequiredOneof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRequiredOneof& TestRequiredOneof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRequiredOneof_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestRequiredOneof::clear_foo() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestRequiredOneof)
  switch (foo_case()) {
    case kFooInt: {
      // No need to clear
      break;
    }
    case kFooString: {
      foo_.foo_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kFooMessage: {
      if (GetArenaNoVirtual() == nullptr) {
        delete foo_.foo_message_;
      }
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FOO_NOT_SET;
}


void TestRequiredOneof::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredOneof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_foo();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestRequiredOneof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 foo_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_foo_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string foo_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_foo_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestRequiredOneof.foo_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestRequiredOneof.NestedMessage foo_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRequiredOneof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredOneof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (foo_case()) {
    case kFooInt: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo_int(), target);
      break;
    }
    case kFooString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_string().data(), static_cast<int>(this->_internal_foo_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestRequiredOneof.foo_string");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_foo_string(), target);
      break;
    }
    case kFooMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::foo_message(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredOneof)
  return target;
}

size_t TestRequiredOneof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredOneof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (foo_case()) {
    // optional int32 foo_int = 1;
    case kFooInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_foo_int());
      break;
    }
    // optional string foo_string = 2;
    case kFooString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string());
      break;
    }
    // optional .protobuf_unittest.TestRequiredOneof.NestedMessage foo_message = 3;
    case kFooMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_.foo_message_);
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequiredOneof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestRequiredOneof)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequiredOneof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRequiredOneof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestRequiredOneof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestRequiredOneof)
    MergeFrom(*source);
  }
}

void TestRequiredOneof::MergeFrom(const TestRequiredOneof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredOneof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestRequiredOneof_NestedMessage::MergeFrom(from._internal_foo_message());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
}

void TestRequiredOneof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestRequiredOneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequiredOneof::CopyFrom(const TestRequiredOneof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredOneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredOneof::IsInitialized() const {
  switch (foo_case()) {
    case kFooInt: {
      break;
    }
    case kFooString: {
      break;
    }
    case kFooMessage: {
      if (has_foo_message()) {
        if (!this->foo_message().IsInitialized()) return false;
      }
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  return true;
}

void TestRequiredOneof::InternalSwap(TestRequiredOneof* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foo_, other->foo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequiredOneof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPackedTypes::InitAsDefaultInstance() {
}
class TestPackedTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<TestPackedTypes>()._has_bits_);
};

TestPackedTypes::TestPackedTypes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestPackedTypes)
}
TestPackedTypes::TestPackedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  packed_int32_(arena),
  packed_int64_(arena),
  packed_uint32_(arena),
  packed_uint64_(arena),
  packed_sint32_(arena),
  packed_sint64_(arena),
  packed_fixed32_(arena),
  packed_fixed64_(arena),
  packed_sfixed32_(arena),
  packed_sfixed64_(arena),
  packed_float_(arena),
  packed_double_(arena),
  packed_bool_(arena),
  packed_enum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPackedTypes)
}
TestPackedTypes::TestPackedTypes(const TestPackedTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      packed_int32_(from.packed_int32_),
      packed_int64_(from.packed_int64_),
      packed_uint32_(from.packed_uint32_),
      packed_uint64_(from.packed_uint64_),
      packed_sint32_(from.packed_sint32_),
      packed_sint64_(from.packed_sint64_),
      packed_fixed32_(from.packed_fixed32_),
      packed_fixed64_(from.packed_fixed64_),
      packed_sfixed32_(from.packed_sfixed32_),
      packed_sfixed64_(from.packed_sfixed64_),
      packed_float_(from.packed_float_),
      packed_double_(from.packed_double_),
      packed_bool_(from.packed_bool_),
      packed_enum_(from.packed_enum_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPackedTypes)
}

void TestPackedTypes::SharedCtor() {
}

TestPackedTypes::~TestPackedTypes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPackedTypes)
  SharedDtor();
}

void TestPackedTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestPackedTypes::ArenaDtor(void* object) {
  TestPackedTypes* _this = reinterpret_cast< TestPackedTypes* >(object);
  (void)_this;
}
void TestPackedTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPackedTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPackedTypes& TestPackedTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPackedTypes_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestPackedTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPackedTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packed_int32_.Clear();
  packed_int64_.Clear();
  packed_uint32_.Clear();
  packed_uint64_.Clear();
  packed_sint32_.Clear();
  packed_sint64_.Clear();
  packed_fixed32_.Clear();
  packed_fixed64_.Clear();
  packed_sfixed32_.Clear();
  packed_sfixed64_.Clear();
  packed_float_.Clear();
  packed_double_.Clear();
  packed_bool_.Clear();
  packed_enum_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestPackedTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 packed_int32 = 90 [packed = true];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 packed_int64 = 91 [packed = true];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packed_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_packed_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 packed_uint32 = 92 [packed = true];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          _internal_add_packed_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 packed_uint64 = 93 [packed = true];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packed_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232) {
          _internal_add_packed_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 packed_sint32 = 94 [packed = true];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_packed_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240) {
          _internal_add_packed_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 packed_sint64 = 95 [packed = true];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_packed_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248) {
          _internal_add_packed_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 packed_fixed32 = 96 [packed = true];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_packed_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5) {
          _internal_add_packed_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 packed_fixed64 = 97 [packed = true];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_packed_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_packed_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_packed_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_packed_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_packed_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_packed_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated float packed_float = 100 [packed = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_packed_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_packed_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double packed_double = 101 [packed = true];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_packed_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_packed_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool packed_bool = 102 [packed = true];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_packed_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_packed_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_packed_enum(), ptr, ctx, ::protobuf_unittest::ForeignEnum_IsValid, &_internal_metadata_, 103);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_add_packed_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(103, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPackedTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPackedTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 packed_int32 = 90 [packed = true];
  {
    int byte_size = _packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          90, _internal_packed_int32(), byte_size, target);
    }
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  {
    int byte_size = _packed_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          91, _internal_packed_int64(), byte_size, target);
    }
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  {
    int byte_size = _packed_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          92, _internal_packed_uint32(), byte_size, target);
    }
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  {
    int byte_size = _packed_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          93, _internal_packed_uint64(), byte_size, target);
    }
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  {
    int byte_size = _packed_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          94, _internal_packed_sint32(), byte_size, target);
    }
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  {
    int byte_size = _packed_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          95, _internal_packed_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  if (this->_internal_packed_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(96, _internal_packed_fixed32(), target);
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  if (this->_internal_packed_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(97, _internal_packed_fixed64(), target);
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  if (this->_internal_packed_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(98, _internal_packed_sfixed32(), target);
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  if (this->_internal_packed_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(99, _internal_packed_sfixed64(), target);
  }

  // repeated float packed_float = 100 [packed = true];
  if (this->_internal_packed_float_size() > 0) {
    target = stream->WriteFixedPacked(100, _internal_packed_float(), target);
  }

  // repeated double packed_double = 101 [packed = true];
  if (this->_internal_packed_double_size() > 0) {
    target = stream->WriteFixedPacked(101, _internal_packed_double(), target);
  }

  // repeated bool packed_bool = 102 [packed = true];
  if (this->_internal_packed_bool_size() > 0) {
    target = stream->WriteFixedPacked(102, _internal_packed_bool(), target);
  }

  // repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
  {
    int byte_size = _packed_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          103, packed_enum_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPackedTypes)
  return target;
}

size_t TestPackedTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPackedTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 packed_int32 = 90 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->packed_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->packed_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packed_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->packed_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->packed_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->packed_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_fixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_fixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sfixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sfixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float packed_float = 100 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double packed_double = 101 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool packed_bool = 102 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_bool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_packed_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPackedTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestPackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPackedTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPackedTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestPackedTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestPackedTypes)
    MergeFrom(*source);
  }
}

void TestPackedTypes::MergeFrom(const TestPackedTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packed_int32_.MergeFrom(from.packed_int32_);
  packed_int64_.MergeFrom(from.packed_int64_);
  packed_uint32_.MergeFrom(from.packed_uint32_);
  packed_uint64_.MergeFrom(from.packed_uint64_);
  packed_sint32_.MergeFrom(from.packed_sint32_);
  packed_sint64_.MergeFrom(from.packed_sint64_);
  packed_fixed32_.MergeFrom(from.packed_fixed32_);
  packed_fixed64_.MergeFrom(from.packed_fixed64_);
  packed_sfixed32_.MergeFrom(from.packed_sfixed32_);
  packed_sfixed64_.MergeFrom(from.packed_sfixed64_);
  packed_float_.MergeFrom(from.packed_float_);
  packed_double_.MergeFrom(from.packed_double_);
  packed_bool_.MergeFrom(from.packed_bool_);
  packed_enum_.MergeFrom(from.packed_enum_);
}

void TestPackedTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestPackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPackedTypes::CopyFrom(const TestPackedTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPackedTypes::IsInitialized() const {
  return true;
}

void TestPackedTypes::InternalSwap(TestPackedTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packed_int32_.InternalSwap(&other->packed_int32_);
  packed_int64_.InternalSwap(&other->packed_int64_);
  packed_uint32_.InternalSwap(&other->packed_uint32_);
  packed_uint64_.InternalSwap(&other->packed_uint64_);
  packed_sint32_.InternalSwap(&other->packed_sint32_);
  packed_sint64_.InternalSwap(&other->packed_sint64_);
  packed_fixed32_.InternalSwap(&other->packed_fixed32_);
  packed_fixed64_.InternalSwap(&other->packed_fixed64_);
  packed_sfixed32_.InternalSwap(&other->packed_sfixed32_);
  packed_sfixed64_.InternalSwap(&other->packed_sfixed64_);
  packed_float_.InternalSwap(&other->packed_float_);
  packed_double_.InternalSwap(&other->packed_double_);
  packed_bool_.InternalSwap(&other->packed_bool_);
  packed_enum_.InternalSwap(&other->packed_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPackedTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestUnpackedTypes::InitAsDefaultInstance() {
}
class TestUnpackedTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<TestUnpackedTypes>()._has_bits_);
};

TestUnpackedTypes::TestUnpackedTypes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestUnpackedTypes)
}
TestUnpackedTypes::TestUnpackedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  unpacked_int32_(arena),
  unpacked_int64_(arena),
  unpacked_uint32_(arena),
  unpacked_uint64_(arena),
  unpacked_sint32_(arena),
  unpacked_sint64_(arena),
  unpacked_fixed32_(arena),
  unpacked_fixed64_(arena),
  unpacked_sfixed32_(arena),
  unpacked_sfixed64_(arena),
  unpacked_float_(arena),
  unpacked_double_(arena),
  unpacked_bool_(arena),
  unpacked_enum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestUnpackedTypes)
}
TestUnpackedTypes::TestUnpackedTypes(const TestUnpackedTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      unpacked_int32_(from.unpacked_int32_),
      unpacked_int64_(from.unpacked_int64_),
      unpacked_uint32_(from.unpacked_uint32_),
      unpacked_uint64_(from.unpacked_uint64_),
      unpacked_sint32_(from.unpacked_sint32_),
      unpacked_sint64_(from.unpacked_sint64_),
      unpacked_fixed32_(from.unpacked_fixed32_),
      unpacked_fixed64_(from.unpacked_fixed64_),
      unpacked_sfixed32_(from.unpacked_sfixed32_),
      unpacked_sfixed64_(from.unpacked_sfixed64_),
      unpacked_float_(from.unpacked_float_),
      unpacked_double_(from.unpacked_double_),
      unpacked_bool_(from.unpacked_bool_),
      unpacked_enum_(from.unpacked_enum_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestUnpackedTypes)
}

void TestUnpackedTypes::SharedCtor() {
}

TestUnpackedTypes::~TestUnpackedTypes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestUnpackedTypes)
  SharedDtor();
}

void TestUnpackedTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestUnpackedTypes::ArenaDtor(void* object) {
  TestUnpackedTypes* _this = reinterpret_cast< TestUnpackedTypes* >(object);
  (void)_this;
}
void TestUnpackedTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestUnpackedTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestUnpackedTypes& TestUnpackedTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestUnpackedTypes_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestUnpackedTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestUnpackedTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unpacked_int32_.Clear();
  unpacked_int64_.Clear();
  unpacked_uint32_.Clear();
  unpacked_uint64_.Clear();
  unpacked_sint32_.Clear();
  unpacked_sint64_.Clear();
  unpacked_fixed32_.Clear();
  unpacked_fixed64_.Clear();
  unpacked_sfixed32_.Clear();
  unpacked_sfixed64_.Clear();
  unpacked_float_.Clear();
  unpacked_double_.Clear();
  unpacked_bool_.Clear();
  unpacked_enum_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestUnpackedTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 unpacked_int32 = 90 [packed = false];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<720>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unpacked_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 unpacked_int64 = 91 [packed = false];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<728>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_unpacked_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 unpacked_uint32 = 92 [packed = false];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<736>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unpacked_uint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 unpacked_uint64 = 93 [packed = false];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<744>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unpacked_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 unpacked_sint32 = 94 [packed = false];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<752>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_unpacked_sint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 unpacked_sint64 = 95 [packed = false];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<760>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_unpacked_sint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 unpacked_fixed32 = 96 [packed = false];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<773>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_unpacked_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 unpacked_fixed64 = 97 [packed = false];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<777>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_unpacked_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<789>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_unpacked_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<793>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_unpacked_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float unpacked_float = 100 [packed = false];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<805>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_unpacked_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double unpacked_double = 101 [packed = false];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<809>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_unpacked_double(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool unpacked_bool = 102 [packed = false];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<816>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_unpacked_bool(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
              _internal_add_unpacked_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(103, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<824>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_unpacked_enum(), ptr, ctx, ::protobuf_unittest::ForeignEnum_IsValid, &_internal_metadata_, 103);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestUnpackedTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestUnpackedTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 unpacked_int32 = 90 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(90, this->_internal_unpacked_int32(i), target);
  }

  // repeated int64 unpacked_int64 = 91 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(91, this->_internal_unpacked_int64(i), target);
  }

  // repeated uint32 unpacked_uint32 = 92 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(92, this->_internal_unpacked_uint32(i), target);
  }

  // repeated uint64 unpacked_uint64 = 93 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(93, this->_internal_unpacked_uint64(i), target);
  }

  // repeated sint32 unpacked_sint32 = 94 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(94, this->_internal_unpacked_sint32(i), target);
  }

  // repeated sint64 unpacked_sint64 = 95 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(95, this->_internal_unpacked_sint64(i), target);
  }

  // repeated fixed32 unpacked_fixed32 = 96 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(96, this->_internal_unpacked_fixed32(i), target);
  }

  // repeated fixed64 unpacked_fixed64 = 97 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(97, this->_internal_unpacked_fixed64(i), target);
  }

  // repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(98, this->_internal_unpacked_sfixed32(i), target);
  }

  // repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(99, this->_internal_unpacked_sfixed64(i), target);
  }

  // repeated float unpacked_float = 100 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(100, this->_internal_unpacked_float(i), target);
  }

  // repeated double unpacked_double = 101 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(101, this->_internal_unpacked_double(i), target);
  }

  // repeated bool unpacked_bool = 102 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->_internal_unpacked_bool(i), target);
  }

  // repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        103, this->_internal_unpacked_enum(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestUnpackedTypes)
  return target;
}

size_t TestUnpackedTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestUnpackedTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 unpacked_int32 = 90 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->unpacked_int32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_int32_size());
    total_size += data_size;
  }

  // repeated int64 unpacked_int64 = 91 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->unpacked_int64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_int64_size());
    total_size += data_size;
  }

  // repeated uint32 unpacked_uint32 = 92 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unpacked_uint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 unpacked_uint64 = 93 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->unpacked_uint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 unpacked_sint32 = 94 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->unpacked_sint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 unpacked_sint64 = 95 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->unpacked_sint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 unpacked_fixed32 = 96 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 unpacked_fixed64 = 97 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sfixed64_size());
    total_size += data_size;
  }

  // repeated float unpacked_float = 100 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_float_size());
    total_size += data_size;
  }

  // repeated double unpacked_double = 101 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_double_size());
    total_size += data_size;
  }

  // repeated bool unpacked_bool = 102 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_bool_size());
    total_size += data_size;
  }

  // repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_unpacked_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestUnpackedTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestUnpackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestUnpackedTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestUnpackedTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestUnpackedTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestUnpackedTypes)
    MergeFrom(*source);
  }
}

void TestUnpackedTypes::MergeFrom(const TestUnpackedTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestUnpackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unpacked_int32_.MergeFrom(from.unpacked_int32_);
  unpacked_int64_.MergeFrom(from.unpacked_int64_);
  unpacked_uint32_.MergeFrom(from.unpacked_uint32_);
  unpacked_uint64_.MergeFrom(from.unpacked_uint64_);
  unpacked_sint32_.MergeFrom(from.unpacked_sint32_);
  unpacked_sint64_.MergeFrom(from.unpacked_sint64_);
  unpacked_fixed32_.MergeFrom(from.unpacked_fixed32_);
  unpacked_fixed64_.MergeFrom(from.unpacked_fixed64_);
  unpacked_sfixed32_.MergeFrom(from.unpacked_sfixed32_);
  unpacked_sfixed64_.MergeFrom(from.unpacked_sfixed64_);
  unpacked_float_.MergeFrom(from.unpacked_float_);
  unpacked_double_.MergeFrom(from.unpacked_double_);
  unpacked_bool_.MergeFrom(from.unpacked_bool_);
  unpacked_enum_.MergeFrom(from.unpacked_enum_);
}

void TestUnpackedTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestUnpackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestUnpackedTypes::CopyFrom(const TestUnpackedTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestUnpackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestUnpackedTypes::IsInitialized() const {
  return true;
}

void TestUnpackedTypes::InternalSwap(TestUnpackedTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unpacked_int32_.InternalSwap(&other->unpacked_int32_);
  unpacked_int64_.InternalSwap(&other->unpacked_int64_);
  unpacked_uint32_.InternalSwap(&other->unpacked_uint32_);
  unpacked_uint64_.InternalSwap(&other->unpacked_uint64_);
  unpacked_sint32_.InternalSwap(&other->unpacked_sint32_);
  unpacked_sint64_.InternalSwap(&other->unpacked_sint64_);
  unpacked_fixed32_.InternalSwap(&other->unpacked_fixed32_);
  unpacked_fixed64_.InternalSwap(&other->unpacked_fixed64_);
  unpacked_sfixed32_.InternalSwap(&other->unpacked_sfixed32_);
  unpacked_sfixed64_.InternalSwap(&other->unpacked_sfixed64_);
  unpacked_float_.InternalSwap(&other->unpacked_float_);
  unpacked_double_.InternalSwap(&other->unpacked_double_);
  unpacked_bool_.InternalSwap(&other->unpacked_bool_);
  unpacked_enum_.InternalSwap(&other->unpacked_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestUnpackedTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPackedExtensions::InitAsDefaultInstance() {
}
class TestPackedExtensions::_Internal {
 public:
  using HasBits = decltype(std::declval<TestPackedExtensions>()._has_bits_);
};

TestPackedExtensions::TestPackedExtensions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestPackedExtensions)
}
TestPackedExtensions::TestPackedExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPackedExtensions)
}
TestPackedExtensions::TestPackedExtensions(const TestPackedExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPackedExtensions)
}

void TestPackedExtensions::SharedCtor() {
}

TestPackedExtensions::~TestPackedExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPackedExtensions)
  SharedDtor();
}

void TestPackedExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestPackedExtensions::ArenaDtor(void* object) {
  TestPackedExtensions* _this = reinterpret_cast< TestPackedExtensions* >(object);
  (void)_this;
}
void TestPackedExtensions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPackedExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPackedExtensions& TestPackedExtensions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPackedExtensions_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestPackedExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPackedExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestPackedExtensions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPackedExtensions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPackedExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
      1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPackedExtensions)
  return target;
}

size_t TestPackedExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPackedExtensions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPackedExtensions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestPackedExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPackedExtensions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPackedExtensions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestPackedExtensions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestPackedExtensions)
    MergeFrom(*source);
  }
}

void TestPackedExtensions::MergeFrom(const TestPackedExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPackedExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestPackedExtensions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestPackedExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPackedExtensions::CopyFrom(const TestPackedExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPackedExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPackedExtensions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestPackedExtensions::InternalSwap(TestPackedExtensions* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPackedExtensions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestUnpackedExtensions::InitAsDefaultInstance() {
}
class TestUnpackedExtensions::_Internal {
 public:
  using HasBits = decltype(std::declval<TestUnpackedExtensions>()._has_bits_);
};

TestUnpackedExtensions::TestUnpackedExtensions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestUnpackedExtensions)
}
TestUnpackedExtensions::TestUnpackedExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestUnpackedExtensions)
}
TestUnpackedExtensions::TestUnpackedExtensions(const TestUnpackedExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestUnpackedExtensions)
}

void TestUnpackedExtensions::SharedCtor() {
}

TestUnpackedExtensions::~TestUnpackedExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestUnpackedExtensions)
  SharedDtor();
}

void TestUnpackedExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestUnpackedExtensions::ArenaDtor(void* object) {
  TestUnpackedExtensions* _this = reinterpret_cast< TestUnpackedExtensions* >(object);
  (void)_this;
}
void TestUnpackedExtensions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestUnpackedExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestUnpackedExtensions& TestUnpackedExtensions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestUnpackedExtensions_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestUnpackedExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestUnpackedExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestUnpackedExtensions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestUnpackedExtensions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestUnpackedExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
      1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestUnpackedExtensions)
  return target;
}

size_t TestUnpackedExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestUnpackedExtensions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestUnpackedExtensions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestUnpackedExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  const TestUnpackedExtensions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestUnpackedExtensions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestUnpackedExtensions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestUnpackedExtensions)
    MergeFrom(*source);
  }
}

void TestUnpackedExtensions::MergeFrom(const TestUnpackedExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestUnpackedExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestUnpackedExtensions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestUnpackedExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestUnpackedExtensions::CopyFrom(const TestUnpackedExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestUnpackedExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestUnpackedExtensions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestUnpackedExtensions::InternalSwap(TestUnpackedExtensions* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestUnpackedExtensions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestDynamicExtensions_DynamicMessageType::InitAsDefaultInstance() {
}
class TestDynamicExtensions_DynamicMessageType::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDynamicExtensions_DynamicMessageType>()._has_bits_);
  static void set_has_dynamic_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestDynamicExtensions_DynamicMessageType::TestDynamicExtensions_DynamicMessageType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
}
TestDynamicExtensions_DynamicMessageType::TestDynamicExtensions_DynamicMessageType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
}
TestDynamicExtensions_DynamicMessageType::TestDynamicExtensions_DynamicMessageType(const TestDynamicExtensions_DynamicMessageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dynamic_field_ = from.dynamic_field_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
}

void TestDynamicExtensions_DynamicMessageType::SharedCtor() {
  dynamic_field_ = 0;
}

TestDynamicExtensions_DynamicMessageType::~TestDynamicExtensions_DynamicMessageType() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  SharedDtor();
}

void TestDynamicExtensions_DynamicMessageType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestDynamicExtensions_DynamicMessageType::ArenaDtor(void* object) {
  TestDynamicExtensions_DynamicMessageType* _this = reinterpret_cast< TestDynamicExtensions_DynamicMessageType* >(object);
  (void)_this;
}
void TestDynamicExtensions_DynamicMessageType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestDynamicExtensions_DynamicMessageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestDynamicExtensions_DynamicMessageType& TestDynamicExtensions_DynamicMessageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestDynamicExtensions_DynamicMessageType_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestDynamicExtensions_DynamicMessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamic_field_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestDynamicExtensions_DynamicMessageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dynamic_field = 2100;
      case 2100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_dynamic_field(&has_bits);
          dynamic_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestDynamicExtensions_DynamicMessageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dynamic_field = 2100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2100, this->_internal_dynamic_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  return target;
}

size_t TestDynamicExtensions_DynamicMessageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dynamic_field = 2100;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynamic_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDynamicExtensions_DynamicMessageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  const TestDynamicExtensions_DynamicMessageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestDynamicExtensions_DynamicMessageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
    MergeFrom(*source);
  }
}

void TestDynamicExtensions_DynamicMessageType::MergeFrom(const TestDynamicExtensions_DynamicMessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dynamic_field()) {
    _internal_set_dynamic_field(from._internal_dynamic_field());
  }
}

void TestDynamicExtensions_DynamicMessageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDynamicExtensions_DynamicMessageType::CopyFrom(const TestDynamicExtensions_DynamicMessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDynamicExtensions_DynamicMessageType::IsInitialized() const {
  return true;
}

void TestDynamicExtensions_DynamicMessageType::InternalSwap(TestDynamicExtensions_DynamicMessageType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dynamic_field_, other->dynamic_field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDynamicExtensions_DynamicMessageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestDynamicExtensions::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestDynamicExtensions_default_instance_._instance.get_mutable()->message_extension_ = const_cast< ::protobuf_unittest::ForeignMessage*>(
      ::protobuf_unittest::ForeignMessage::internal_default_instance());
  ::protobuf_unittest::_TestDynamicExtensions_default_instance_._instance.get_mutable()->dynamic_message_extension_ = const_cast< ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType*>(
      ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType::internal_default_instance());
}
class TestDynamicExtensions::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDynamicExtensions>()._has_bits_);
  static void set_has_scalar_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enum_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dynamic_enum_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protobuf_unittest::ForeignMessage& message_extension(const TestDynamicExtensions* msg);
  static void set_has_message_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType& dynamic_message_extension(const TestDynamicExtensions* msg);
  static void set_has_dynamic_message_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::ForeignMessage&
TestDynamicExtensions::_Internal::message_extension(const TestDynamicExtensions* msg) {
  return *msg->message_extension_;
}
const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType&
TestDynamicExtensions::_Internal::dynamic_message_extension(const TestDynamicExtensions* msg) {
  return *msg->dynamic_message_extension_;
}
void TestDynamicExtensions::unsafe_arena_set_allocated_message_extension(
    ::protobuf_unittest::ForeignMessage* message_extension) {
  if (GetArenaNoVirtual() == nullptr) {
    delete message_extension_;
  }
  message_extension_ = message_extension;
  if (message_extension) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDynamicExtensions.message_extension)
}
void TestDynamicExtensions::unsafe_arena_set_allocated_dynamic_message_extension(
    ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* dynamic_message_extension) {
  if (GetArenaNoVirtual() == nullptr) {
    delete dynamic_message_extension_;
  }
  dynamic_message_extension_ = dynamic_message_extension;
  if (dynamic_message_extension) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDynamicExtensions.dynamic_message_extension)
}
TestDynamicExtensions::TestDynamicExtensions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestDynamicExtensions)
}
TestDynamicExtensions::TestDynamicExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeated_extension_(arena),
  packed_extension_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDynamicExtensions)
}
TestDynamicExtensions::TestDynamicExtensions(const TestDynamicExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_extension_(from.repeated_extension_),
      packed_extension_(from.packed_extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_message_extension()) {
    message_extension_ = new ::protobuf_unittest::ForeignMessage(*from.message_extension_);
  } else {
    message_extension_ = nullptr;
  }
  if (from._internal_has_dynamic_message_extension()) {
    dynamic_message_extension_ = new ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType(*from.dynamic_message_extension_);
  } else {
    dynamic_message_extension_ = nullptr;
  }
  ::memcpy(&scalar_extension_, &from.scalar_extension_,
    static_cast<size_t>(reinterpret_cast<char*>(&dynamic_enum_extension_) -
    reinterpret_cast<char*>(&scalar_extension_)) + sizeof(dynamic_enum_extension_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDynamicExtensions)
}

void TestDynamicExtensions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestDynamicExtensions_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&message_extension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scalar_extension_) -
      reinterpret_cast<char*>(&message_extension_)) + sizeof(scalar_extension_));
  enum_extension_ = 4;
  dynamic_enum_extension_ = 2200;
}

TestDynamicExtensions::~TestDynamicExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDynamicExtensions)
  SharedDtor();
}

void TestDynamicExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete message_extension_;
  if (this != internal_default_instance()) delete dynamic_message_extension_;
}

void TestDynamicExtensions::ArenaDtor(void* object) {
  TestDynamicExtensions* _this = reinterpret_cast< TestDynamicExtensions* >(object);
  (void)_this;
}
void TestDynamicExtensions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestDynamicExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestDynamicExtensions& TestDynamicExtensions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestDynamicExtensions_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestDynamicExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDynamicExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_extension_.Clear();
  packed_extension_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(message_extension_ != nullptr);
      message_extension_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dynamic_message_extension_ != nullptr);
      dynamic_message_extension_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    scalar_extension_ = 0u;
    enum_extension_ = 4;
    dynamic_enum_extension_ = 2200;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestDynamicExtensions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 scalar_extension = 2000;
      case 2000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_scalar_extension(&has_bits);
          scalar_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum enum_extension = 2001;
      case 2001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_enum_extension(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2001, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension = 2002;
      case 2002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestDynamicExtensions_DynamicEnumType_IsValid(val))) {
            _internal_set_dynamic_enum_extension(static_cast<::protobuf_unittest::TestDynamicExtensions_DynamicEnumType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2002, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessage message_extension = 2003;
      case 2003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestDynamicExtensions.DynamicMessageType dynamic_message_extension = 2004;
      case 2004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_message_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repeated_extension = 2005;
      case 2005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_extension();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestDynamicExtensions.repeated_extension");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16042>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated sint32 packed_extension = 2006 [packed = true];
      case 2006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_packed_extension(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176) {
          _internal_add_packed_extension(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestDynamicExtensions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDynamicExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 scalar_extension = 2000;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2000, this->_internal_scalar_extension(), target);
  }

  // optional .protobuf_unittest.ForeignEnum enum_extension = 2001;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2001, this->_internal_enum_extension(), target);
  }

  // optional .protobuf_unittest.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension = 2002;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2002, this->_internal_dynamic_enum_extension(), target);
  }

  // optional .protobuf_unittest.ForeignMessage message_extension = 2003;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2003, _Internal::message_extension(this), target, stream);
  }

  // optional .protobuf_unittest.TestDynamicExtensions.DynamicMessageType dynamic_message_extension = 2004;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2004, _Internal::dynamic_message_extension(this), target, stream);
  }

  // repeated string repeated_extension = 2005;
  for (int i = 0, n = this->_internal_repeated_extension_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_extension(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestDynamicExtensions.repeated_extension");
    target = stream->WriteString(2005, s, target);
  }

  // repeated sint32 packed_extension = 2006 [packed = true];
  {
    int byte_size = _packed_extension_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          2006, _internal_packed_extension(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDynamicExtensions)
  return target;
}

size_t TestDynamicExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDynamicExtensions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string repeated_extension = 2005;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_extension_.size());
  for (int i = 0, n = repeated_extension_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_extension_.Get(i));
  }

  // repeated sint32 packed_extension = 2006 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->packed_extension_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_extension_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .protobuf_unittest.ForeignMessage message_extension = 2003;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_extension_);
    }

    // optional .protobuf_unittest.TestDynamicExtensions.DynamicMessageType dynamic_message_extension = 2004;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dynamic_message_extension_);
    }

    // optional fixed32 scalar_extension = 2000;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional .protobuf_unittest.ForeignEnum enum_extension = 2001;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_extension());
    }

    // optional .protobuf_unittest.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension = 2002;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dynamic_enum_extension());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDynamicExtensions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestDynamicExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  const TestDynamicExtensions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestDynamicExtensions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestDynamicExtensions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestDynamicExtensions)
    MergeFrom(*source);
  }
}

void TestDynamicExtensions::MergeFrom(const TestDynamicExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDynamicExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_extension_.MergeFrom(from.repeated_extension_);
  packed_extension_.MergeFrom(from.packed_extension_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_message_extension()->::protobuf_unittest::ForeignMessage::MergeFrom(from._internal_message_extension());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dynamic_message_extension()->::protobuf_unittest::TestDynamicExtensions_DynamicMessageType::MergeFrom(from._internal_dynamic_message_extension());
    }
    if (cached_has_bits & 0x00000004u) {
      scalar_extension_ = from.scalar_extension_;
    }
    if (cached_has_bits & 0x00000008u) {
      enum_extension_ = from.enum_extension_;
    }
    if (cached_has_bits & 0x00000010u) {
      dynamic_enum_extension_ = from.dynamic_enum_extension_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestDynamicExtensions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestDynamicExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDynamicExtensions::CopyFrom(const TestDynamicExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDynamicExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDynamicExtensions::IsInitialized() const {
  return true;
}

void TestDynamicExtensions::InternalSwap(TestDynamicExtensions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_extension_.InternalSwap(&other->repeated_extension_);
  packed_extension_.InternalSwap(&other->packed_extension_);
  swap(message_extension_, other->message_extension_);
  swap(dynamic_message_extension_, other->dynamic_message_extension_);
  swap(scalar_extension_, other->scalar_extension_);
  swap(enum_extension_, other->enum_extension_);
  swap(dynamic_enum_extension_, other->dynamic_enum_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDynamicExtensions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRepeatedScalarDifferentTagSizes::InitAsDefaultInstance() {
}
class TestRepeatedScalarDifferentTagSizes::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRepeatedScalarDifferentTagSizes>()._has_bits_);
};

TestRepeatedScalarDifferentTagSizes::TestRepeatedScalarDifferentTagSizes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
}
TestRepeatedScalarDifferentTagSizes::TestRepeatedScalarDifferentTagSizes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  repeated_fixed32_(arena),
  repeated_int32_(arena),
  repeated_fixed64_(arena),
  repeated_int64_(arena),
  repeated_float_(arena),
  repeated_uint64_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
}
TestRepeatedScalarDifferentTagSizes::TestRepeatedScalarDifferentTagSizes(const TestRepeatedScalarDifferentTagSizes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_int32_(from.repeated_int32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_int64_(from.repeated_int64_),
      repeated_float_(from.repeated_float_),
      repeated_uint64_(from.repeated_uint64_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
}

void TestRepeatedScalarDifferentTagSizes::SharedCtor() {
}

TestRepeatedScalarDifferentTagSizes::~TestRepeatedScalarDifferentTagSizes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  SharedDtor();
}

void TestRepeatedScalarDifferentTagSizes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestRepeatedScalarDifferentTagSizes::ArenaDtor(void* object) {
  TestRepeatedScalarDifferentTagSizes* _this = reinterpret_cast< TestRepeatedScalarDifferentTagSizes* >(object);
  (void)_this;
}
void TestRepeatedScalarDifferentTagSizes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRepeatedScalarDifferentTagSizes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRepeatedScalarDifferentTagSizes& TestRepeatedScalarDifferentTagSizes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRepeatedScalarDifferentTagSizes_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestRepeatedScalarDifferentTagSizes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_fixed32_.Clear();
  repeated_int32_.Clear();
  repeated_fixed64_.Clear();
  repeated_int64_.Clear();
  repeated_float_.Clear();
  repeated_uint64_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestRepeatedScalarDifferentTagSizes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed32 repeated_fixed32 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<101>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 2046;
      case 2046:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16369>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 2047;
      case 2047:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16376>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float repeated_float = 262142;
      case 262142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 262143;
      case 262143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRepeatedScalarDifferentTagSizes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 repeated_fixed32 = 12;
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(12, this->_internal_repeated_fixed32(i), target);
  }

  // repeated int32 repeated_int32 = 13;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_repeated_int32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 2046;
  for (int i = 0, n = this->_internal_repeated_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2046, this->_internal_repeated_fixed64(i), target);
  }

  // repeated int64 repeated_int64 = 2047;
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2047, this->_internal_repeated_int64(i), target);
  }

  // repeated float repeated_float = 262142;
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(262142, this->_internal_repeated_float(i), target);
  }

  // repeated uint64 repeated_uint64 = 262143;
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(262143, this->_internal_repeated_uint64(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  return target;
}

size_t TestRepeatedScalarDifferentTagSizes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 repeated_fixed32 = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  // repeated int32 repeated_int32 = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 2046;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed64_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 2047;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 262142;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 262143;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRepeatedScalarDifferentTagSizes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRepeatedScalarDifferentTagSizes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRepeatedScalarDifferentTagSizes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
    MergeFrom(*source);
  }
}

void TestRepeatedScalarDifferentTagSizes::MergeFrom(const TestRepeatedScalarDifferentTagSizes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
}

void TestRepeatedScalarDifferentTagSizes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRepeatedScalarDifferentTagSizes::CopyFrom(const TestRepeatedScalarDifferentTagSizes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRepeatedScalarDifferentTagSizes::IsInitialized() const {
  return true;
}

void TestRepeatedScalarDifferentTagSizes::InternalSwap(TestRepeatedScalarDifferentTagSizes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRepeatedScalarDifferentTagSizes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestParsingMerge_RepeatedFieldsGenerator_Group1::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_Group1_default_instance_._instance.get_mutable()->field1_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
}
class TestParsingMerge_RepeatedFieldsGenerator_Group1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge_RepeatedFieldsGenerator_Group1>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& field1(const TestParsingMerge_RepeatedFieldsGenerator_Group1* msg);
  static void set_has_field1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge_RepeatedFieldsGenerator_Group1::_Internal::field1(const TestParsingMerge_RepeatedFieldsGenerator_Group1* msg) {
  return *msg->field1_;
}
void TestParsingMerge_RepeatedFieldsGenerator_Group1::unsafe_arena_set_allocated_field1(
    ::protobuf_unittest::TestAllTypes* field1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete field1_;
  }
  field1_ = field1;
  if (field1) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.field1)
}
TestParsingMerge_RepeatedFieldsGenerator_Group1::TestParsingMerge_RepeatedFieldsGenerator_Group1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
}
TestParsingMerge_RepeatedFieldsGenerator_Group1::TestParsingMerge_RepeatedFieldsGenerator_Group1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
}
TestParsingMerge_RepeatedFieldsGenerator_Group1::TestParsingMerge_RepeatedFieldsGenerator_Group1(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_field1()) {
    field1_ = new ::protobuf_unittest::TestAllTypes(*from.field1_);
  } else {
    field1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group1_google_2fprotobuf_2funittest_2eproto.base);
  field1_ = nullptr;
}

TestParsingMerge_RepeatedFieldsGenerator_Group1::~TestParsingMerge_RepeatedFieldsGenerator_Group1() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  SharedDtor();
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete field1_;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::ArenaDtor(void* object) {
  TestParsingMerge_RepeatedFieldsGenerator_Group1* _this = reinterpret_cast< TestParsingMerge_RepeatedFieldsGenerator_Group1* >(object);
  (void)_this;
}
void TestParsingMerge_RepeatedFieldsGenerator_Group1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestParsingMerge_RepeatedFieldsGenerator_Group1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestParsingMerge_RepeatedFieldsGenerator_Group1& TestParsingMerge_RepeatedFieldsGenerator_Group1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group1_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestParsingMerge_RepeatedFieldsGenerator_Group1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field1_ != nullptr);
    field1_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestParsingMerge_RepeatedFieldsGenerator_Group1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes field1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_field1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestParsingMerge_RepeatedFieldsGenerator_Group1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes field1 = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::field1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  return target;
}

size_t TestParsingMerge_RepeatedFieldsGenerator_Group1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes field1 = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  GOOGLE_DCHECK_NE(&from, this);
  const TestParsingMerge_RepeatedFieldsGenerator_Group1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestParsingMerge_RepeatedFieldsGenerator_Group1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
    MergeFrom(*source);
  }
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::MergeFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_field1()) {
    _internal_mutable_field1()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_field1());
  }
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::CopyFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_RepeatedFieldsGenerator_Group1::IsInitialized() const {
  return true;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::InternalSwap(TestParsingMerge_RepeatedFieldsGenerator_Group1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field1_, other->field1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_RepeatedFieldsGenerator_Group1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestParsingMerge_RepeatedFieldsGenerator_Group2::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_Group2_default_instance_._instance.get_mutable()->field1_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
}
class TestParsingMerge_RepeatedFieldsGenerator_Group2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge_RepeatedFieldsGenerator_Group2>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& field1(const TestParsingMerge_RepeatedFieldsGenerator_Group2* msg);
  static void set_has_field1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge_RepeatedFieldsGenerator_Group2::_Internal::field1(const TestParsingMerge_RepeatedFieldsGenerator_Group2* msg) {
  return *msg->field1_;
}
void TestParsingMerge_RepeatedFieldsGenerator_Group2::unsafe_arena_set_allocated_field1(
    ::protobuf_unittest::TestAllTypes* field1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete field1_;
  }
  field1_ = field1;
  if (field1) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.field1)
}
TestParsingMerge_RepeatedFieldsGenerator_Group2::TestParsingMerge_RepeatedFieldsGenerator_Group2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
}
TestParsingMerge_RepeatedFieldsGenerator_Group2::TestParsingMerge_RepeatedFieldsGenerator_Group2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
}
TestParsingMerge_RepeatedFieldsGenerator_Group2::TestParsingMerge_RepeatedFieldsGenerator_Group2(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_field1()) {
    field1_ = new ::protobuf_unittest::TestAllTypes(*from.field1_);
  } else {
    field1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group2_google_2fprotobuf_2funittest_2eproto.base);
  field1_ = nullptr;
}

TestParsingMerge_RepeatedFieldsGenerator_Group2::~TestParsingMerge_RepeatedFieldsGenerator_Group2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  SharedDtor();
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete field1_;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::ArenaDtor(void* object) {
  TestParsingMerge_RepeatedFieldsGenerator_Group2* _this = reinterpret_cast< TestParsingMerge_RepeatedFieldsGenerator_Group2* >(object);
  (void)_this;
}
void TestParsingMerge_RepeatedFieldsGenerator_Group2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestParsingMerge_RepeatedFieldsGenerator_Group2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestParsingMerge_RepeatedFieldsGenerator_Group2& TestParsingMerge_RepeatedFieldsGenerator_Group2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestParsingMerge_RepeatedFieldsGenerator_Group2_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestParsingMerge_RepeatedFieldsGenerator_Group2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field1_ != nullptr);
    field1_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestParsingMerge_RepeatedFieldsGenerator_Group2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes field1 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_field1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestParsingMerge_RepeatedFieldsGenerator_Group2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes field1 = 21;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::field1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  return target;
}

size_t TestParsingMerge_RepeatedFieldsGenerator_Group2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes field1 = 21;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  GOOGLE_DCHECK_NE(&from, this);
  const TestParsingMerge_RepeatedFieldsGenerator_Group2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestParsingMerge_RepeatedFieldsGenerator_Group2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
    MergeFrom(*source);
  }
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::MergeFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_field1()) {
    _internal_mutable_field1()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_field1());
  }
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::CopyFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_RepeatedFieldsGenerator_Group2::IsInitialized() const {
  return true;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::InternalSwap(TestParsingMerge_RepeatedFieldsGenerator_Group2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field1_, other->field1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_RepeatedFieldsGenerator_Group2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestParsingMerge_RepeatedFieldsGenerator::InitAsDefaultInstance() {
}
class TestParsingMerge_RepeatedFieldsGenerator::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge_RepeatedFieldsGenerator>()._has_bits_);
};

TestParsingMerge_RepeatedFieldsGenerator::TestParsingMerge_RepeatedFieldsGenerator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
}
TestParsingMerge_RepeatedFieldsGenerator::TestParsingMerge_RepeatedFieldsGenerator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  field1_(arena),
  field2_(arena),
  field3_(arena),
  group1_(arena),
  group2_(arena),
  ext1_(arena),
  ext2_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
}
TestParsingMerge_RepeatedFieldsGenerator::TestParsingMerge_RepeatedFieldsGenerator(const TestParsingMerge_RepeatedFieldsGenerator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field1_(from.field1_),
      field2_(from.field2_),
      field3_(from.field3_),
      group1_(from.group1_),
      group2_(from.group2_),
      ext1_(from.ext1_),
      ext2_(from.ext2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
}

void TestParsingMerge_RepeatedFieldsGenerator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestParsingMerge_RepeatedFieldsGenerator_google_2fprotobuf_2funittest_2eproto.base);
}

TestParsingMerge_RepeatedFieldsGenerator::~TestParsingMerge_RepeatedFieldsGenerator() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  SharedDtor();
}

void TestParsingMerge_RepeatedFieldsGenerator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestParsingMerge_RepeatedFieldsGenerator::ArenaDtor(void* object) {
  TestParsingMerge_RepeatedFieldsGenerator* _this = reinterpret_cast< TestParsingMerge_RepeatedFieldsGenerator* >(object);
  (void)_this;
}
void TestParsingMerge_RepeatedFieldsGenerator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestParsingMerge_RepeatedFieldsGenerator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestParsingMerge_RepeatedFieldsGenerator& TestParsingMerge_RepeatedFieldsGenerator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestParsingMerge_RepeatedFieldsGenerator_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestParsingMerge_RepeatedFieldsGenerator::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field1_.Clear();
  field2_.Clear();
  field3_.Clear();
  group1_.Clear();
  group2_.Clear();
  ext1_.Clear();
  ext2_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestParsingMerge_RepeatedFieldsGenerator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protobuf_unittest.TestAllTypes field1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes field2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes field3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated group Group1 = 10 { ... };
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 83)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_group1(), ptr, 83);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<83>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated group Group2 = 20 { ... };
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 163)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_group2(), ptr, 163);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<163>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes ext1 = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ext1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8002>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes ext2 = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ext2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8010>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestParsingMerge_RepeatedFieldsGenerator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestAllTypes field1 = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field1(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes field2 = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_field2(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes field3 = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field3_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_field3(i), target, stream);
  }

  // repeated group Group1 = 10 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(10, this->_internal_group1(i), target, stream);
  }

  // repeated group Group2 = 20 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(20, this->_internal_group2(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes ext1 = 1000;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ext1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1000, this->_internal_ext1(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes ext2 = 1001;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ext2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1001, this->_internal_ext2(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  return target;
}

size_t TestParsingMerge_RepeatedFieldsGenerator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestAllTypes field1 = 1;
  total_size += 1UL * this->_internal_field1_size();
  for (const auto& msg : this->field1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes field2 = 2;
  total_size += 1UL * this->_internal_field2_size();
  for (const auto& msg : this->field2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes field3 = 3;
  total_size += 1UL * this->_internal_field3_size();
  for (const auto& msg : this->field3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated group Group1 = 10 { ... };
  total_size += 2UL * this->_internal_group1_size();
  for (const auto& msg : this->group1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated group Group2 = 20 { ... };
  total_size += 4UL * this->_internal_group2_size();
  for (const auto& msg : this->group2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes ext1 = 1000;
  total_size += 2UL * this->_internal_ext1_size();
  for (const auto& msg : this->ext1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes ext2 = 1001;
  total_size += 2UL * this->_internal_ext2_size();
  for (const auto& msg : this->ext2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMerge_RepeatedFieldsGenerator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  const TestParsingMerge_RepeatedFieldsGenerator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestParsingMerge_RepeatedFieldsGenerator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
    MergeFrom(*source);
  }
}

void TestParsingMerge_RepeatedFieldsGenerator::MergeFrom(const TestParsingMerge_RepeatedFieldsGenerator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field1_.MergeFrom(from.field1_);
  field2_.MergeFrom(from.field2_);
  field3_.MergeFrom(from.field3_);
  group1_.MergeFrom(from.group1_);
  group2_.MergeFrom(from.group2_);
  ext1_.MergeFrom(from.ext1_);
  ext2_.MergeFrom(from.ext2_);
}

void TestParsingMerge_RepeatedFieldsGenerator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestParsingMerge_RepeatedFieldsGenerator::CopyFrom(const TestParsingMerge_RepeatedFieldsGenerator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_RepeatedFieldsGenerator::IsInitialized() const {
  return true;
}

void TestParsingMerge_RepeatedFieldsGenerator::InternalSwap(TestParsingMerge_RepeatedFieldsGenerator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field1_.InternalSwap(&other->field1_);
  field2_.InternalSwap(&other->field2_);
  field3_.InternalSwap(&other->field3_);
  group1_.InternalSwap(&other->group1_);
  group2_.InternalSwap(&other->group2_);
  ext1_.InternalSwap(&other->ext1_);
  ext2_.InternalSwap(&other->ext2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_RepeatedFieldsGenerator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestParsingMerge_OptionalGroup::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestParsingMerge_OptionalGroup_default_instance_._instance.get_mutable()->optional_group_all_types_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
}
class TestParsingMerge_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge_OptionalGroup>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& optional_group_all_types(const TestParsingMerge_OptionalGroup* msg);
  static void set_has_optional_group_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge_OptionalGroup::_Internal::optional_group_all_types(const TestParsingMerge_OptionalGroup* msg) {
  return *msg->optional_group_all_types_;
}
void TestParsingMerge_OptionalGroup::unsafe_arena_set_allocated_optional_group_all_types(
    ::protobuf_unittest::TestAllTypes* optional_group_all_types) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_group_all_types_;
  }
  optional_group_all_types_ = optional_group_all_types;
  if (optional_group_all_types) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.OptionalGroup.optional_group_all_types)
}
TestParsingMerge_OptionalGroup::TestParsingMerge_OptionalGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestParsingMerge.OptionalGroup)
}
TestParsingMerge_OptionalGroup::TestParsingMerge_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.OptionalGroup)
}
TestParsingMerge_OptionalGroup::TestParsingMerge_OptionalGroup(const TestParsingMerge_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_optional_group_all_types()) {
    optional_group_all_types_ = new ::protobuf_unittest::TestAllTypes(*from.optional_group_all_types_);
  } else {
    optional_group_all_types_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.OptionalGroup)
}

void TestParsingMerge_OptionalGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestParsingMerge_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base);
  optional_group_all_types_ = nullptr;
}

TestParsingMerge_OptionalGroup::~TestParsingMerge_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.OptionalGroup)
  SharedDtor();
}

void TestParsingMerge_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete optional_group_all_types_;
}

void TestParsingMerge_OptionalGroup::ArenaDtor(void* object) {
  TestParsingMerge_OptionalGroup* _this = reinterpret_cast< TestParsingMerge_OptionalGroup* >(object);
  (void)_this;
}
void TestParsingMerge_OptionalGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestParsingMerge_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestParsingMerge_OptionalGroup& TestParsingMerge_OptionalGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestParsingMerge_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestParsingMerge_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(optional_group_all_types_ != nullptr);
    optional_group_all_types_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestParsingMerge_OptionalGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes optional_group_all_types = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_group_all_types(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestParsingMerge_OptionalGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes optional_group_all_types = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::optional_group_all_types(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.OptionalGroup)
  return target;
}

size_t TestParsingMerge_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes optional_group_all_types = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_group_all_types_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMerge_OptionalGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestParsingMerge_OptionalGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestParsingMerge_OptionalGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestParsingMerge.OptionalGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestParsingMerge.OptionalGroup)
    MergeFrom(*source);
  }
}

void TestParsingMerge_OptionalGroup::MergeFrom(const TestParsingMerge_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_optional_group_all_types()) {
    _internal_mutable_optional_group_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_optional_group_all_types());
  }
}

void TestParsingMerge_OptionalGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestParsingMerge_OptionalGroup::CopyFrom(const TestParsingMerge_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_OptionalGroup::IsInitialized() const {
  return true;
}

void TestParsingMerge_OptionalGroup::InternalSwap(TestParsingMerge_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(optional_group_all_types_, other->optional_group_all_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_OptionalGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestParsingMerge_RepeatedGroup::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestParsingMerge_RepeatedGroup_default_instance_._instance.get_mutable()->repeated_group_all_types_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
}
class TestParsingMerge_RepeatedGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge_RepeatedGroup>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& repeated_group_all_types(const TestParsingMerge_RepeatedGroup* msg);
  static void set_has_repeated_group_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge_RepeatedGroup::_Internal::repeated_group_all_types(const TestParsingMerge_RepeatedGroup* msg) {
  return *msg->repeated_group_all_types_;
}
void TestParsingMerge_RepeatedGroup::unsafe_arena_set_allocated_repeated_group_all_types(
    ::protobuf_unittest::TestAllTypes* repeated_group_all_types) {
  if (GetArenaNoVirtual() == nullptr) {
    delete repeated_group_all_types_;
  }
  repeated_group_all_types_ = repeated_group_all_types;
  if (repeated_group_all_types) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.RepeatedGroup.repeated_group_all_types)
}
TestParsingMerge_RepeatedGroup::TestParsingMerge_RepeatedGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestParsingMerge.RepeatedGroup)
}
TestParsingMerge_RepeatedGroup::TestParsingMerge_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.RepeatedGroup)
}
TestParsingMerge_RepeatedGroup::TestParsingMerge_RepeatedGroup(const TestParsingMerge_RepeatedGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_repeated_group_all_types()) {
    repeated_group_all_types_ = new ::protobuf_unittest::TestAllTypes(*from.repeated_group_all_types_);
  } else {
    repeated_group_all_types_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.RepeatedGroup)
}

void TestParsingMerge_RepeatedGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestParsingMerge_RepeatedGroup_google_2fprotobuf_2funittest_2eproto.base);
  repeated_group_all_types_ = nullptr;
}

TestParsingMerge_RepeatedGroup::~TestParsingMerge_RepeatedGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  SharedDtor();
}

void TestParsingMerge_RepeatedGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete repeated_group_all_types_;
}

void TestParsingMerge_RepeatedGroup::ArenaDtor(void* object) {
  TestParsingMerge_RepeatedGroup* _this = reinterpret_cast< TestParsingMerge_RepeatedGroup* >(object);
  (void)_this;
}
void TestParsingMerge_RepeatedGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestParsingMerge_RepeatedGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestParsingMerge_RepeatedGroup& TestParsingMerge_RepeatedGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestParsingMerge_RepeatedGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestParsingMerge_RepeatedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(repeated_group_all_types_ != nullptr);
    repeated_group_all_types_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestParsingMerge_RepeatedGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes repeated_group_all_types = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_group_all_types(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestParsingMerge_RepeatedGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes repeated_group_all_types = 21;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::repeated_group_all_types(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  return target;
}

size_t TestParsingMerge_RepeatedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes repeated_group_all_types = 21;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repeated_group_all_types_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMerge_RepeatedGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestParsingMerge_RepeatedGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestParsingMerge_RepeatedGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestParsingMerge.RepeatedGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestParsingMerge.RepeatedGroup)
    MergeFrom(*source);
  }
}

void TestParsingMerge_RepeatedGroup::MergeFrom(const TestParsingMerge_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_repeated_group_all_types()) {
    _internal_mutable_repeated_group_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_repeated_group_all_types());
  }
}

void TestParsingMerge_RepeatedGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestParsingMerge_RepeatedGroup::CopyFrom(const TestParsingMerge_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_RepeatedGroup::IsInitialized() const {
  return true;
}

void TestParsingMerge_RepeatedGroup::InternalSwap(TestParsingMerge_RepeatedGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(repeated_group_all_types_, other->repeated_group_all_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_RepeatedGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestParsingMerge::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestParsingMerge_default_instance_._instance.get_mutable()->required_all_types_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
  ::protobuf_unittest::_TestParsingMerge_default_instance_._instance.get_mutable()->optional_all_types_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
  ::protobuf_unittest::_TestParsingMerge_default_instance_._instance.get_mutable()->optionalgroup_ = const_cast< ::protobuf_unittest::TestParsingMerge_OptionalGroup*>(
      ::protobuf_unittest::TestParsingMerge_OptionalGroup::internal_default_instance());
}
class TestParsingMerge::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& required_all_types(const TestParsingMerge* msg);
  static void set_has_required_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypes& optional_all_types(const TestParsingMerge* msg);
  static void set_has_optional_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestParsingMerge_OptionalGroup& optionalgroup(const TestParsingMerge* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge::_Internal::required_all_types(const TestParsingMerge* msg) {
  return *msg->required_all_types_;
}
const ::protobuf_unittest::TestAllTypes&
TestParsingMerge::_Internal::optional_all_types(const TestParsingMerge* msg) {
  return *msg->optional_all_types_;
}
const ::protobuf_unittest::TestParsingMerge_OptionalGroup&
TestParsingMerge::_Internal::optionalgroup(const TestParsingMerge* msg) {
  return *msg->optionalgroup_;
}
void TestParsingMerge::unsafe_arena_set_allocated_required_all_types(
    ::protobuf_unittest::TestAllTypes* required_all_types) {
  if (GetArenaNoVirtual() == nullptr) {
    delete required_all_types_;
  }
  required_all_types_ = required_all_types;
  if (required_all_types) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.required_all_types)
}
void TestParsingMerge::unsafe_arena_set_allocated_optional_all_types(
    ::protobuf_unittest::TestAllTypes* optional_all_types) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_all_types_;
  }
  optional_all_types_ = optional_all_types;
  if (optional_all_types) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.optional_all_types)
}
void TestParsingMerge::unsafe_arena_set_allocated_optionalgroup(
    ::protobuf_unittest::TestParsingMerge_OptionalGroup* optionalgroup) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optionalgroup_;
  }
  optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.optionalgroup)
}
TestParsingMerge::TestParsingMerge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestParsingMerge)
}
TestParsingMerge::TestParsingMerge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena),
  repeated_all_types_(arena),
  repeatedgroup_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge)
}
TestParsingMerge::TestParsingMerge(const TestParsingMerge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_all_types_(from.repeated_all_types_),
      repeatedgroup_(from.repeatedgroup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_required_all_types()) {
    required_all_types_ = new ::protobuf_unittest::TestAllTypes(*from.required_all_types_);
  } else {
    required_all_types_ = nullptr;
  }
  if (from._internal_has_optional_all_types()) {
    optional_all_types_ = new ::protobuf_unittest::TestAllTypes(*from.optional_all_types_);
  } else {
    optional_all_types_ = nullptr;
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestParsingMerge_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge)
}

void TestParsingMerge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestParsingMerge_google_2fprotobuf_2funittest_2eproto.base);
  ::memset(&required_all_types_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optionalgroup_) -
      reinterpret_cast<char*>(&required_all_types_)) + sizeof(optionalgroup_));
}

TestParsingMerge::~TestParsingMerge() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge)
  SharedDtor();
}

void TestParsingMerge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete required_all_types_;
  if (this != internal_default_instance()) delete optional_all_types_;
  if (this != internal_default_instance()) delete optionalgroup_;
}

void TestParsingMerge::ArenaDtor(void* object) {
  TestParsingMerge* _this = reinterpret_cast< TestParsingMerge* >(object);
  (void)_this;
}
void TestParsingMerge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestParsingMerge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestParsingMerge& TestParsingMerge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestParsingMerge_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestParsingMerge::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  repeated_all_types_.Clear();
  repeatedgroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(required_all_types_ != nullptr);
      required_all_types_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(optional_all_types_ != nullptr);
      optional_all_types_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestParsingMerge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .protobuf_unittest.TestAllTypes required_all_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_required_all_types(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes optional_all_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_all_types(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes repeated_all_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_all_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional group OptionalGroup = 10 { ... };
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 83)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 83);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated group RepeatedGroup = 20 { ... };
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 163)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_repeatedgroup(), ptr, 163);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<163>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestParsingMerge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protobuf_unittest.TestAllTypes required_all_types = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::required_all_types(this), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes optional_all_types = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::optional_all_types(this), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes repeated_all_types = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_all_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_repeated_all_types(i), target, stream);
  }

  // optional group OptionalGroup = 10 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        10, _Internal::optionalgroup(this), target, stream);
  }

  // repeated group RepeatedGroup = 20 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeatedgroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(20, this->_internal_repeatedgroup(i), target, stream);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
      1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge)
  return target;
}

size_t TestParsingMerge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .protobuf_unittest.TestAllTypes required_all_types = 1;
  if (_internal_has_required_all_types()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_all_types_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestAllTypes repeated_all_types = 3;
  total_size += 1UL * this->_internal_repeated_all_types_size();
  for (const auto& msg : this->repeated_all_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated group RepeatedGroup = 20 { ... };
  total_size += 4UL * this->_internal_repeatedgroup_size();
  for (const auto& msg : this->repeatedgroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .protobuf_unittest.TestAllTypes optional_all_types = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_all_types_);
    }

    // optional group OptionalGroup = 10 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMerge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestParsingMerge)
  GOOGLE_DCHECK_NE(&from, this);
  const TestParsingMerge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestParsingMerge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestParsingMerge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestParsingMerge)
    MergeFrom(*source);
  }
}

void TestParsingMerge::MergeFrom(const TestParsingMerge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_all_types_.MergeFrom(from.repeated_all_types_);
  repeatedgroup_.MergeFrom(from.repeatedgroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_required_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_required_all_types());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_optional_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_optional_all_types());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestParsingMerge_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
  }
}

void TestParsingMerge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestParsingMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestParsingMerge::CopyFrom(const TestParsingMerge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TestParsingMerge::InternalSwap(TestParsingMerge* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_all_types_.InternalSwap(&other->repeated_all_types_);
  repeatedgroup_.InternalSwap(&other->repeatedgroup_);
  swap(required_all_types_, other->required_all_types_);
  swap(optional_all_types_, other->optional_all_types_);
  swap(optionalgroup_, other->optionalgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestCommentInjectionMessage::InitAsDefaultInstance() {
}
class TestCommentInjectionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestCommentInjectionMessage>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_;
TestCommentInjectionMessage::TestCommentInjectionMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestCommentInjectionMessage)
}
TestCommentInjectionMessage::TestCommentInjectionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestCommentInjectionMessage)
}
TestCommentInjectionMessage::TestCommentInjectionMessage(const TestCommentInjectionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_.UnsafeSetDefault(&::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_.get());
  if (from._internal_has_a()) {
    a_.Set(&::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_.get(), from._internal_a(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestCommentInjectionMessage)
}

void TestCommentInjectionMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestCommentInjectionMessage_google_2fprotobuf_2funittest_2eproto.base);
  a_.UnsafeSetDefault(&::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_.get());
}

TestCommentInjectionMessage::~TestCommentInjectionMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestCommentInjectionMessage)
  SharedDtor();
}

void TestCommentInjectionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  a_.DestroyNoArena(&::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_.get());
}

void TestCommentInjectionMessage::ArenaDtor(void* object) {
  TestCommentInjectionMessage* _this = reinterpret_cast< TestCommentInjectionMessage* >(object);
  (void)_this;
}
void TestCommentInjectionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestCommentInjectionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestCommentInjectionMessage& TestCommentInjectionMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestCommentInjectionMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestCommentInjectionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestCommentInjectionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    a_.ClearToDefault(&::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_.get(), GetArenaNoVirtual());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestCommentInjectionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string a = 1 [default = "*/ <- Neither should this."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestCommentInjectionMessage.a");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestCommentInjectionMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestCommentInjectionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string a = 1 [default = "*/ <- Neither should this."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_a().data(), static_cast<int>(this->_internal_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCommentInjectionMessage.a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestCommentInjectionMessage)
  return target;
}

size_t TestCommentInjectionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestCommentInjectionMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string a = 1 [default = "*/ <- Neither should this."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestCommentInjectionMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestCommentInjectionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCommentInjectionMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestCommentInjectionMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestCommentInjectionMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestCommentInjectionMessage)
    MergeFrom(*source);
  }
}

void TestCommentInjectionMessage::MergeFrom(const TestCommentInjectionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestCommentInjectionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void TestCommentInjectionMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestCommentInjectionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCommentInjectionMessage::CopyFrom(const TestCommentInjectionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestCommentInjectionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCommentInjectionMessage::IsInitialized() const {
  return true;
}

void TestCommentInjectionMessage::InternalSwap(TestCommentInjectionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  a_.Swap(&other->a_, &::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_.get(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCommentInjectionMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FooRequest::InitAsDefaultInstance() {
}
class FooRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FooRequest>()._has_bits_);
};

FooRequest::FooRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.FooRequest)
}
FooRequest::FooRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FooRequest)
}
FooRequest::FooRequest(const FooRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FooRequest)
}

void FooRequest::SharedCtor() {
}

FooRequest::~FooRequest() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.FooRequest)
  SharedDtor();
}

void FooRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void FooRequest::ArenaDtor(void* object) {
  FooRequest* _this = reinterpret_cast< FooRequest* >(object);
  (void)_this;
}
void FooRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FooRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FooRequest& FooRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FooRequest_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void FooRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.FooRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FooRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FooRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.FooRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.FooRequest)
  return target;
}

size_t FooRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.FooRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FooRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.FooRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FooRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FooRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.FooRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.FooRequest)
    MergeFrom(*source);
  }
}

void FooRequest::MergeFrom(const FooRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.FooRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FooRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.FooRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FooRequest::CopyFrom(const FooRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.FooRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooRequest::IsInitialized() const {
  return true;
}

void FooRequest::InternalSwap(FooRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FooRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FooResponse::InitAsDefaultInstance() {
}
class FooResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FooResponse>()._has_bits_);
};

FooResponse::FooResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.FooResponse)
}
FooResponse::FooResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FooResponse)
}
FooResponse::FooResponse(const FooResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FooResponse)
}

void FooResponse::SharedCtor() {
}

FooResponse::~FooResponse() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.FooResponse)
  SharedDtor();
}

void FooResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void FooResponse::ArenaDtor(void* object) {
  FooResponse* _this = reinterpret_cast< FooResponse* >(object);
  (void)_this;
}
void FooResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FooResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FooResponse& FooResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FooResponse_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void FooResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.FooResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FooResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FooResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.FooResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.FooResponse)
  return target;
}

size_t FooResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.FooResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FooResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.FooResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FooResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FooResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.FooResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.FooResponse)
    MergeFrom(*source);
  }
}

void FooResponse::MergeFrom(const FooResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.FooResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FooResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.FooResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FooResponse::CopyFrom(const FooResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.FooResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooResponse::IsInitialized() const {
  return true;
}

void FooResponse::InternalSwap(FooResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FooResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FooClientMessage::InitAsDefaultInstance() {
}
class FooClientMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FooClientMessage>()._has_bits_);
};

FooClientMessage::FooClientMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.FooClientMessage)
}
FooClientMessage::FooClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FooClientMessage)
}
FooClientMessage::FooClientMessage(const FooClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FooClientMessage)
}

void FooClientMessage::SharedCtor() {
}

FooClientMessage::~FooClientMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.FooClientMessage)
  SharedDtor();
}

void FooClientMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void FooClientMessage::ArenaDtor(void* object) {
  FooClientMessage* _this = reinterpret_cast< FooClientMessage* >(object);
  (void)_this;
}
void FooClientMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FooClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FooClientMessage& FooClientMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FooClientMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void FooClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.FooClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FooClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FooClientMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.FooClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.FooClientMessage)
  return target;
}

size_t FooClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.FooClientMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FooClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.FooClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FooClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FooClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.FooClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.FooClientMessage)
    MergeFrom(*source);
  }
}

void FooClientMessage::MergeFrom(const FooClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.FooClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FooClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.FooClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FooClientMessage::CopyFrom(const FooClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.FooClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooClientMessage::IsInitialized() const {
  return true;
}

void FooClientMessage::InternalSwap(FooClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FooClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FooServerMessage::InitAsDefaultInstance() {
}
class FooServerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FooServerMessage>()._has_bits_);
};

FooServerMessage::FooServerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.FooServerMessage)
}
FooServerMessage::FooServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FooServerMessage)
}
FooServerMessage::FooServerMessage(const FooServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FooServerMessage)
}

void FooServerMessage::SharedCtor() {
}

FooServerMessage::~FooServerMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.FooServerMessage)
  SharedDtor();
}

void FooServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void FooServerMessage::ArenaDtor(void* object) {
  FooServerMessage* _this = reinterpret_cast< FooServerMessage* >(object);
  (void)_this;
}
void FooServerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FooServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FooServerMessage& FooServerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FooServerMessage_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void FooServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.FooServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FooServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FooServerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.FooServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.FooServerMessage)
  return target;
}

size_t FooServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.FooServerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FooServerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.FooServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FooServerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FooServerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.FooServerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.FooServerMessage)
    MergeFrom(*source);
  }
}

void FooServerMessage::MergeFrom(const FooServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.FooServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FooServerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.FooServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FooServerMessage::CopyFrom(const FooServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.FooServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooServerMessage::IsInitialized() const {
  return true;
}

void FooServerMessage::InternalSwap(FooServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FooServerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BarRequest::InitAsDefaultInstance() {
}
class BarRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BarRequest>()._has_bits_);
};

BarRequest::BarRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.BarRequest)
}
BarRequest::BarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.BarRequest)
}
BarRequest::BarRequest(const BarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.BarRequest)
}

void BarRequest::SharedCtor() {
}

BarRequest::~BarRequest() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.BarRequest)
  SharedDtor();
}

void BarRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void BarRequest::ArenaDtor(void* object) {
  BarRequest* _this = reinterpret_cast< BarRequest* >(object);
  (void)_this;
}
void BarRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BarRequest& BarRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BarRequest_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void BarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.BarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.BarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.BarRequest)
  return target;
}

size_t BarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.BarRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.BarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BarRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BarRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.BarRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.BarRequest)
    MergeFrom(*source);
  }
}

void BarRequest::MergeFrom(const BarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.BarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BarRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.BarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarRequest::CopyFrom(const BarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.BarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarRequest::IsInitialized() const {
  return true;
}

void BarRequest::InternalSwap(BarRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BarRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BarResponse::InitAsDefaultInstance() {
}
class BarResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BarResponse>()._has_bits_);
};

BarResponse::BarResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.BarResponse)
}
BarResponse::BarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.BarResponse)
}
BarResponse::BarResponse(const BarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.BarResponse)
}

void BarResponse::SharedCtor() {
}

BarResponse::~BarResponse() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.BarResponse)
  SharedDtor();
}

void BarResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void BarResponse::ArenaDtor(void* object) {
  BarResponse* _this = reinterpret_cast< BarResponse* >(object);
  (void)_this;
}
void BarResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BarResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BarResponse& BarResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BarResponse_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void BarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.BarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BarResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.BarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.BarResponse)
  return target;
}

size_t BarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.BarResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.BarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BarResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BarResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.BarResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.BarResponse)
    MergeFrom(*source);
  }
}

void BarResponse::MergeFrom(const BarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.BarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BarResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.BarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarResponse::CopyFrom(const BarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.BarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarResponse::IsInitialized() const {
  return true;
}

void BarResponse::InternalSwap(BarResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BarResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestJsonName::InitAsDefaultInstance() {
}
class TestJsonName::_Internal {
 public:
  using HasBits = decltype(std::declval<TestJsonName>()._has_bits_);
  static void set_has_field_name1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fieldname2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fieldname3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has__field_name4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_name5(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_field_name6(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

TestJsonName::TestJsonName()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestJsonName)
}
TestJsonName::TestJsonName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestJsonName)
}
TestJsonName::TestJsonName(const TestJsonName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&field_name1_, &from.field_name1_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_name6_) -
    reinterpret_cast<char*>(&field_name1_)) + sizeof(field_name6_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestJsonName)
}

void TestJsonName::SharedCtor() {
  ::memset(&field_name1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_name6_) -
      reinterpret_cast<char*>(&field_name1_)) + sizeof(field_name6_));
}

TestJsonName::~TestJsonName() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestJsonName)
  SharedDtor();
}

void TestJsonName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestJsonName::ArenaDtor(void* object) {
  TestJsonName* _this = reinterpret_cast< TestJsonName* >(object);
  (void)_this;
}
void TestJsonName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestJsonName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestJsonName& TestJsonName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestJsonName_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestJsonName::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestJsonName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&field_name1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_name6_) -
        reinterpret_cast<char*>(&field_name1_)) + sizeof(field_name6_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestJsonName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 field_name1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_field_name1(&has_bits);
          field_name1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fieldName2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fieldname2(&has_bits);
          fieldname2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 FieldName3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fieldname3(&has_bits);
          fieldname3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 _field_name4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has__field_name4(&has_bits);
          _field_name4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 FIELD_NAME5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_field_name5(&has_bits);
          field_name5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field_name6 = 6[json_name = "@type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_field_name6(&has_bits);
          field_name6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestJsonName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestJsonName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 field_name1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field_name1(), target);
  }

  // optional int32 fieldName2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fieldname2(), target);
  }

  // optional int32 FieldName3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fieldname3(), target);
  }

  // optional int32 _field_name4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal__field_name4(), target);
  }

  // optional int32 FIELD_NAME5 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_field_name5(), target);
  }

  // optional int32 field_name6 = 6[json_name = "@type"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_field_name6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestJsonName)
  return target;
}

size_t TestJsonName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestJsonName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 field_name1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_name1());
    }

    // optional int32 fieldName2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fieldname2());
    }

    // optional int32 FieldName3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fieldname3());
    }

    // optional int32 _field_name4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal__field_name4());
    }

    // optional int32 FIELD_NAME5 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_name5());
    }

    // optional int32 field_name6 = 6[json_name = "@type"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_name6());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestJsonName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestJsonName)
  GOOGLE_DCHECK_NE(&from, this);
  const TestJsonName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestJsonName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestJsonName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestJsonName)
    MergeFrom(*source);
  }
}

void TestJsonName::MergeFrom(const TestJsonName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestJsonName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      field_name1_ = from.field_name1_;
    }
    if (cached_has_bits & 0x00000002u) {
      fieldname2_ = from.fieldname2_;
    }
    if (cached_has_bits & 0x00000004u) {
      fieldname3_ = from.fieldname3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _field_name4_ = from._field_name4_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_name5_ = from.field_name5_;
    }
    if (cached_has_bits & 0x00000020u) {
      field_name6_ = from.field_name6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestJsonName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestJsonName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestJsonName::CopyFrom(const TestJsonName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestJsonName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestJsonName::IsInitialized() const {
  return true;
}

void TestJsonName::InternalSwap(TestJsonName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field_name1_, other->field_name1_);
  swap(fieldname2_, other->fieldname2_);
  swap(fieldname3_, other->fieldname3_);
  swap(_field_name4_, other->_field_name4_);
  swap(field_name5_, other->field_name5_);
  swap(field_name6_, other->field_name6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestJsonName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestHugeFieldNumbers_OptionalGroup::InitAsDefaultInstance() {
}
class TestHugeFieldNumbers_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestHugeFieldNumbers_OptionalGroup>()._has_bits_);
  static void set_has_group_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestHugeFieldNumbers_OptionalGroup::TestHugeFieldNumbers_OptionalGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
}
TestHugeFieldNumbers_OptionalGroup::TestHugeFieldNumbers_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
}
TestHugeFieldNumbers_OptionalGroup::TestHugeFieldNumbers_OptionalGroup(const TestHugeFieldNumbers_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_a_ = from.group_a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
}

void TestHugeFieldNumbers_OptionalGroup::SharedCtor() {
  group_a_ = 0;
}

TestHugeFieldNumbers_OptionalGroup::~TestHugeFieldNumbers_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  SharedDtor();
}

void TestHugeFieldNumbers_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestHugeFieldNumbers_OptionalGroup::ArenaDtor(void* object) {
  TestHugeFieldNumbers_OptionalGroup* _this = reinterpret_cast< TestHugeFieldNumbers_OptionalGroup* >(object);
  (void)_this;
}
void TestHugeFieldNumbers_OptionalGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestHugeFieldNumbers_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestHugeFieldNumbers_OptionalGroup& TestHugeFieldNumbers_OptionalGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestHugeFieldNumbers_OptionalGroup_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestHugeFieldNumbers_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestHugeFieldNumbers_OptionalGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 group_a = 536870009;
      case 536870009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_group_a(&has_bits);
          group_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestHugeFieldNumbers_OptionalGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 group_a = 536870009;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(536870009, this->_internal_group_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  return target;
}

size_t TestHugeFieldNumbers_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 group_a = 536870009;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestHugeFieldNumbers_OptionalGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TestHugeFieldNumbers_OptionalGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestHugeFieldNumbers_OptionalGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
    MergeFrom(*source);
  }
}

void TestHugeFieldNumbers_OptionalGroup::MergeFrom(const TestHugeFieldNumbers_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group_a()) {
    _internal_set_group_a(from._internal_group_a());
  }
}

void TestHugeFieldNumbers_OptionalGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestHugeFieldNumbers_OptionalGroup::CopyFrom(const TestHugeFieldNumbers_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestHugeFieldNumbers_OptionalGroup::IsInitialized() const {
  return true;
}

void TestHugeFieldNumbers_OptionalGroup::InternalSwap(TestHugeFieldNumbers_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(group_a_, other->group_a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestHugeFieldNumbers_OptionalGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse() {}
TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::MergeFrom(const TestHugeFieldNumbers_StringStringMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TestHugeFieldNumbers::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestHugeFieldNumbers_default_instance_._instance.get_mutable()->optional_message_ = const_cast< ::protobuf_unittest::ForeignMessage*>(
      ::protobuf_unittest::ForeignMessage::internal_default_instance());
  ::protobuf_unittest::_TestHugeFieldNumbers_default_instance_._instance.get_mutable()->optionalgroup_ = const_cast< ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup*>(
      ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup::internal_default_instance());
  ::protobuf_unittest::_TestHugeFieldNumbers_default_instance_.oneof_uint32_ = 0u;
  ::protobuf_unittest::_TestHugeFieldNumbers_default_instance_.oneof_test_all_types_ = const_cast< ::protobuf_unittest::TestAllTypes*>(
      ::protobuf_unittest::TestAllTypes::internal_default_instance());
  ::protobuf_unittest::_TestHugeFieldNumbers_default_instance_.oneof_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_unittest::_TestHugeFieldNumbers_default_instance_.oneof_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class TestHugeFieldNumbers::_Internal {
 public:
  using HasBits = decltype(std::declval<TestHugeFieldNumbers>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fixed_32(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_optional_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::ForeignMessage& optional_message(const TestHugeFieldNumbers* msg);
  static void set_has_optional_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup& optionalgroup(const TestHugeFieldNumbers* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_unittest::TestAllTypes& oneof_test_all_types(const TestHugeFieldNumbers* msg);
};

const ::protobuf_unittest::ForeignMessage&
TestHugeFieldNumbers::_Internal::optional_message(const TestHugeFieldNumbers* msg) {
  return *msg->optional_message_;
}
const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup&
TestHugeFieldNumbers::_Internal::optionalgroup(const TestHugeFieldNumbers* msg) {
  return *msg->optionalgroup_;
}
const ::protobuf_unittest::TestAllTypes&
TestHugeFieldNumbers::_Internal::oneof_test_all_types(const TestHugeFieldNumbers* msg) {
  return *msg->oneof_field_.oneof_test_all_types_;
}
void TestHugeFieldNumbers::unsafe_arena_set_allocated_optional_message(
    ::protobuf_unittest::ForeignMessage* optional_message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optional_message_;
  }
  optional_message_ = optional_message;
  if (optional_message) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestHugeFieldNumbers.optional_message)
}
void TestHugeFieldNumbers::unsafe_arena_set_allocated_optionalgroup(
    ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* optionalgroup) {
  if (GetArenaNoVirtual() == nullptr) {
    delete optionalgroup_;
  }
  optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestHugeFieldNumbers.optionalgroup)
}
void TestHugeFieldNumbers::set_allocated_oneof_test_all_types(::protobuf_unittest::TestAllTypes* oneof_test_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_field();
  if (oneof_test_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oneof_test_all_types);
    if (message_arena != submessage_arena) {
      oneof_test_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_test_all_types, submessage_arena);
    }
    set_has_oneof_test_all_types();
    oneof_field_.oneof_test_all_types_ = oneof_test_all_types;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbers.oneof_test_all_types)
}
TestHugeFieldNumbers::TestHugeFieldNumbers()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestHugeFieldNumbers)
}
TestHugeFieldNumbers::TestHugeFieldNumbers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena),
  repeated_int32_(arena),
  packed_int32_(arena),
  string_string_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestHugeFieldNumbers)
}
TestHugeFieldNumbers::TestHugeFieldNumbers(const TestHugeFieldNumbers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_int32_(from.repeated_int32_),
      packed_int32_(from.packed_int32_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  string_string_map_.MergeFrom(from.string_string_map_);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string()) {
    optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string(),
      GetArenaNoVirtual());
  }
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_bytes(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_optional_message()) {
    optional_message_ = new ::protobuf_unittest::ForeignMessage(*from.optional_message_);
  } else {
    optional_message_ = nullptr;
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  ::memcpy(&optional_int32_, &from.optional_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_enum_) -
    reinterpret_cast<char*>(&optional_int32_)) + sizeof(optional_enum_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofTestAllTypes: {
      _internal_mutable_oneof_test_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_oneof_test_all_types());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestHugeFieldNumbers)
}

void TestHugeFieldNumbers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestHugeFieldNumbers_google_2fprotobuf_2funittest_2eproto.base);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed_32_) -
      reinterpret_cast<char*>(&optional_message_)) + sizeof(fixed_32_));
  optional_enum_ = 4;
  clear_has_oneof_field();
}

TestHugeFieldNumbers::~TestHugeFieldNumbers() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestHugeFieldNumbers)
  SharedDtor();
}

void TestHugeFieldNumbers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optional_message_;
  if (this != internal_default_instance()) delete optionalgroup_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestHugeFieldNumbers::ArenaDtor(void* object) {
  TestHugeFieldNumbers* _this = reinterpret_cast< TestHugeFieldNumbers* >(object);
  (void)_this;
}
void TestHugeFieldNumbers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestHugeFieldNumbers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestHugeFieldNumbers& TestHugeFieldNumbers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestHugeFieldNumbers_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestHugeFieldNumbers::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestHugeFieldNumbers)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofTestAllTypes: {
      if (GetArenaNoVirtual() == nullptr) {
        delete oneof_field_.oneof_test_all_types_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestHugeFieldNumbers::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestHugeFieldNumbers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  repeated_int32_.Clear();
  packed_int32_.Clear();
  string_string_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optional_message_ != nullptr);
      optional_message_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&optional_int32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed_32_) -
        reinterpret_cast<char*>(&optional_int32_)) + sizeof(fixed_32_));
    optional_enum_ = 4;
  }
  clear_oneof_field();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestHugeFieldNumbers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 536870000;
      case 536870000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_optional_int32(&has_bits);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fixed_32 = 536870001;
      case 536870001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_fixed_32(&has_bits);
          fixed_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 536870002 [packed = false];
      case 536870002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 packed_int32 = 536870003 [packed = true];
      case 536870003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum optional_enum = 536870004;
      case 536870004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_optional_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(536870004, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string optional_string = 536870005;
      case 536870005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestHugeFieldNumbers.optional_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 536870006;
      case 536870006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessage optional_message = 536870007;
      case 536870007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group OptionalGroup = 536870008 { ... };
      case 536870008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 195)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 4294960067);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> string_string_map = 536870010;
      case 536870010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(&string_string_map_, ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 oneof_uint32 = 536870011;
      case 536870011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes oneof_test_all_types = 536870012;
      case 536870012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_test_all_types(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string oneof_string = 536870013;
      case 536870013:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestHugeFieldNumbers.oneof_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes oneof_bytes = 536870014;
      case 536870014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((4294880000u <= tag && tag < 4294960000u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestHugeFieldNumbers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestHugeFieldNumbers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [536860000, 536870000)
  target = _extensions_._InternalSerialize(
      536860000, 536870000, target, stream);

  cached_has_bits = _has_bits_[0];
  // optional int32 optional_int32 = 536870000;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(536870000, this->_internal_optional_int32(), target);
  }

  // optional int32 fixed_32 = 536870001;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(536870001, this->_internal_fixed_32(), target);
  }

  // repeated int32 repeated_int32 = 536870002 [packed = false];
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(536870002, this->_internal_repeated_int32(i), target);
  }

  // repeated int32 packed_int32 = 536870003 [packed = true];
  {
    int byte_size = _packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          536870003, _internal_packed_int32(), byte_size, target);
    }
  }

  // optional .protobuf_unittest.ForeignEnum optional_enum = 536870004;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      536870004, this->_internal_optional_enum(), target);
  }

  // optional string optional_string = 536870005;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestHugeFieldNumbers.optional_string");
    target = stream->WriteStringMaybeAliased(
        536870005, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 536870006;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        536870006, this->_internal_optional_bytes(), target);
  }

  // optional .protobuf_unittest.ForeignMessage optional_message = 536870007;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        536870007, _Internal::optional_message(this), target, stream);
  }

  // optional group OptionalGroup = 536870008 { ... };
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        536870008, _Internal::optionalgroup(this), target, stream);
  }

  // map<string, string> string_string_map = 536870010;
  if (!this->_internal_string_string_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_unittest.TestHugeFieldNumbers.StringStringMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_unittest.TestHugeFieldNumbers.StringStringMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_string_string_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_string_string_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_string_string_map().begin();
          it != this->_internal_string_string_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::Funcs::InternalSerialize(536870010, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_string_string_map().begin();
          it != this->_internal_string_string_map().end(); ++it) {
        target = TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::Funcs::InternalSerialize(536870010, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  switch (oneof_field_case()) {
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(536870011, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofTestAllTypes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          536870012, _Internal::oneof_test_all_types(this), target, stream);
      break;
    }
    case kOneofString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestHugeFieldNumbers.oneof_string");
      target = stream->WriteStringMaybeAliased(
          536870013, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          536870014, this->_internal_oneof_bytes(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestHugeFieldNumbers)
  return target;
}

size_t TestHugeFieldNumbers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestHugeFieldNumbers)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 536870002 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 5 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int32 packed_int32 = 536870003 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->packed_int32_);
    if (data_size > 0) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, string> string_string_map = 536870010;
  total_size += 5 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_string_string_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_string_string_map().begin();
      it != this->_internal_string_string_map().end(); ++it) {
    total_size += TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string optional_string = 536870005;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 536870006;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

    // optional .protobuf_unittest.ForeignMessage optional_message = 536870007;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_message_);
    }

    // optional group OptionalGroup = 536870008 { ... };
    if (cached_has_bits & 0x00000008u) {
      total_size += 10 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

    // optional int32 optional_int32 = 536870000;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

    // optional int32 fixed_32 = 536870001;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fixed_32());
    }

    // optional .protobuf_unittest.ForeignEnum optional_enum = 536870004;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_enum());
    }

  }
  switch (oneof_field_case()) {
    // optional uint32 oneof_uint32 = 536870011;
    case kOneofUint32: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // optional .protobuf_unittest.TestAllTypes oneof_test_all_types = 536870012;
    case kOneofTestAllTypes: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_test_all_types_);
      break;
    }
    // optional string oneof_string = 536870013;
    case kOneofString: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // optional bytes oneof_bytes = 536870014;
    case kOneofBytes: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestHugeFieldNumbers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestHugeFieldNumbers)
  GOOGLE_DCHECK_NE(&from, this);
  const TestHugeFieldNumbers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestHugeFieldNumbers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestHugeFieldNumbers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestHugeFieldNumbers)
    MergeFrom(*source);
  }
}

void TestHugeFieldNumbers::MergeFrom(const TestHugeFieldNumbers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestHugeFieldNumbers)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  packed_int32_.MergeFrom(from.packed_int32_);
  string_string_map_.MergeFrom(from.string_string_map_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optional_message()->::protobuf_unittest::ForeignMessage::MergeFrom(from._internal_optional_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000010u) {
      optional_int32_ = from.optional_int32_;
    }
    if (cached_has_bits & 0x00000020u) {
      fixed_32_ = from.fixed_32_;
    }
    if (cached_has_bits & 0x00000040u) {
      optional_enum_ = from.optional_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofTestAllTypes: {
      _internal_mutable_oneof_test_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_oneof_test_all_types());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
}

void TestHugeFieldNumbers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestHugeFieldNumbers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestHugeFieldNumbers::CopyFrom(const TestHugeFieldNumbers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestHugeFieldNumbers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestHugeFieldNumbers::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestHugeFieldNumbers::InternalSwap(TestHugeFieldNumbers* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  packed_int32_.InternalSwap(&other->packed_int32_);
  string_string_map_.Swap(&other->string_string_map_);
  optional_string_.Swap(&other->optional_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_bytes_.Swap(&other->optional_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(optional_message_, other->optional_message_);
  swap(optionalgroup_, other->optionalgroup_);
  swap(optional_int32_, other->optional_int32_);
  swap(fixed_32_, other->fixed_32_);
  swap(optional_enum_, other->optional_enum_);
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestHugeFieldNumbers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestExtensionInsideTable::InitAsDefaultInstance() {
}
class TestExtensionInsideTable::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionInsideTable>()._has_bits_);
  static void set_has_field1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field6(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_field7(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_field8(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_field9(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_field10(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TestExtensionInsideTable::TestExtensionInsideTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestExtensionInsideTable)
}
TestExtensionInsideTable::TestExtensionInsideTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _extensions_(arena),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtensionInsideTable)
}
TestExtensionInsideTable::TestExtensionInsideTable(const TestExtensionInsideTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&field1_, &from.field1_,
    static_cast<size_t>(reinterpret_cast<char*>(&field10_) -
    reinterpret_cast<char*>(&field1_)) + sizeof(field10_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtensionInsideTable)
}

void TestExtensionInsideTable::SharedCtor() {
  ::memset(&field1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field10_) -
      reinterpret_cast<char*>(&field1_)) + sizeof(field10_));
}

TestExtensionInsideTable::~TestExtensionInsideTable() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtensionInsideTable)
  SharedDtor();
}

void TestExtensionInsideTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestExtensionInsideTable::ArenaDtor(void* object) {
  TestExtensionInsideTable* _this = reinterpret_cast< TestExtensionInsideTable* >(object);
  (void)_this;
}
void TestExtensionInsideTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestExtensionInsideTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestExtensionInsideTable& TestExtensionInsideTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestExtensionInsideTable_google_2fprotobuf_2funittest_2eproto.base);
  return *internal_default_instance();
}


void TestExtensionInsideTable::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtensionInsideTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&field1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field9_) -
        reinterpret_cast<char*>(&field1_)) + sizeof(field9_));
  }
  field10_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TestExtensionInsideTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 field1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_field1(&has_bits);
          field1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_field2(&has_bits);
          field2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_field3(&has_bits);
          field3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_field4(&has_bits);
          field4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_field6(&has_bits);
          field6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_field7(&has_bits);
          field7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_field8(&has_bits);
          field8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field9 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_field9(&has_bits);
          field9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_field10(&has_bits);
          field10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((40u <= tag && tag < 48u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestExtensionInsideTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtensionInsideTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 field1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field1(), target);
  }

  // optional int32 field2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_field2(), target);
  }

  // optional int32 field3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_field3(), target);
  }

  // optional int32 field4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_field4(), target);
  }

  // Extension range [5, 6)
  target = _extensions_._InternalSerialize(
      5, 6, target, stream);

  // optional int32 field6 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_field6(), target);
  }

  // optional int32 field7 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_field7(), target);
  }

  // optional int32 field8 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_field8(), target);
  }

  // optional int32 field9 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_field9(), target);
  }

  // optional int32 field10 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_field10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtensionInsideTable)
  return target;
}

size_t TestExtensionInsideTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtensionInsideTable)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 field1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field1());
    }

    // optional int32 field2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field2());
    }

    // optional int32 field3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field3());
    }

    // optional int32 field4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field4());
    }

    // optional int32 field6 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field6());
    }

    // optional int32 field7 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field7());
    }

    // optional int32 field8 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field8());
    }

    // optional int32 field9 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field9());
    }

  }
  // optional int32 field10 = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field10());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestExtensionInsideTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestExtensionInsideTable)
  GOOGLE_DCHECK_NE(&from, this);
  const TestExtensionInsideTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestExtensionInsideTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestExtensionInsideTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestExtensionInsideTable)
    MergeFrom(*source);
  }
}

void TestExtensionInsideTable::MergeFrom(const TestExtensionInsideTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtensionInsideTable)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      field1_ = from.field1_;
    }
    if (cached_has_bits & 0x00000002u) {
      field2_ = from.field2_;
    }
    if (cached_has_bits & 0x00000004u) {
      field3_ = from.field3_;
    }
    if (cached_has_bits & 0x00000008u) {
      field4_ = from.field4_;
    }
    if (cached_has_bits & 0x00000010u) {
      field6_ = from.field6_;
    }
    if (cached_has_bits & 0x00000020u) {
      field7_ = from.field7_;
    }
    if (cached_has_bits & 0x00000040u) {
      field8_ = from.field8_;
    }
    if (cached_has_bits & 0x00000080u) {
      field9_ = from.field9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_field10(from._internal_field10());
  }
}

void TestExtensionInsideTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestExtensionInsideTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestExtensionInsideTable::CopyFrom(const TestExtensionInsideTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtensionInsideTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionInsideTable::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestExtensionInsideTable::InternalSwap(TestExtensionInsideTable* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field1_, other->field1_);
  swap(field2_, other->field2_);
  swap(field3_, other->field3_);
  swap(field4_, other->field4_);
  swap(field6_, other->field6_);
  swap(field7_, other->field7_);
  swap(field8_, other->field8_);
  swap(field9_, other->field9_);
  swap(field10_, other->field10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtensionInsideTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestService::~TestService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_service_descriptors_google_2fprotobuf_2funittest_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestService::GetDescriptor() {
  return descriptor();
}

void TestService::Foo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::protobuf_unittest::FooRequest*,
                         ::protobuf_unittest::FooResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Foo() not implemented.");
  done->Run();
}

void TestService::Bar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::protobuf_unittest::BarRequest*,
                         ::protobuf_unittest::BarResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Bar() not implemented.");
  done->Run();
}

void TestService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_google_2fprotobuf_2funittest_2eproto[0]);
  switch(method->index()) {
    case 0:
      Foo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::protobuf_unittest::FooRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::protobuf_unittest::FooResponse*>(
                 response),
             done);
      break;
    case 1:
      Bar(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::protobuf_unittest::BarRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::protobuf_unittest::BarResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::FooRequest::default_instance();
    case 1:
      return ::protobuf_unittest::BarRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::FooResponse::default_instance();
    case 1:
      return ::protobuf_unittest::BarResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TestService_Stub::TestService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestService_Stub::TestService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TestService_Stub::~TestService_Stub() {
  if (owns_channel_) delete channel_;
}

void TestService_Stub::Foo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::protobuf_unittest::FooRequest* request,
                              ::protobuf_unittest::FooResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TestService_Stub::Bar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::protobuf_unittest::BarRequest* request,
                              ::protobuf_unittest::BarResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
const std::string TestNestedExtension_test_default("test");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestNestedExtension::kTestFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  TestNestedExtension::test(kTestFieldNumber, TestNestedExtension_test_default);
const std::string TestNestedExtension_nested_string_extension_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestNestedExtension::kNestedStringExtensionFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  TestNestedExtension::nested_string_extension(kNestedStringExtensionFieldNumber, TestNestedExtension_nested_string_extension_default);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestNestedExtension::kOptionalgroupExtensionFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestGroupExtension,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension >, 10, false >
  TestNestedExtension::optionalgroup_extension(kOptionalgroupExtensionFieldNumber, *::protobuf_unittest::TestNestedExtension_OptionalGroup_extension::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestNestedExtension::kOptionalForeignEnumExtensionFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestGroupExtension,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
  TestNestedExtension::optional_foreign_enum_extension(kOptionalForeignEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4));
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestRequired::kSingleFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestRequired >, 11, false >
  TestRequired::single(kSingleFieldNumber, *::protobuf_unittest::TestRequired::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestRequired::kMultiFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestRequired >, 11, false >
  TestRequired::multi(kMultiFieldNumber, *::protobuf_unittest::TestRequired::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestExtensionOrderings1::kTestExtOrderings1FieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestExtensionOrderings1 >, 11, false >
  TestExtensionOrderings1::test_ext_orderings1(kTestExtOrderings1FieldNumber, *::protobuf_unittest::TestExtensionOrderings1::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestExtensionOrderings2_TestExtensionOrderings3::kTestExtOrderings3FieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3 >, 11, false >
  TestExtensionOrderings2_TestExtensionOrderings3::test_ext_orderings3(kTestExtOrderings3FieldNumber, *::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestExtensionOrderings2::kTestExtOrderings2FieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestExtensionOrderings2 >, 11, false >
  TestExtensionOrderings2::test_ext_orderings2(kTestExtOrderings2FieldNumber, *::protobuf_unittest::TestExtensionOrderings2::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestParsingMerge::kOptionalExtFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMerge,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes >, 11, false >
  TestParsingMerge::optional_ext(kOptionalExtFieldNumber, *::protobuf_unittest::TestAllTypes::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestParsingMerge::kRepeatedExtFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMerge,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypes >, 11, false >
  TestParsingMerge::repeated_ext(kRepeatedExtFieldNumber, *::protobuf_unittest::TestAllTypes::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  optional_int32_extension(kOptionalInt32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  optional_int64_extension(kOptionalInt64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  optional_uint32_extension(kOptionalUint32ExtensionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 4, false >
  optional_uint64_extension(kOptionalUint64ExtensionFieldNumber, PROTOBUF_ULONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 17, false >
  optional_sint32_extension(kOptionalSint32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 18, false >
  optional_sint64_extension(kOptionalSint64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 7, false >
  optional_fixed32_extension(kOptionalFixed32ExtensionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 6, false >
  optional_fixed64_extension(kOptionalFixed64ExtensionFieldNumber, PROTOBUF_ULONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 15, false >
  optional_sfixed32_extension(kOptionalSfixed32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 16, false >
  optional_sfixed64_extension(kOptionalSfixed64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  optional_float_extension(kOptionalFloatExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false >
  optional_double_extension(kOptionalDoubleExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  optional_bool_extension(kOptionalBoolExtensionFieldNumber, false);
const std::string optional_string_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  optional_string_extension(kOptionalStringExtensionFieldNumber, optional_string_extension_default);
const std::string optional_bytes_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  optional_bytes_extension(kOptionalBytesExtensionFieldNumber, optional_bytes_extension_default);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionalGroup_extension >, 10, false >
  optionalgroup_extension(kOptionalgroupExtensionFieldNumber, *::protobuf_unittest::OptionalGroup_extension::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  optional_nested_message_extension(kOptionalNestedMessageExtensionFieldNumber, *::protobuf_unittest::TestAllTypes_NestedMessage::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::ForeignMessage >, 11, false >
  optional_foreign_message_extension(kOptionalForeignMessageExtensionFieldNumber, *::protobuf_unittest::ForeignMessage::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::ImportMessage >, 11, false >
  optional_import_message_extension(kOptionalImportMessageExtensionFieldNumber, *::protobuf_unittest_import::ImportMessage::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypes_NestedEnum, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid>, 14, false >
  optional_nested_enum_extension(kOptionalNestedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::TestAllTypes_NestedEnum >(1));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
  optional_foreign_enum_extension(kOptionalForeignEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnum, ::protobuf_unittest_import::ImportEnum_IsValid>, 14, false >
  optional_import_enum_extension(kOptionalImportEnumExtensionFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnum >(7));
const std::string optional_string_piece_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  optional_string_piece_extension(kOptionalStringPieceExtensionFieldNumber, optional_string_piece_extension_default);
const std::string optional_cord_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  optional_cord_extension(kOptionalCordExtensionFieldNumber, optional_cord_extension_default);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::PublicImportMessage >, 11, false >
  optional_public_import_message_extension(kOptionalPublicImportMessageExtensionFieldNumber, *::protobuf_unittest_import::PublicImportMessage::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  optional_lazy_message_extension(kOptionalLazyMessageExtensionFieldNumber, *::protobuf_unittest::TestAllTypes_NestedMessage::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  repeated_int32_extension(kRepeatedInt32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  repeated_int64_extension(kRepeatedInt64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  repeated_uint32_extension(kRepeatedUint32ExtensionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 4, false >
  repeated_uint64_extension(kRepeatedUint64ExtensionFieldNumber, PROTOBUF_ULONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 17, false >
  repeated_sint32_extension(kRepeatedSint32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 18, false >
  repeated_sint64_extension(kRepeatedSint64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 7, false >
  repeated_fixed32_extension(kRepeatedFixed32ExtensionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 6, false >
  repeated_fixed64_extension(kRepeatedFixed64ExtensionFieldNumber, PROTOBUF_ULONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 15, false >
  repeated_sfixed32_extension(kRepeatedSfixed32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 16, false >
  repeated_sfixed64_extension(kRepeatedSfixed64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, false >
  repeated_float_extension(kRepeatedFloatExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, false >
  repeated_double_extension(kRepeatedDoubleExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, false >
  repeated_bool_extension(kRepeatedBoolExtensionFieldNumber, false);
const std::string repeated_string_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
  repeated_string_extension(kRepeatedStringExtensionFieldNumber, repeated_string_extension_default);
const std::string repeated_bytes_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 12, false >
  repeated_bytes_extension(kRepeatedBytesExtensionFieldNumber, repeated_bytes_extension_default);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::RepeatedGroup_extension >, 10, false >
  repeatedgroup_extension(kRepeatedgroupExtensionFieldNumber, *::protobuf_unittest::RepeatedGroup_extension::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  repeated_nested_message_extension(kRepeatedNestedMessageExtensionFieldNumber, *::protobuf_unittest::TestAllTypes_NestedMessage::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::ForeignMessage >, 11, false >
  repeated_foreign_message_extension(kRepeatedForeignMessageExtensionFieldNumber, *::protobuf_unittest::ForeignMessage::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest_import::ImportMessage >, 11, false >
  repeated_import_message_extension(kRepeatedImportMessageExtensionFieldNumber, *::protobuf_unittest_import::ImportMessage::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::TestAllTypes_NestedEnum, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid>, 14, false >
  repeated_nested_enum_extension(kRepeatedNestedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::TestAllTypes_NestedEnum >(1));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
  repeated_foreign_enum_extension(kRepeatedForeignEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest_import::ImportEnum, ::protobuf_unittest_import::ImportEnum_IsValid>, 14, false >
  repeated_import_enum_extension(kRepeatedImportEnumExtensionFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnum >(7));
const std::string repeated_string_piece_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
  repeated_string_piece_extension(kRepeatedStringPieceExtensionFieldNumber, repeated_string_piece_extension_default);
const std::string repeated_cord_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
  repeated_cord_extension(kRepeatedCordExtensionFieldNumber, repeated_cord_extension_default);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  repeated_lazy_message_extension(kRepeatedLazyMessageExtensionFieldNumber, *::protobuf_unittest::TestAllTypes_NestedMessage::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  default_int32_extension(kDefaultInt32ExtensionFieldNumber, 41);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  default_int64_extension(kDefaultInt64ExtensionFieldNumber, PROTOBUF_LONGLONG(42));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  default_uint32_extension(kDefaultUint32ExtensionFieldNumber, 43u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 4, false >
  default_uint64_extension(kDefaultUint64ExtensionFieldNumber, PROTOBUF_ULONGLONG(44));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 17, false >
  default_sint32_extension(kDefaultSint32ExtensionFieldNumber, -45);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 18, false >
  default_sint64_extension(kDefaultSint64ExtensionFieldNumber, PROTOBUF_LONGLONG(46));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 7, false >
  default_fixed32_extension(kDefaultFixed32ExtensionFieldNumber, 47u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 6, false >
  default_fixed64_extension(kDefaultFixed64ExtensionFieldNumber, PROTOBUF_ULONGLONG(48));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 15, false >
  default_sfixed32_extension(kDefaultSfixed32ExtensionFieldNumber, 49);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 16, false >
  default_sfixed64_extension(kDefaultSfixed64ExtensionFieldNumber, PROTOBUF_LONGLONG(-50));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  default_float_extension(kDefaultFloatExtensionFieldNumber, 51.5f);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false >
  default_double_extension(kDefaultDoubleExtensionFieldNumber, 52000);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  default_bool_extension(kDefaultBoolExtensionFieldNumber, true);
const std::string default_string_extension_default("hello");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  default_string_extension(kDefaultStringExtensionFieldNumber, default_string_extension_default);
const std::string default_bytes_extension_default("world");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  default_bytes_extension(kDefaultBytesExtensionFieldNumber, default_bytes_extension_default);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypes_NestedEnum, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid>, 14, false >
  default_nested_enum_extension(kDefaultNestedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::TestAllTypes_NestedEnum >(2));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
  default_foreign_enum_extension(kDefaultForeignEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(5));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnum, ::protobuf_unittest_import::ImportEnum_IsValid>, 14, false >
  default_import_enum_extension(kDefaultImportEnumExtensionFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnum >(8));
const std::string default_string_piece_extension_default("abc");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  default_string_piece_extension(kDefaultStringPieceExtensionFieldNumber, default_string_piece_extension_default);
const std::string default_cord_extension_default("123");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  default_cord_extension(kDefaultCordExtensionFieldNumber, default_cord_extension_default);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  oneof_uint32_extension(kOneofUint32ExtensionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  oneof_nested_message_extension(kOneofNestedMessageExtensionFieldNumber, *::protobuf_unittest::TestAllTypes_NestedMessage::internal_default_instance());
const std::string oneof_string_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  oneof_string_extension(kOneofStringExtensionFieldNumber, oneof_string_extension_default);
const std::string oneof_bytes_extension_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  oneof_bytes_extension(kOneofBytesExtensionFieldNumber, oneof_bytes_extension_default);
const std::string my_extension_string_default("");
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  my_extension_string(kMyExtensionStringFieldNumber, my_extension_string_default);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  my_extension_int(kMyExtensionIntFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, true >
  packed_int32_extension(kPackedInt32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, true >
  packed_int64_extension(kPackedInt64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, true >
  packed_uint32_extension(kPackedUint32ExtensionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 4, true >
  packed_uint64_extension(kPackedUint64ExtensionFieldNumber, PROTOBUF_ULONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 17, true >
  packed_sint32_extension(kPackedSint32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 18, true >
  packed_sint64_extension(kPackedSint64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 7, true >
  packed_fixed32_extension(kPackedFixed32ExtensionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 6, true >
  packed_fixed64_extension(kPackedFixed64ExtensionFieldNumber, PROTOBUF_ULONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 15, true >
  packed_sfixed32_extension(kPackedSfixed32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 16, true >
  packed_sfixed64_extension(kPackedSfixed64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, true >
  packed_float_extension(kPackedFloatExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, true >
  packed_double_extension(kPackedDoubleExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, true >
  packed_bool_extension(kPackedBoolExtensionFieldNumber, false);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, true >
  packed_enum_extension(kPackedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  unpacked_int32_extension(kUnpackedInt32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  unpacked_int64_extension(kUnpackedInt64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  unpacked_uint32_extension(kUnpackedUint32ExtensionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 4, false >
  unpacked_uint64_extension(kUnpackedUint64ExtensionFieldNumber, PROTOBUF_ULONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 17, false >
  unpacked_sint32_extension(kUnpackedSint32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 18, false >
  unpacked_sint64_extension(kUnpackedSint64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 7, false >
  unpacked_fixed32_extension(kUnpackedFixed32ExtensionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 6, false >
  unpacked_fixed64_extension(kUnpackedFixed64ExtensionFieldNumber, PROTOBUF_ULONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 15, false >
  unpacked_sfixed32_extension(kUnpackedSfixed32ExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 16, false >
  unpacked_sfixed64_extension(kUnpackedSfixed64ExtensionFieldNumber, PROTOBUF_LONGLONG(0));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, false >
  unpacked_float_extension(kUnpackedFloatExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, false >
  unpacked_double_extension(kUnpackedDoubleExtensionFieldNumber, 0);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, false >
  unpacked_bool_extension(kUnpackedBoolExtensionFieldNumber, false);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
  unpacked_enum_extension(kUnpackedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4));
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestHugeFieldNumbers,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes >, 11, false >
  test_all_types(kTestAllTypesFieldNumber, *::protobuf_unittest::TestAllTypes::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionInsideTable,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  test_extension_inside_table_extension(kTestExtensionInsideTableExtensionFieldNumber, 0);

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypes_NestedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypes_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypes_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypes_OptionalGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypes_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypes_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypes_RepeatedGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypes_RepeatedGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypes_RepeatedGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypes* Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::NestedTestAllTypes* Arena::CreateMaybeMessage< ::protobuf_unittest::NestedTestAllTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::NestedTestAllTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDeprecatedFields* Arena::CreateMaybeMessage< ::protobuf_unittest::TestDeprecatedFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDeprecatedFields >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDeprecatedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestDeprecatedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDeprecatedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::ForeignMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::ForeignMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::ForeignMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestReservedFields* Arena::CreateMaybeMessage< ::protobuf_unittest::TestReservedFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestReservedFields >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllExtensions* Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::OptionalGroup_extension* Arena::CreateMaybeMessage< ::protobuf_unittest::OptionalGroup_extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::OptionalGroup_extension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::RepeatedGroup_extension* Arena::CreateMaybeMessage< ::protobuf_unittest::RepeatedGroup_extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::RepeatedGroup_extension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestGroup_OptionalGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestGroup_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestGroup_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestGroupExtension* Arena::CreateMaybeMessage< ::protobuf_unittest::TestGroupExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestGroupExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension* Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedExtension* Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequired* Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequired >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequired >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredForeign* Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredForeign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredForeign >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestForeignNested* Arena::CreateMaybeMessage< ::protobuf_unittest::TestForeignNested >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestForeignNested >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEmptyMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEmptyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEmptyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEmptyMessageWithExtensions* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEmptyMessageWithExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEmptyMessageWithExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPickleNestedMessage_NestedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestPickleNestedMessage_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPickleNestedMessage_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPickleNestedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestPickleNestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPickleNestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMultipleExtensionRanges* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMultipleExtensionRanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMultipleExtensionRanges >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestReallyLargeTagNumber* Arena::CreateMaybeMessage< ::protobuf_unittest::TestReallyLargeTagNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestReallyLargeTagNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRecursiveMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestRecursiveMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRecursiveMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMutualRecursionA_SubMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMutualRecursionA_SubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMutualRecursionA_SubMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMutualRecursionA_SubGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMutualRecursionA_SubGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMutualRecursionA_SubGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMutualRecursionA* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMutualRecursionA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMutualRecursionA >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMutualRecursionB* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMutualRecursionB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMutualRecursionB >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIsInitialized_SubMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestIsInitialized_SubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIsInitialized_SubMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIsInitialized* Arena::CreateMaybeMessage< ::protobuf_unittest::TestIsInitialized >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIsInitialized >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDupFieldNumber_Foo* Arena::CreateMaybeMessage< ::protobuf_unittest::TestDupFieldNumber_Foo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDupFieldNumber_Foo >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDupFieldNumber_Bar* Arena::CreateMaybeMessage< ::protobuf_unittest::TestDupFieldNumber_Bar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDupFieldNumber_Bar >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDupFieldNumber* Arena::CreateMaybeMessage< ::protobuf_unittest::TestDupFieldNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDupFieldNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEagerMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEagerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEagerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestLazyMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestLazyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestLazyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedMessageHasBits* Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedMessageHasBits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedMessageHasBits >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestCamelCaseFieldNames* Arena::CreateMaybeMessage< ::protobuf_unittest::TestCamelCaseFieldNames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestCamelCaseFieldNames >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestFieldOrderings_NestedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestFieldOrderings_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestFieldOrderings_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestFieldOrderings* Arena::CreateMaybeMessage< ::protobuf_unittest::TestFieldOrderings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestFieldOrderings >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtensionOrderings1* Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtensionOrderings1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtensionOrderings1 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3* Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtensionOrderings2* Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtensionOrderings2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtensionOrderings2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtremeDefaultValues* Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtremeDefaultValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtremeDefaultValues >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::SparseEnumMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::SparseEnumMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::SparseEnumMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::OneString* Arena::CreateMaybeMessage< ::protobuf_unittest::OneString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::OneString >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::MoreString* Arena::CreateMaybeMessage< ::protobuf_unittest::MoreString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::MoreString >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::OneBytes* Arena::CreateMaybeMessage< ::protobuf_unittest::OneBytes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::OneBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::MoreBytes* Arena::CreateMaybeMessage< ::protobuf_unittest::MoreBytes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::MoreBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Int32Message* Arena::CreateMaybeMessage< ::protobuf_unittest::Int32Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Int32Message >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Uint32Message* Arena::CreateMaybeMessage< ::protobuf_unittest::Uint32Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Uint32Message >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Int64Message* Arena::CreateMaybeMessage< ::protobuf_unittest::Int64Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Int64Message >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Uint64Message* Arena::CreateMaybeMessage< ::protobuf_unittest::Uint64Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Uint64Message >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::BoolMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::BoolMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::BoolMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof_FooGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof_FooGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof_FooGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof* Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneofBackwardsCompatible* Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneofBackwardsCompatible >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneofBackwardsCompatible >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof2_FooGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof2_FooGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof2_FooGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof2_NestedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof2_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof2_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof2* Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredOneof_NestedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredOneof_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredOneof_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredOneof* Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredOneof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredOneof >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPackedTypes* Arena::CreateMaybeMessage< ::protobuf_unittest::TestPackedTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPackedTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestUnpackedTypes* Arena::CreateMaybeMessage< ::protobuf_unittest::TestUnpackedTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestUnpackedTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPackedExtensions* Arena::CreateMaybeMessage< ::protobuf_unittest::TestPackedExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPackedExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestUnpackedExtensions* Arena::CreateMaybeMessage< ::protobuf_unittest::TestUnpackedExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestUnpackedExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* Arena::CreateMaybeMessage< ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDynamicExtensions* Arena::CreateMaybeMessage< ::protobuf_unittest::TestDynamicExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDynamicExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRepeatedScalarDifferentTagSizes* Arena::CreateMaybeMessage< ::protobuf_unittest::TestRepeatedScalarDifferentTagSizes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRepeatedScalarDifferentTagSizes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1* Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2* Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator* Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_OptionalGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_RepeatedGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_RepeatedGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_RepeatedGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge* Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestCommentInjectionMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestCommentInjectionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestCommentInjectionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FooRequest* Arena::CreateMaybeMessage< ::protobuf_unittest::FooRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FooRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FooResponse* Arena::CreateMaybeMessage< ::protobuf_unittest::FooResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FooResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FooClientMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::FooClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FooClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FooServerMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::FooServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FooServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::BarRequest* Arena::CreateMaybeMessage< ::protobuf_unittest::BarRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::BarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::BarResponse* Arena::CreateMaybeMessage< ::protobuf_unittest::BarResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::BarResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestJsonName* Arena::CreateMaybeMessage< ::protobuf_unittest::TestJsonName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestJsonName >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* Arena::CreateMaybeMessage< ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestHugeFieldNumbers* Arena::CreateMaybeMessage< ::protobuf_unittest::TestHugeFieldNumbers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestHugeFieldNumbers >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtensionInsideTable* Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtensionInsideTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtensionInsideTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
