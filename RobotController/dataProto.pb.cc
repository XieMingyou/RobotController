// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataProto.proto

#include "dataProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dataProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AxisPos_dataProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dataProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CartPos_dataProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dataProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrivePos_dataProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dataProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoReport_dataProto_2eproto;
class AxisPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AxisPos> _instance;
} _AxisPos_default_instance_;
class CartPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CartPos> _instance;
} _CartPos_default_instance_;
class DrivePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrivePos> _instance;
} _DrivePos_default_instance_;
class DynamicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dynamic> _instance;
} _Dynamic_default_instance_;
class InfoReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InfoReport> _instance;
} _InfoReport_default_instance_;
class Client2ServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Client2Server> _instance;
} _Client2Server_default_instance_;
class Server2ClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Server2Client> _instance;
} _Server2Client_default_instance_;
static void InitDefaultsscc_info_AxisPos_dataProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AxisPos_default_instance_;
    new (ptr) ::AxisPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AxisPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AxisPos_dataProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AxisPos_dataProto_2eproto}, {}};

static void InitDefaultsscc_info_CartPos_dataProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CartPos_default_instance_;
    new (ptr) ::CartPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CartPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CartPos_dataProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CartPos_dataProto_2eproto}, {}};

static void InitDefaultsscc_info_Client2Server_dataProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Client2Server_default_instance_;
    new (ptr) ::Client2Server();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Client2Server::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Client2Server_dataProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Client2Server_dataProto_2eproto}, {}};

static void InitDefaultsscc_info_DrivePos_dataProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DrivePos_default_instance_;
    new (ptr) ::DrivePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DrivePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrivePos_dataProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DrivePos_dataProto_2eproto}, {}};

static void InitDefaultsscc_info_Dynamic_dataProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Dynamic_default_instance_;
    new (ptr) ::Dynamic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Dynamic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dynamic_dataProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dynamic_dataProto_2eproto}, {}};

static void InitDefaultsscc_info_InfoReport_dataProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InfoReport_default_instance_;
    new (ptr) ::InfoReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InfoReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoReport_dataProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InfoReport_dataProto_2eproto}, {}};

static void InitDefaultsscc_info_Server2Client_dataProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Server2Client_default_instance_;
    new (ptr) ::Server2Client();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Server2Client::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Server2Client_dataProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Server2Client_dataProto_2eproto}, {
      &scc_info_AxisPos_dataProto_2eproto.base,
      &scc_info_CartPos_dataProto_2eproto.base,
      &scc_info_DrivePos_dataProto_2eproto.base,
      &scc_info_InfoReport_dataProto_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dataProto_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dataProto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dataProto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dataProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AxisPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AxisPos, a1_),
  PROTOBUF_FIELD_OFFSET(::AxisPos, a2_),
  PROTOBUF_FIELD_OFFSET(::AxisPos, a3_),
  PROTOBUF_FIELD_OFFSET(::AxisPos, a4_),
  PROTOBUF_FIELD_OFFSET(::AxisPos, a5_),
  PROTOBUF_FIELD_OFFSET(::AxisPos, a6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CartPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CartPos, x_),
  PROTOBUF_FIELD_OFFSET(::CartPos, y_),
  PROTOBUF_FIELD_OFFSET(::CartPos, z_),
  PROTOBUF_FIELD_OFFSET(::CartPos, a_),
  PROTOBUF_FIELD_OFFSET(::CartPos, b_),
  PROTOBUF_FIELD_OFFSET(::CartPos, c_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DrivePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DrivePos, d1_),
  PROTOBUF_FIELD_OFFSET(::DrivePos, d2_),
  PROTOBUF_FIELD_OFFSET(::DrivePos, d3_),
  PROTOBUF_FIELD_OFFSET(::DrivePos, d4_),
  PROTOBUF_FIELD_OFFSET(::DrivePos, d5_),
  PROTOBUF_FIELD_OFFSET(::DrivePos, d6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Dynamic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Dynamic, velaxis_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, accaxis_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, decaxis_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, jerkaxis_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, velpath_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, accpath_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, decpath_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, jerkpath_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, velori_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, accori_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, decori_),
  PROTOBUF_FIELD_OFFSET(::Dynamic, jerkori_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InfoReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InfoReport, level_),
  PROTOBUF_FIELD_OFFSET(::InfoReport, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Client2Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Client2Server, emergestop_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, enablestate_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, operatemode_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, activestate_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, runstate_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, step_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, jog_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, coordinate_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, upordown_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, ovr_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, progline_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, transferzip_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, zipsize_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, projname_),
  PROTOBUF_FIELD_OFFSET(::Client2Server, varprogname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Server2Client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Server2Client, axispos_),
  PROTOBUF_FIELD_OFFSET(::Server2Client, cartpos_),
  PROTOBUF_FIELD_OFFSET(::Server2Client, drivepos_),
  PROTOBUF_FIELD_OFFSET(::Server2Client, activeprog_),
  PROTOBUF_FIELD_OFFSET(::Server2Client, runprog_),
  PROTOBUF_FIELD_OFFSET(::Server2Client, hasreachsingularity_),
  PROTOBUF_FIELD_OFFSET(::Server2Client, inforeport_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AxisPos)},
  { 11, -1, sizeof(::CartPos)},
  { 22, -1, sizeof(::DrivePos)},
  { 33, -1, sizeof(::Dynamic)},
  { 50, -1, sizeof(::InfoReport)},
  { 57, -1, sizeof(::Client2Server)},
  { 77, -1, sizeof(::Server2Client)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AxisPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CartPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DrivePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Dynamic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InfoReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Client2Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Server2Client_default_instance_),
};

const char descriptor_table_protodef_dataProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dataProto.proto\"Q\n\007AxisPos\022\n\n\002a1\030\001 \001(\001"
  "\022\n\n\002a2\030\002 \001(\001\022\n\n\002a3\030\003 \001(\001\022\n\n\002a4\030\004 \001(\001\022\n\n\002"
  "a5\030\005 \001(\001\022\n\n\002a6\030\006 \001(\001\"K\n\007CartPos\022\t\n\001x\030\001 \001"
  "(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\t\n\001b"
  "\030\005 \001(\001\022\t\n\001c\030\006 \001(\001\"R\n\010DrivePos\022\n\n\002d1\030\001 \001("
  "\001\022\n\n\002d2\030\002 \001(\001\022\n\n\002d3\030\003 \001(\001\022\n\n\002d4\030\004 \001(\001\022\n\n"
  "\002d5\030\005 \001(\001\022\n\n\002d6\030\006 \001(\001\"\324\001\n\007Dynamic\022\017\n\007vel"
  "Axis\030\001 \001(\001\022\017\n\007accAxis\030\002 \001(\001\022\017\n\007decAxis\030\003"
  " \001(\001\022\020\n\010jerkAxis\030\004 \001(\001\022\017\n\007velPath\030\005 \001(\001\022"
  "\017\n\007accPath\030\006 \001(\001\022\017\n\007decPath\030\007 \001(\001\022\020\n\010jer"
  "kPath\030\010 \001(\001\022\016\n\006velOri\030\t \001(\001\022\016\n\006accOri\030\n "
  "\001(\001\022\016\n\006decOri\030\013 \001(\001\022\017\n\007jerkOri\030\014 \001(\001\",\n\n"
  "InfoReport\022\r\n\005level\030\001 \001(\005\022\017\n\007content\030\002 \001"
  "(\t\"\241\002\n\rClient2Server\022\022\n\nemergeStop\030\001 \001(\005"
  "\022\023\n\013enableState\030\002 \001(\005\022\023\n\013operateMode\030\003 \001"
  "(\005\022\023\n\013activeState\030\004 \001(\005\022\020\n\010runState\030\005 \001("
  "\005\022\014\n\004step\030\006 \001(\005\022\013\n\003jog\030\007 \001(\005\022\022\n\ncoordina"
  "te\030\010 \001(\005\022\020\n\010upOrDown\030\t \001(\005\022\013\n\003ovr\030\n \001(\005\022"
  "\020\n\010progLine\030\013 \001(\005\022\023\n\013transferZip\030\014 \001(\005\022\017"
  "\n\007zipSize\030\r \001(\005\022\020\n\010projName\030\016 \001(\t\022\023\n\013var"
  "ProgName\030\017 \001(\t\"\305\001\n\rServer2Client\022\031\n\007axis"
  "Pos\030\001 \001(\0132\010.AxisPos\022\031\n\007cartPos\030\002 \001(\0132\010.C"
  "artPos\022\033\n\010drivePos\030\003 \001(\0132\t.DrivePos\022\022\n\na"
  "ctiveProg\030\004 \001(\005\022\017\n\007runProg\030\005 \001(\005\022\033\n\023hasR"
  "eachSingularity\030\006 \001(\005\022\037\n\ninfoReport\030\007 \003("
  "\0132\013.InfoReportb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dataProto_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dataProto_2eproto_sccs[7] = {
  &scc_info_AxisPos_dataProto_2eproto.base,
  &scc_info_CartPos_dataProto_2eproto.base,
  &scc_info_Client2Server_dataProto_2eproto.base,
  &scc_info_DrivePos_dataProto_2eproto.base,
  &scc_info_Dynamic_dataProto_2eproto.base,
  &scc_info_InfoReport_dataProto_2eproto.base,
  &scc_info_Server2Client_dataProto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dataProto_2eproto_once;
static bool descriptor_table_dataProto_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dataProto_2eproto = {
  &descriptor_table_dataProto_2eproto_initialized, descriptor_table_protodef_dataProto_2eproto, "dataProto.proto", 1022,
  &descriptor_table_dataProto_2eproto_once, descriptor_table_dataProto_2eproto_sccs, descriptor_table_dataProto_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_dataProto_2eproto::offsets,
  file_level_metadata_dataProto_2eproto, 7, file_level_enum_descriptors_dataProto_2eproto, file_level_service_descriptors_dataProto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dataProto_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dataProto_2eproto), true);

// ===================================================================

void AxisPos::InitAsDefaultInstance() {
}
class AxisPos::_Internal {
 public:
};

AxisPos::AxisPos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AxisPos)
}
AxisPos::AxisPos(const AxisPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&a6_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(a6_));
  // @@protoc_insertion_point(copy_constructor:AxisPos)
}

void AxisPos::SharedCtor() {
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a6_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a6_));
}

AxisPos::~AxisPos() {
  // @@protoc_insertion_point(destructor:AxisPos)
  SharedDtor();
}

void AxisPos::SharedDtor() {
}

void AxisPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AxisPos& AxisPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AxisPos_dataProto_2eproto.base);
  return *internal_default_instance();
}


void AxisPos::Clear() {
// @@protoc_insertion_point(message_clear_start:AxisPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a6_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a6_));
  _internal_metadata_.Clear();
}

const char* AxisPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          a3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          a4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          a5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          a6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AxisPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AxisPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double a1 = 1;
  if (!(this->a1() <= 0 && this->a1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_a1(), target);
  }

  // double a2 = 2;
  if (!(this->a2() <= 0 && this->a2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_a2(), target);
  }

  // double a3 = 3;
  if (!(this->a3() <= 0 && this->a3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_a3(), target);
  }

  // double a4 = 4;
  if (!(this->a4() <= 0 && this->a4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_a4(), target);
  }

  // double a5 = 5;
  if (!(this->a5() <= 0 && this->a5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_a5(), target);
  }

  // double a6 = 6;
  if (!(this->a6() <= 0 && this->a6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_a6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AxisPos)
  return target;
}

size_t AxisPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AxisPos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a1 = 1;
  if (!(this->a1() <= 0 && this->a1() >= 0)) {
    total_size += 1 + 8;
  }

  // double a2 = 2;
  if (!(this->a2() <= 0 && this->a2() >= 0)) {
    total_size += 1 + 8;
  }

  // double a3 = 3;
  if (!(this->a3() <= 0 && this->a3() >= 0)) {
    total_size += 1 + 8;
  }

  // double a4 = 4;
  if (!(this->a4() <= 0 && this->a4() >= 0)) {
    total_size += 1 + 8;
  }

  // double a5 = 5;
  if (!(this->a5() <= 0 && this->a5() >= 0)) {
    total_size += 1 + 8;
  }

  // double a6 = 6;
  if (!(this->a6() <= 0 && this->a6() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AxisPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AxisPos)
  GOOGLE_DCHECK_NE(&from, this);
  const AxisPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AxisPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AxisPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AxisPos)
    MergeFrom(*source);
  }
}

void AxisPos::MergeFrom(const AxisPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AxisPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.a1() <= 0 && from.a1() >= 0)) {
    _internal_set_a1(from._internal_a1());
  }
  if (!(from.a2() <= 0 && from.a2() >= 0)) {
    _internal_set_a2(from._internal_a2());
  }
  if (!(from.a3() <= 0 && from.a3() >= 0)) {
    _internal_set_a3(from._internal_a3());
  }
  if (!(from.a4() <= 0 && from.a4() >= 0)) {
    _internal_set_a4(from._internal_a4());
  }
  if (!(from.a5() <= 0 && from.a5() >= 0)) {
    _internal_set_a5(from._internal_a5());
  }
  if (!(from.a6() <= 0 && from.a6() >= 0)) {
    _internal_set_a6(from._internal_a6());
  }
}

void AxisPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AxisPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AxisPos::CopyFrom(const AxisPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AxisPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AxisPos::IsInitialized() const {
  return true;
}

void AxisPos::InternalSwap(AxisPos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
  swap(a3_, other->a3_);
  swap(a4_, other->a4_);
  swap(a5_, other->a5_);
  swap(a6_, other->a6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AxisPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CartPos::InitAsDefaultInstance() {
}
class CartPos::_Internal {
 public:
};

CartPos::CartPos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CartPos)
}
CartPos::CartPos(const CartPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&x_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:CartPos)
}

void CartPos::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&x_)) + sizeof(c_));
}

CartPos::~CartPos() {
  // @@protoc_insertion_point(destructor:CartPos)
  SharedDtor();
}

void CartPos::SharedDtor() {
}

void CartPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CartPos& CartPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CartPos_dataProto_2eproto.base);
  return *internal_default_instance();
}


void CartPos::Clear() {
// @@protoc_insertion_point(message_clear_start:CartPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&x_)) + sizeof(c_));
  _internal_metadata_.Clear();
}

const char* CartPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double c = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CartPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  // double b = 5;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_b(), target);
  }

  // double c = 6;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CartPos)
  return target;
}

size_t CartPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CartPos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 8;
  }

  // double b = 5;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 8;
  }

  // double c = 6;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CartPos)
  GOOGLE_DCHECK_NE(&from, this);
  const CartPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CartPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CartPos)
    MergeFrom(*source);
  }
}

void CartPos::MergeFrom(const CartPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CartPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.c() <= 0 && from.c() >= 0)) {
    _internal_set_c(from._internal_c());
  }
}

void CartPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CartPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartPos::CopyFrom(const CartPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CartPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartPos::IsInitialized() const {
  return true;
}

void CartPos::InternalSwap(CartPos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CartPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrivePos::InitAsDefaultInstance() {
}
class DrivePos::_Internal {
 public:
};

DrivePos::DrivePos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DrivePos)
}
DrivePos::DrivePos(const DrivePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&d1_, &from.d1_,
    static_cast<size_t>(reinterpret_cast<char*>(&d6_) -
    reinterpret_cast<char*>(&d1_)) + sizeof(d6_));
  // @@protoc_insertion_point(copy_constructor:DrivePos)
}

void DrivePos::SharedCtor() {
  ::memset(&d1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d6_) -
      reinterpret_cast<char*>(&d1_)) + sizeof(d6_));
}

DrivePos::~DrivePos() {
  // @@protoc_insertion_point(destructor:DrivePos)
  SharedDtor();
}

void DrivePos::SharedDtor() {
}

void DrivePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrivePos& DrivePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrivePos_dataProto_2eproto.base);
  return *internal_default_instance();
}


void DrivePos::Clear() {
// @@protoc_insertion_point(message_clear_start:DrivePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&d1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d6_) -
      reinterpret_cast<char*>(&d1_)) + sizeof(d6_));
  _internal_metadata_.Clear();
}

const char* DrivePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double d1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          d1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double d2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          d2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double d3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          d3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double d4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          d4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double d5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          d5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double d6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          d6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrivePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DrivePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double d1 = 1;
  if (!(this->d1() <= 0 && this->d1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_d1(), target);
  }

  // double d2 = 2;
  if (!(this->d2() <= 0 && this->d2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_d2(), target);
  }

  // double d3 = 3;
  if (!(this->d3() <= 0 && this->d3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_d3(), target);
  }

  // double d4 = 4;
  if (!(this->d4() <= 0 && this->d4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_d4(), target);
  }

  // double d5 = 5;
  if (!(this->d5() <= 0 && this->d5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_d5(), target);
  }

  // double d6 = 6;
  if (!(this->d6() <= 0 && this->d6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_d6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DrivePos)
  return target;
}

size_t DrivePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DrivePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double d1 = 1;
  if (!(this->d1() <= 0 && this->d1() >= 0)) {
    total_size += 1 + 8;
  }

  // double d2 = 2;
  if (!(this->d2() <= 0 && this->d2() >= 0)) {
    total_size += 1 + 8;
  }

  // double d3 = 3;
  if (!(this->d3() <= 0 && this->d3() >= 0)) {
    total_size += 1 + 8;
  }

  // double d4 = 4;
  if (!(this->d4() <= 0 && this->d4() >= 0)) {
    total_size += 1 + 8;
  }

  // double d5 = 5;
  if (!(this->d5() <= 0 && this->d5() >= 0)) {
    total_size += 1 + 8;
  }

  // double d6 = 6;
  if (!(this->d6() <= 0 && this->d6() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrivePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DrivePos)
  GOOGLE_DCHECK_NE(&from, this);
  const DrivePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrivePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DrivePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DrivePos)
    MergeFrom(*source);
  }
}

void DrivePos::MergeFrom(const DrivePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DrivePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.d1() <= 0 && from.d1() >= 0)) {
    _internal_set_d1(from._internal_d1());
  }
  if (!(from.d2() <= 0 && from.d2() >= 0)) {
    _internal_set_d2(from._internal_d2());
  }
  if (!(from.d3() <= 0 && from.d3() >= 0)) {
    _internal_set_d3(from._internal_d3());
  }
  if (!(from.d4() <= 0 && from.d4() >= 0)) {
    _internal_set_d4(from._internal_d4());
  }
  if (!(from.d5() <= 0 && from.d5() >= 0)) {
    _internal_set_d5(from._internal_d5());
  }
  if (!(from.d6() <= 0 && from.d6() >= 0)) {
    _internal_set_d6(from._internal_d6());
  }
}

void DrivePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DrivePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrivePos::CopyFrom(const DrivePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DrivePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrivePos::IsInitialized() const {
  return true;
}

void DrivePos::InternalSwap(DrivePos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(d1_, other->d1_);
  swap(d2_, other->d2_);
  swap(d3_, other->d3_);
  swap(d4_, other->d4_);
  swap(d5_, other->d5_);
  swap(d6_, other->d6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrivePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dynamic::InitAsDefaultInstance() {
}
class Dynamic::_Internal {
 public:
};

Dynamic::Dynamic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Dynamic)
}
Dynamic::Dynamic(const Dynamic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&velaxis_, &from.velaxis_,
    static_cast<size_t>(reinterpret_cast<char*>(&jerkori_) -
    reinterpret_cast<char*>(&velaxis_)) + sizeof(jerkori_));
  // @@protoc_insertion_point(copy_constructor:Dynamic)
}

void Dynamic::SharedCtor() {
  ::memset(&velaxis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerkori_) -
      reinterpret_cast<char*>(&velaxis_)) + sizeof(jerkori_));
}

Dynamic::~Dynamic() {
  // @@protoc_insertion_point(destructor:Dynamic)
  SharedDtor();
}

void Dynamic::SharedDtor() {
}

void Dynamic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dynamic& Dynamic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dynamic_dataProto_2eproto.base);
  return *internal_default_instance();
}


void Dynamic::Clear() {
// @@protoc_insertion_point(message_clear_start:Dynamic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velaxis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerkori_) -
      reinterpret_cast<char*>(&velaxis_)) + sizeof(jerkori_));
  _internal_metadata_.Clear();
}

const char* Dynamic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double velAxis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          velaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accAxis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          accaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double decAxis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          decaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double jerkAxis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          jerkaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velPath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          velpath_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accPath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          accpath_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double decPath = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          decpath_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double jerkPath = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          jerkpath_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velOri = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          velori_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accOri = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          accori_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double decOri = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          decori_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double jerkOri = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          jerkori_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dynamic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Dynamic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double velAxis = 1;
  if (!(this->velaxis() <= 0 && this->velaxis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_velaxis(), target);
  }

  // double accAxis = 2;
  if (!(this->accaxis() <= 0 && this->accaxis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_accaxis(), target);
  }

  // double decAxis = 3;
  if (!(this->decaxis() <= 0 && this->decaxis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_decaxis(), target);
  }

  // double jerkAxis = 4;
  if (!(this->jerkaxis() <= 0 && this->jerkaxis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_jerkaxis(), target);
  }

  // double velPath = 5;
  if (!(this->velpath() <= 0 && this->velpath() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_velpath(), target);
  }

  // double accPath = 6;
  if (!(this->accpath() <= 0 && this->accpath() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_accpath(), target);
  }

  // double decPath = 7;
  if (!(this->decpath() <= 0 && this->decpath() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_decpath(), target);
  }

  // double jerkPath = 8;
  if (!(this->jerkpath() <= 0 && this->jerkpath() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_jerkpath(), target);
  }

  // double velOri = 9;
  if (!(this->velori() <= 0 && this->velori() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_velori(), target);
  }

  // double accOri = 10;
  if (!(this->accori() <= 0 && this->accori() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_accori(), target);
  }

  // double decOri = 11;
  if (!(this->decori() <= 0 && this->decori() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_decori(), target);
  }

  // double jerkOri = 12;
  if (!(this->jerkori() <= 0 && this->jerkori() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_jerkori(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Dynamic)
  return target;
}

size_t Dynamic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Dynamic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double velAxis = 1;
  if (!(this->velaxis() <= 0 && this->velaxis() >= 0)) {
    total_size += 1 + 8;
  }

  // double accAxis = 2;
  if (!(this->accaxis() <= 0 && this->accaxis() >= 0)) {
    total_size += 1 + 8;
  }

  // double decAxis = 3;
  if (!(this->decaxis() <= 0 && this->decaxis() >= 0)) {
    total_size += 1 + 8;
  }

  // double jerkAxis = 4;
  if (!(this->jerkaxis() <= 0 && this->jerkaxis() >= 0)) {
    total_size += 1 + 8;
  }

  // double velPath = 5;
  if (!(this->velpath() <= 0 && this->velpath() >= 0)) {
    total_size += 1 + 8;
  }

  // double accPath = 6;
  if (!(this->accpath() <= 0 && this->accpath() >= 0)) {
    total_size += 1 + 8;
  }

  // double decPath = 7;
  if (!(this->decpath() <= 0 && this->decpath() >= 0)) {
    total_size += 1 + 8;
  }

  // double jerkPath = 8;
  if (!(this->jerkpath() <= 0 && this->jerkpath() >= 0)) {
    total_size += 1 + 8;
  }

  // double velOri = 9;
  if (!(this->velori() <= 0 && this->velori() >= 0)) {
    total_size += 1 + 8;
  }

  // double accOri = 10;
  if (!(this->accori() <= 0 && this->accori() >= 0)) {
    total_size += 1 + 8;
  }

  // double decOri = 11;
  if (!(this->decori() <= 0 && this->decori() >= 0)) {
    total_size += 1 + 8;
  }

  // double jerkOri = 12;
  if (!(this->jerkori() <= 0 && this->jerkori() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dynamic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Dynamic)
  GOOGLE_DCHECK_NE(&from, this);
  const Dynamic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dynamic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Dynamic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Dynamic)
    MergeFrom(*source);
  }
}

void Dynamic::MergeFrom(const Dynamic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Dynamic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.velaxis() <= 0 && from.velaxis() >= 0)) {
    _internal_set_velaxis(from._internal_velaxis());
  }
  if (!(from.accaxis() <= 0 && from.accaxis() >= 0)) {
    _internal_set_accaxis(from._internal_accaxis());
  }
  if (!(from.decaxis() <= 0 && from.decaxis() >= 0)) {
    _internal_set_decaxis(from._internal_decaxis());
  }
  if (!(from.jerkaxis() <= 0 && from.jerkaxis() >= 0)) {
    _internal_set_jerkaxis(from._internal_jerkaxis());
  }
  if (!(from.velpath() <= 0 && from.velpath() >= 0)) {
    _internal_set_velpath(from._internal_velpath());
  }
  if (!(from.accpath() <= 0 && from.accpath() >= 0)) {
    _internal_set_accpath(from._internal_accpath());
  }
  if (!(from.decpath() <= 0 && from.decpath() >= 0)) {
    _internal_set_decpath(from._internal_decpath());
  }
  if (!(from.jerkpath() <= 0 && from.jerkpath() >= 0)) {
    _internal_set_jerkpath(from._internal_jerkpath());
  }
  if (!(from.velori() <= 0 && from.velori() >= 0)) {
    _internal_set_velori(from._internal_velori());
  }
  if (!(from.accori() <= 0 && from.accori() >= 0)) {
    _internal_set_accori(from._internal_accori());
  }
  if (!(from.decori() <= 0 && from.decori() >= 0)) {
    _internal_set_decori(from._internal_decori());
  }
  if (!(from.jerkori() <= 0 && from.jerkori() >= 0)) {
    _internal_set_jerkori(from._internal_jerkori());
  }
}

void Dynamic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Dynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dynamic::CopyFrom(const Dynamic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Dynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dynamic::IsInitialized() const {
  return true;
}

void Dynamic::InternalSwap(Dynamic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(velaxis_, other->velaxis_);
  swap(accaxis_, other->accaxis_);
  swap(decaxis_, other->decaxis_);
  swap(jerkaxis_, other->jerkaxis_);
  swap(velpath_, other->velpath_);
  swap(accpath_, other->accpath_);
  swap(decpath_, other->decpath_);
  swap(jerkpath_, other->jerkpath_);
  swap(velori_, other->velori_);
  swap(accori_, other->accori_);
  swap(decori_, other->decori_);
  swap(jerkori_, other->jerkori_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dynamic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InfoReport::InitAsDefaultInstance() {
}
class InfoReport::_Internal {
 public:
};

InfoReport::InfoReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfoReport)
}
InfoReport::InfoReport(const InfoReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:InfoReport)
}

void InfoReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InfoReport_dataProto_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

InfoReport::~InfoReport() {
  // @@protoc_insertion_point(destructor:InfoReport)
  SharedDtor();
}

void InfoReport::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InfoReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoReport& InfoReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InfoReport_dataProto_2eproto.base);
  return *internal_default_instance();
}


void InfoReport::Clear() {
// @@protoc_insertion_point(message_clear_start:InfoReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  _internal_metadata_.Clear();
}

const char* InfoReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InfoReport.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfoReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InfoReport.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfoReport)
  return target;
}

size_t InfoReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InfoReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InfoReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InfoReport)
    MergeFrom(*source);
  }
}

void InfoReport::MergeFrom(const InfoReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void InfoReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoReport::CopyFrom(const InfoReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoReport::IsInitialized() const {
  return true;
}

void InfoReport::InternalSwap(InfoReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Client2Server::InitAsDefaultInstance() {
}
class Client2Server::_Internal {
 public:
};

Client2Server::Client2Server()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Client2Server)
}
Client2Server::Client2Server(const Client2Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  projname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_projname().empty()) {
    projname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projname_);
  }
  varprogname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_varprogname().empty()) {
    varprogname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.varprogname_);
  }
  ::memcpy(&emergestop_, &from.emergestop_,
    static_cast<size_t>(reinterpret_cast<char*>(&zipsize_) -
    reinterpret_cast<char*>(&emergestop_)) + sizeof(zipsize_));
  // @@protoc_insertion_point(copy_constructor:Client2Server)
}

void Client2Server::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Client2Server_dataProto_2eproto.base);
  projname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  varprogname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&emergestop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zipsize_) -
      reinterpret_cast<char*>(&emergestop_)) + sizeof(zipsize_));
}

Client2Server::~Client2Server() {
  // @@protoc_insertion_point(destructor:Client2Server)
  SharedDtor();
}

void Client2Server::SharedDtor() {
  projname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  varprogname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Client2Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Client2Server& Client2Server::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Client2Server_dataProto_2eproto.base);
  return *internal_default_instance();
}


void Client2Server::Clear() {
// @@protoc_insertion_point(message_clear_start:Client2Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  varprogname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&emergestop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zipsize_) -
      reinterpret_cast<char*>(&emergestop_)) + sizeof(zipsize_));
  _internal_metadata_.Clear();
}

const char* Client2Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 emergeStop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          emergestop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enableState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enablestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operateMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          operatemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activeState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          activestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 runState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          runstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 step = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 jog = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          jog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coordinate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          coordinate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 upOrDown = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          upordown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ovr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ovr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progLine = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          progline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transferZip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          transferzip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zipSize = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          zipsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string projName = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_projname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Client2Server.projName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string varProgName = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_varprogname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Client2Server.varProgName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Client2Server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Client2Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 emergeStop = 1;
  if (this->emergestop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_emergestop(), target);
  }

  // int32 enableState = 2;
  if (this->enablestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enablestate(), target);
  }

  // int32 operateMode = 3;
  if (this->operatemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_operatemode(), target);
  }

  // int32 activeState = 4;
  if (this->activestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_activestate(), target);
  }

  // int32 runState = 5;
  if (this->runstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_runstate(), target);
  }

  // int32 step = 6;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_step(), target);
  }

  // int32 jog = 7;
  if (this->jog() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_jog(), target);
  }

  // int32 coordinate = 8;
  if (this->coordinate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_coordinate(), target);
  }

  // int32 upOrDown = 9;
  if (this->upordown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_upordown(), target);
  }

  // int32 ovr = 10;
  if (this->ovr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_ovr(), target);
  }

  // int32 progLine = 11;
  if (this->progline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_progline(), target);
  }

  // int32 transferZip = 12;
  if (this->transferzip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_transferzip(), target);
  }

  // int32 zipSize = 13;
  if (this->zipsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_zipsize(), target);
  }

  // string projName = 14;
  if (this->projname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_projname().data(), static_cast<int>(this->_internal_projname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Server.projName");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_projname(), target);
  }

  // string varProgName = 15;
  if (this->varprogname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_varprogname().data(), static_cast<int>(this->_internal_varprogname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Server.varProgName");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_varprogname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Client2Server)
  return target;
}

size_t Client2Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Client2Server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string projName = 14;
  if (this->projname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_projname());
  }

  // string varProgName = 15;
  if (this->varprogname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_varprogname());
  }

  // int32 emergeStop = 1;
  if (this->emergestop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_emergestop());
  }

  // int32 enableState = 2;
  if (this->enablestate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enablestate());
  }

  // int32 operateMode = 3;
  if (this->operatemode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operatemode());
  }

  // int32 activeState = 4;
  if (this->activestate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activestate());
  }

  // int32 runState = 5;
  if (this->runstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runstate());
  }

  // int32 step = 6;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_step());
  }

  // int32 jog = 7;
  if (this->jog() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_jog());
  }

  // int32 coordinate = 8;
  if (this->coordinate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coordinate());
  }

  // int32 upOrDown = 9;
  if (this->upordown() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_upordown());
  }

  // int32 ovr = 10;
  if (this->ovr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ovr());
  }

  // int32 progLine = 11;
  if (this->progline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progline());
  }

  // int32 transferZip = 12;
  if (this->transferzip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transferzip());
  }

  // int32 zipSize = 13;
  if (this->zipsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zipsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Client2Server::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Client2Server)
  GOOGLE_DCHECK_NE(&from, this);
  const Client2Server* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Client2Server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Client2Server)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Client2Server)
    MergeFrom(*source);
  }
}

void Client2Server::MergeFrom(const Client2Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Client2Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.projname().size() > 0) {

    projname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projname_);
  }
  if (from.varprogname().size() > 0) {

    varprogname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.varprogname_);
  }
  if (from.emergestop() != 0) {
    _internal_set_emergestop(from._internal_emergestop());
  }
  if (from.enablestate() != 0) {
    _internal_set_enablestate(from._internal_enablestate());
  }
  if (from.operatemode() != 0) {
    _internal_set_operatemode(from._internal_operatemode());
  }
  if (from.activestate() != 0) {
    _internal_set_activestate(from._internal_activestate());
  }
  if (from.runstate() != 0) {
    _internal_set_runstate(from._internal_runstate());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
  if (from.jog() != 0) {
    _internal_set_jog(from._internal_jog());
  }
  if (from.coordinate() != 0) {
    _internal_set_coordinate(from._internal_coordinate());
  }
  if (from.upordown() != 0) {
    _internal_set_upordown(from._internal_upordown());
  }
  if (from.ovr() != 0) {
    _internal_set_ovr(from._internal_ovr());
  }
  if (from.progline() != 0) {
    _internal_set_progline(from._internal_progline());
  }
  if (from.transferzip() != 0) {
    _internal_set_transferzip(from._internal_transferzip());
  }
  if (from.zipsize() != 0) {
    _internal_set_zipsize(from._internal_zipsize());
  }
}

void Client2Server::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Client2Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client2Server::CopyFrom(const Client2Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Client2Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client2Server::IsInitialized() const {
  return true;
}

void Client2Server::InternalSwap(Client2Server* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  projname_.Swap(&other->projname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  varprogname_.Swap(&other->varprogname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(emergestop_, other->emergestop_);
  swap(enablestate_, other->enablestate_);
  swap(operatemode_, other->operatemode_);
  swap(activestate_, other->activestate_);
  swap(runstate_, other->runstate_);
  swap(step_, other->step_);
  swap(jog_, other->jog_);
  swap(coordinate_, other->coordinate_);
  swap(upordown_, other->upordown_);
  swap(ovr_, other->ovr_);
  swap(progline_, other->progline_);
  swap(transferzip_, other->transferzip_);
  swap(zipsize_, other->zipsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Client2Server::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Server2Client::InitAsDefaultInstance() {
  ::_Server2Client_default_instance_._instance.get_mutable()->axispos_ = const_cast< ::AxisPos*>(
      ::AxisPos::internal_default_instance());
  ::_Server2Client_default_instance_._instance.get_mutable()->cartpos_ = const_cast< ::CartPos*>(
      ::CartPos::internal_default_instance());
  ::_Server2Client_default_instance_._instance.get_mutable()->drivepos_ = const_cast< ::DrivePos*>(
      ::DrivePos::internal_default_instance());
}
class Server2Client::_Internal {
 public:
  static const ::AxisPos& axispos(const Server2Client* msg);
  static const ::CartPos& cartpos(const Server2Client* msg);
  static const ::DrivePos& drivepos(const Server2Client* msg);
};

const ::AxisPos&
Server2Client::_Internal::axispos(const Server2Client* msg) {
  return *msg->axispos_;
}
const ::CartPos&
Server2Client::_Internal::cartpos(const Server2Client* msg) {
  return *msg->cartpos_;
}
const ::DrivePos&
Server2Client::_Internal::drivepos(const Server2Client* msg) {
  return *msg->drivepos_;
}
Server2Client::Server2Client()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Server2Client)
}
Server2Client::Server2Client(const Server2Client& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inforeport_(from.inforeport_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_axispos()) {
    axispos_ = new ::AxisPos(*from.axispos_);
  } else {
    axispos_ = nullptr;
  }
  if (from._internal_has_cartpos()) {
    cartpos_ = new ::CartPos(*from.cartpos_);
  } else {
    cartpos_ = nullptr;
  }
  if (from._internal_has_drivepos()) {
    drivepos_ = new ::DrivePos(*from.drivepos_);
  } else {
    drivepos_ = nullptr;
  }
  ::memcpy(&activeprog_, &from.activeprog_,
    static_cast<size_t>(reinterpret_cast<char*>(&hasreachsingularity_) -
    reinterpret_cast<char*>(&activeprog_)) + sizeof(hasreachsingularity_));
  // @@protoc_insertion_point(copy_constructor:Server2Client)
}

void Server2Client::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Server2Client_dataProto_2eproto.base);
  ::memset(&axispos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasreachsingularity_) -
      reinterpret_cast<char*>(&axispos_)) + sizeof(hasreachsingularity_));
}

Server2Client::~Server2Client() {
  // @@protoc_insertion_point(destructor:Server2Client)
  SharedDtor();
}

void Server2Client::SharedDtor() {
  if (this != internal_default_instance()) delete axispos_;
  if (this != internal_default_instance()) delete cartpos_;
  if (this != internal_default_instance()) delete drivepos_;
}

void Server2Client::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Server2Client& Server2Client::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Server2Client_dataProto_2eproto.base);
  return *internal_default_instance();
}


void Server2Client::Clear() {
// @@protoc_insertion_point(message_clear_start:Server2Client)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inforeport_.Clear();
  if (GetArenaNoVirtual() == nullptr && axispos_ != nullptr) {
    delete axispos_;
  }
  axispos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cartpos_ != nullptr) {
    delete cartpos_;
  }
  cartpos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && drivepos_ != nullptr) {
    delete drivepos_;
  }
  drivepos_ = nullptr;
  ::memset(&activeprog_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasreachsingularity_) -
      reinterpret_cast<char*>(&activeprog_)) + sizeof(hasreachsingularity_));
  _internal_metadata_.Clear();
}

const char* Server2Client::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AxisPos axisPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_axispos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CartPos cartPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartpos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DrivePos drivePos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drivepos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activeProg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          activeprog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 runProg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          runprog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hasReachSingularity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hasreachsingularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .InfoReport infoReport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inforeport(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Server2Client::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Server2Client)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AxisPos axisPos = 1;
  if (this->has_axispos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::axispos(this), target, stream);
  }

  // .CartPos cartPos = 2;
  if (this->has_cartpos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cartpos(this), target, stream);
  }

  // .DrivePos drivePos = 3;
  if (this->has_drivepos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::drivepos(this), target, stream);
  }

  // int32 activeProg = 4;
  if (this->activeprog() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_activeprog(), target);
  }

  // int32 runProg = 5;
  if (this->runprog() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_runprog(), target);
  }

  // int32 hasReachSingularity = 6;
  if (this->hasreachsingularity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_hasreachsingularity(), target);
  }

  // repeated .InfoReport infoReport = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inforeport_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_inforeport(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Server2Client)
  return target;
}

size_t Server2Client::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Server2Client)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InfoReport infoReport = 7;
  total_size += 1UL * this->_internal_inforeport_size();
  for (const auto& msg : this->inforeport_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .AxisPos axisPos = 1;
  if (this->has_axispos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *axispos_);
  }

  // .CartPos cartPos = 2;
  if (this->has_cartpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cartpos_);
  }

  // .DrivePos drivePos = 3;
  if (this->has_drivepos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drivepos_);
  }

  // int32 activeProg = 4;
  if (this->activeprog() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activeprog());
  }

  // int32 runProg = 5;
  if (this->runprog() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runprog());
  }

  // int32 hasReachSingularity = 6;
  if (this->hasreachsingularity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hasreachsingularity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Server2Client::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Server2Client)
  GOOGLE_DCHECK_NE(&from, this);
  const Server2Client* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Server2Client>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Server2Client)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Server2Client)
    MergeFrom(*source);
  }
}

void Server2Client::MergeFrom(const Server2Client& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Server2Client)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inforeport_.MergeFrom(from.inforeport_);
  if (from.has_axispos()) {
    _internal_mutable_axispos()->::AxisPos::MergeFrom(from._internal_axispos());
  }
  if (from.has_cartpos()) {
    _internal_mutable_cartpos()->::CartPos::MergeFrom(from._internal_cartpos());
  }
  if (from.has_drivepos()) {
    _internal_mutable_drivepos()->::DrivePos::MergeFrom(from._internal_drivepos());
  }
  if (from.activeprog() != 0) {
    _internal_set_activeprog(from._internal_activeprog());
  }
  if (from.runprog() != 0) {
    _internal_set_runprog(from._internal_runprog());
  }
  if (from.hasreachsingularity() != 0) {
    _internal_set_hasreachsingularity(from._internal_hasreachsingularity());
  }
}

void Server2Client::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Server2Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server2Client::CopyFrom(const Server2Client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Server2Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server2Client::IsInitialized() const {
  return true;
}

void Server2Client::InternalSwap(Server2Client* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inforeport_.InternalSwap(&other->inforeport_);
  swap(axispos_, other->axispos_);
  swap(cartpos_, other->cartpos_);
  swap(drivepos_, other->drivepos_);
  swap(activeprog_, other->activeprog_);
  swap(runprog_, other->runprog_);
  swap(hasreachsingularity_, other->hasreachsingularity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Server2Client::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AxisPos* Arena::CreateMaybeMessage< ::AxisPos >(Arena* arena) {
  return Arena::CreateInternal< ::AxisPos >(arena);
}
template<> PROTOBUF_NOINLINE ::CartPos* Arena::CreateMaybeMessage< ::CartPos >(Arena* arena) {
  return Arena::CreateInternal< ::CartPos >(arena);
}
template<> PROTOBUF_NOINLINE ::DrivePos* Arena::CreateMaybeMessage< ::DrivePos >(Arena* arena) {
  return Arena::CreateInternal< ::DrivePos >(arena);
}
template<> PROTOBUF_NOINLINE ::Dynamic* Arena::CreateMaybeMessage< ::Dynamic >(Arena* arena) {
  return Arena::CreateInternal< ::Dynamic >(arena);
}
template<> PROTOBUF_NOINLINE ::InfoReport* Arena::CreateMaybeMessage< ::InfoReport >(Arena* arena) {
  return Arena::CreateInternal< ::InfoReport >(arena);
}
template<> PROTOBUF_NOINLINE ::Client2Server* Arena::CreateMaybeMessage< ::Client2Server >(Arena* arena) {
  return Arena::CreateInternal< ::Client2Server >(arena);
}
template<> PROTOBUF_NOINLINE ::Server2Client* Arena::CreateMaybeMessage< ::Server2Client >(Arena* arena) {
  return Arena::CreateInternal< ::Server2Client >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
