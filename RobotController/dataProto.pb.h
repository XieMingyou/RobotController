// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dataProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dataProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dataProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dataProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dataProto_2eproto;
class AxisPos;
class AxisPosDefaultTypeInternal;
extern AxisPosDefaultTypeInternal _AxisPos_default_instance_;
class CartPos;
class CartPosDefaultTypeInternal;
extern CartPosDefaultTypeInternal _CartPos_default_instance_;
class Client2Server;
class Client2ServerDefaultTypeInternal;
extern Client2ServerDefaultTypeInternal _Client2Server_default_instance_;
class DrivePos;
class DrivePosDefaultTypeInternal;
extern DrivePosDefaultTypeInternal _DrivePos_default_instance_;
class Dynamic;
class DynamicDefaultTypeInternal;
extern DynamicDefaultTypeInternal _Dynamic_default_instance_;
class InfoReport;
class InfoReportDefaultTypeInternal;
extern InfoReportDefaultTypeInternal _InfoReport_default_instance_;
class Server2Client;
class Server2ClientDefaultTypeInternal;
extern Server2ClientDefaultTypeInternal _Server2Client_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AxisPos* Arena::CreateMaybeMessage<::AxisPos>(Arena*);
template<> ::CartPos* Arena::CreateMaybeMessage<::CartPos>(Arena*);
template<> ::Client2Server* Arena::CreateMaybeMessage<::Client2Server>(Arena*);
template<> ::DrivePos* Arena::CreateMaybeMessage<::DrivePos>(Arena*);
template<> ::Dynamic* Arena::CreateMaybeMessage<::Dynamic>(Arena*);
template<> ::InfoReport* Arena::CreateMaybeMessage<::InfoReport>(Arena*);
template<> ::Server2Client* Arena::CreateMaybeMessage<::Server2Client>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AxisPos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AxisPos) */ {
 public:
  AxisPos();
  virtual ~AxisPos();

  AxisPos(const AxisPos& from);
  AxisPos(AxisPos&& from) noexcept
    : AxisPos() {
    *this = ::std::move(from);
  }

  inline AxisPos& operator=(const AxisPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline AxisPos& operator=(AxisPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AxisPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisPos* internal_default_instance() {
    return reinterpret_cast<const AxisPos*>(
               &_AxisPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AxisPos& a, AxisPos& b) {
    a.Swap(&b);
  }
  inline void Swap(AxisPos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AxisPos* New() const final {
    return CreateMaybeMessage<AxisPos>(nullptr);
  }

  AxisPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AxisPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AxisPos& from);
  void MergeFrom(const AxisPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AxisPos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataProto_2eproto);
    return ::descriptor_table_dataProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kA1FieldNumber = 1,
    kA2FieldNumber = 2,
    kA3FieldNumber = 3,
    kA4FieldNumber = 4,
    kA5FieldNumber = 5,
    kA6FieldNumber = 6,
  };
  // double a1 = 1;
  void clear_a1();
  double a1() const;
  void set_a1(double value);
  private:
  double _internal_a1() const;
  void _internal_set_a1(double value);
  public:

  // double a2 = 2;
  void clear_a2();
  double a2() const;
  void set_a2(double value);
  private:
  double _internal_a2() const;
  void _internal_set_a2(double value);
  public:

  // double a3 = 3;
  void clear_a3();
  double a3() const;
  void set_a3(double value);
  private:
  double _internal_a3() const;
  void _internal_set_a3(double value);
  public:

  // double a4 = 4;
  void clear_a4();
  double a4() const;
  void set_a4(double value);
  private:
  double _internal_a4() const;
  void _internal_set_a4(double value);
  public:

  // double a5 = 5;
  void clear_a5();
  double a5() const;
  void set_a5(double value);
  private:
  double _internal_a5() const;
  void _internal_set_a5(double value);
  public:

  // double a6 = 6;
  void clear_a6();
  double a6() const;
  void set_a6(double value);
  private:
  double _internal_a6() const;
  void _internal_set_a6(double value);
  public:

  // @@protoc_insertion_point(class_scope:AxisPos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double a1_;
  double a2_;
  double a3_;
  double a4_;
  double a5_;
  double a6_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataProto_2eproto;
};
// -------------------------------------------------------------------

class CartPos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CartPos) */ {
 public:
  CartPos();
  virtual ~CartPos();

  CartPos(const CartPos& from);
  CartPos(CartPos&& from) noexcept
    : CartPos() {
    *this = ::std::move(from);
  }

  inline CartPos& operator=(const CartPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartPos& operator=(CartPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartPos* internal_default_instance() {
    return reinterpret_cast<const CartPos*>(
               &_CartPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CartPos& a, CartPos& b) {
    a.Swap(&b);
  }
  inline void Swap(CartPos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartPos* New() const final {
    return CreateMaybeMessage<CartPos>(nullptr);
  }

  CartPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartPos& from);
  void MergeFrom(const CartPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CartPos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataProto_2eproto);
    return ::descriptor_table_dataProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kAFieldNumber = 4,
    kBFieldNumber = 5,
    kCFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double a = 4;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // double b = 5;
  void clear_b();
  double b() const;
  void set_b(double value);
  private:
  double _internal_b() const;
  void _internal_set_b(double value);
  public:

  // double c = 6;
  void clear_c();
  double c() const;
  void set_c(double value);
  private:
  double _internal_c() const;
  void _internal_set_c(double value);
  public:

  // @@protoc_insertion_point(class_scope:CartPos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double a_;
  double b_;
  double c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataProto_2eproto;
};
// -------------------------------------------------------------------

class DrivePos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DrivePos) */ {
 public:
  DrivePos();
  virtual ~DrivePos();

  DrivePos(const DrivePos& from);
  DrivePos(DrivePos&& from) noexcept
    : DrivePos() {
    *this = ::std::move(from);
  }

  inline DrivePos& operator=(const DrivePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrivePos& operator=(DrivePos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrivePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrivePos* internal_default_instance() {
    return reinterpret_cast<const DrivePos*>(
               &_DrivePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DrivePos& a, DrivePos& b) {
    a.Swap(&b);
  }
  inline void Swap(DrivePos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrivePos* New() const final {
    return CreateMaybeMessage<DrivePos>(nullptr);
  }

  DrivePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrivePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrivePos& from);
  void MergeFrom(const DrivePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrivePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DrivePos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataProto_2eproto);
    return ::descriptor_table_dataProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kD1FieldNumber = 1,
    kD2FieldNumber = 2,
    kD3FieldNumber = 3,
    kD4FieldNumber = 4,
    kD5FieldNumber = 5,
    kD6FieldNumber = 6,
  };
  // double d1 = 1;
  void clear_d1();
  double d1() const;
  void set_d1(double value);
  private:
  double _internal_d1() const;
  void _internal_set_d1(double value);
  public:

  // double d2 = 2;
  void clear_d2();
  double d2() const;
  void set_d2(double value);
  private:
  double _internal_d2() const;
  void _internal_set_d2(double value);
  public:

  // double d3 = 3;
  void clear_d3();
  double d3() const;
  void set_d3(double value);
  private:
  double _internal_d3() const;
  void _internal_set_d3(double value);
  public:

  // double d4 = 4;
  void clear_d4();
  double d4() const;
  void set_d4(double value);
  private:
  double _internal_d4() const;
  void _internal_set_d4(double value);
  public:

  // double d5 = 5;
  void clear_d5();
  double d5() const;
  void set_d5(double value);
  private:
  double _internal_d5() const;
  void _internal_set_d5(double value);
  public:

  // double d6 = 6;
  void clear_d6();
  double d6() const;
  void set_d6(double value);
  private:
  double _internal_d6() const;
  void _internal_set_d6(double value);
  public:

  // @@protoc_insertion_point(class_scope:DrivePos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double d1_;
  double d2_;
  double d3_;
  double d4_;
  double d5_;
  double d6_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataProto_2eproto;
};
// -------------------------------------------------------------------

class Dynamic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Dynamic) */ {
 public:
  Dynamic();
  virtual ~Dynamic();

  Dynamic(const Dynamic& from);
  Dynamic(Dynamic&& from) noexcept
    : Dynamic() {
    *this = ::std::move(from);
  }

  inline Dynamic& operator=(const Dynamic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dynamic& operator=(Dynamic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dynamic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dynamic* internal_default_instance() {
    return reinterpret_cast<const Dynamic*>(
               &_Dynamic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Dynamic& a, Dynamic& b) {
    a.Swap(&b);
  }
  inline void Swap(Dynamic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dynamic* New() const final {
    return CreateMaybeMessage<Dynamic>(nullptr);
  }

  Dynamic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dynamic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dynamic& from);
  void MergeFrom(const Dynamic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dynamic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Dynamic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataProto_2eproto);
    return ::descriptor_table_dataProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelAxisFieldNumber = 1,
    kAccAxisFieldNumber = 2,
    kDecAxisFieldNumber = 3,
    kJerkAxisFieldNumber = 4,
    kVelPathFieldNumber = 5,
    kAccPathFieldNumber = 6,
    kDecPathFieldNumber = 7,
    kJerkPathFieldNumber = 8,
    kVelOriFieldNumber = 9,
    kAccOriFieldNumber = 10,
    kDecOriFieldNumber = 11,
    kJerkOriFieldNumber = 12,
  };
  // double velAxis = 1;
  void clear_velaxis();
  double velaxis() const;
  void set_velaxis(double value);
  private:
  double _internal_velaxis() const;
  void _internal_set_velaxis(double value);
  public:

  // double accAxis = 2;
  void clear_accaxis();
  double accaxis() const;
  void set_accaxis(double value);
  private:
  double _internal_accaxis() const;
  void _internal_set_accaxis(double value);
  public:

  // double decAxis = 3;
  void clear_decaxis();
  double decaxis() const;
  void set_decaxis(double value);
  private:
  double _internal_decaxis() const;
  void _internal_set_decaxis(double value);
  public:

  // double jerkAxis = 4;
  void clear_jerkaxis();
  double jerkaxis() const;
  void set_jerkaxis(double value);
  private:
  double _internal_jerkaxis() const;
  void _internal_set_jerkaxis(double value);
  public:

  // double velPath = 5;
  void clear_velpath();
  double velpath() const;
  void set_velpath(double value);
  private:
  double _internal_velpath() const;
  void _internal_set_velpath(double value);
  public:

  // double accPath = 6;
  void clear_accpath();
  double accpath() const;
  void set_accpath(double value);
  private:
  double _internal_accpath() const;
  void _internal_set_accpath(double value);
  public:

  // double decPath = 7;
  void clear_decpath();
  double decpath() const;
  void set_decpath(double value);
  private:
  double _internal_decpath() const;
  void _internal_set_decpath(double value);
  public:

  // double jerkPath = 8;
  void clear_jerkpath();
  double jerkpath() const;
  void set_jerkpath(double value);
  private:
  double _internal_jerkpath() const;
  void _internal_set_jerkpath(double value);
  public:

  // double velOri = 9;
  void clear_velori();
  double velori() const;
  void set_velori(double value);
  private:
  double _internal_velori() const;
  void _internal_set_velori(double value);
  public:

  // double accOri = 10;
  void clear_accori();
  double accori() const;
  void set_accori(double value);
  private:
  double _internal_accori() const;
  void _internal_set_accori(double value);
  public:

  // double decOri = 11;
  void clear_decori();
  double decori() const;
  void set_decori(double value);
  private:
  double _internal_decori() const;
  void _internal_set_decori(double value);
  public:

  // double jerkOri = 12;
  void clear_jerkori();
  double jerkori() const;
  void set_jerkori(double value);
  private:
  double _internal_jerkori() const;
  void _internal_set_jerkori(double value);
  public:

  // @@protoc_insertion_point(class_scope:Dynamic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double velaxis_;
  double accaxis_;
  double decaxis_;
  double jerkaxis_;
  double velpath_;
  double accpath_;
  double decpath_;
  double jerkpath_;
  double velori_;
  double accori_;
  double decori_;
  double jerkori_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataProto_2eproto;
};
// -------------------------------------------------------------------

class InfoReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InfoReport) */ {
 public:
  InfoReport();
  virtual ~InfoReport();

  InfoReport(const InfoReport& from);
  InfoReport(InfoReport&& from) noexcept
    : InfoReport() {
    *this = ::std::move(from);
  }

  inline InfoReport& operator=(const InfoReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoReport& operator=(InfoReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfoReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoReport* internal_default_instance() {
    return reinterpret_cast<const InfoReport*>(
               &_InfoReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InfoReport& a, InfoReport& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoReport* New() const final {
    return CreateMaybeMessage<InfoReport>(nullptr);
  }

  InfoReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfoReport& from);
  void MergeFrom(const InfoReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InfoReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataProto_2eproto);
    return ::descriptor_table_dataProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InfoReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataProto_2eproto;
};
// -------------------------------------------------------------------

class Client2Server :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Client2Server) */ {
 public:
  Client2Server();
  virtual ~Client2Server();

  Client2Server(const Client2Server& from);
  Client2Server(Client2Server&& from) noexcept
    : Client2Server() {
    *this = ::std::move(from);
  }

  inline Client2Server& operator=(const Client2Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client2Server& operator=(Client2Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client2Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client2Server* internal_default_instance() {
    return reinterpret_cast<const Client2Server*>(
               &_Client2Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Client2Server& a, Client2Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Client2Server* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client2Server* New() const final {
    return CreateMaybeMessage<Client2Server>(nullptr);
  }

  Client2Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client2Server>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client2Server& from);
  void MergeFrom(const Client2Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client2Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Client2Server";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataProto_2eproto);
    return ::descriptor_table_dataProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjNameFieldNumber = 14,
    kVarProgNameFieldNumber = 15,
    kEmergeStopFieldNumber = 1,
    kEnableStateFieldNumber = 2,
    kOperateModeFieldNumber = 3,
    kActiveStateFieldNumber = 4,
    kRunStateFieldNumber = 5,
    kStepFieldNumber = 6,
    kJogFieldNumber = 7,
    kCoordinateFieldNumber = 8,
    kUpOrDownFieldNumber = 9,
    kOvrFieldNumber = 10,
    kProgLineFieldNumber = 11,
    kTransferZipFieldNumber = 12,
    kZipSizeFieldNumber = 13,
  };
  // string projName = 14;
  void clear_projname();
  const std::string& projname() const;
  void set_projname(const std::string& value);
  void set_projname(std::string&& value);
  void set_projname(const char* value);
  void set_projname(const char* value, size_t size);
  std::string* mutable_projname();
  std::string* release_projname();
  void set_allocated_projname(std::string* projname);
  private:
  const std::string& _internal_projname() const;
  void _internal_set_projname(const std::string& value);
  std::string* _internal_mutable_projname();
  public:

  // string varProgName = 15;
  void clear_varprogname();
  const std::string& varprogname() const;
  void set_varprogname(const std::string& value);
  void set_varprogname(std::string&& value);
  void set_varprogname(const char* value);
  void set_varprogname(const char* value, size_t size);
  std::string* mutable_varprogname();
  std::string* release_varprogname();
  void set_allocated_varprogname(std::string* varprogname);
  private:
  const std::string& _internal_varprogname() const;
  void _internal_set_varprogname(const std::string& value);
  std::string* _internal_mutable_varprogname();
  public:

  // int32 emergeStop = 1;
  void clear_emergestop();
  ::PROTOBUF_NAMESPACE_ID::int32 emergestop() const;
  void set_emergestop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_emergestop() const;
  void _internal_set_emergestop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enableState = 2;
  void clear_enablestate();
  ::PROTOBUF_NAMESPACE_ID::int32 enablestate() const;
  void set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enablestate() const;
  void _internal_set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 operateMode = 3;
  void clear_operatemode();
  ::PROTOBUF_NAMESPACE_ID::int32 operatemode() const;
  void set_operatemode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operatemode() const;
  void _internal_set_operatemode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activeState = 4;
  void clear_activestate();
  ::PROTOBUF_NAMESPACE_ID::int32 activestate() const;
  void set_activestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activestate() const;
  void _internal_set_activestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 runState = 5;
  void clear_runstate();
  ::PROTOBUF_NAMESPACE_ID::int32 runstate() const;
  void set_runstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runstate() const;
  void _internal_set_runstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 step = 6;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 jog = 7;
  void clear_jog();
  ::PROTOBUF_NAMESPACE_ID::int32 jog() const;
  void set_jog(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jog() const;
  void _internal_set_jog(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 coordinate = 8;
  void clear_coordinate();
  ::PROTOBUF_NAMESPACE_ID::int32 coordinate() const;
  void set_coordinate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coordinate() const;
  void _internal_set_coordinate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 upOrDown = 9;
  void clear_upordown();
  ::PROTOBUF_NAMESPACE_ID::int32 upordown() const;
  void set_upordown(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upordown() const;
  void _internal_set_upordown(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ovr = 10;
  void clear_ovr();
  ::PROTOBUF_NAMESPACE_ID::int32 ovr() const;
  void set_ovr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ovr() const;
  void _internal_set_ovr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 progLine = 11;
  void clear_progline();
  ::PROTOBUF_NAMESPACE_ID::int32 progline() const;
  void set_progline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progline() const;
  void _internal_set_progline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 transferZip = 12;
  void clear_transferzip();
  ::PROTOBUF_NAMESPACE_ID::int32 transferzip() const;
  void set_transferzip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transferzip() const;
  void _internal_set_transferzip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 zipSize = 13;
  void clear_zipsize();
  ::PROTOBUF_NAMESPACE_ID::int32 zipsize() const;
  void set_zipsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zipsize() const;
  void _internal_set_zipsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Client2Server)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr varprogname_;
  ::PROTOBUF_NAMESPACE_ID::int32 emergestop_;
  ::PROTOBUF_NAMESPACE_ID::int32 enablestate_;
  ::PROTOBUF_NAMESPACE_ID::int32 operatemode_;
  ::PROTOBUF_NAMESPACE_ID::int32 activestate_;
  ::PROTOBUF_NAMESPACE_ID::int32 runstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_;
  ::PROTOBUF_NAMESPACE_ID::int32 jog_;
  ::PROTOBUF_NAMESPACE_ID::int32 coordinate_;
  ::PROTOBUF_NAMESPACE_ID::int32 upordown_;
  ::PROTOBUF_NAMESPACE_ID::int32 ovr_;
  ::PROTOBUF_NAMESPACE_ID::int32 progline_;
  ::PROTOBUF_NAMESPACE_ID::int32 transferzip_;
  ::PROTOBUF_NAMESPACE_ID::int32 zipsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataProto_2eproto;
};
// -------------------------------------------------------------------

class Server2Client :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server2Client) */ {
 public:
  Server2Client();
  virtual ~Server2Client();

  Server2Client(const Server2Client& from);
  Server2Client(Server2Client&& from) noexcept
    : Server2Client() {
    *this = ::std::move(from);
  }

  inline Server2Client& operator=(const Server2Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server2Client& operator=(Server2Client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server2Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server2Client* internal_default_instance() {
    return reinterpret_cast<const Server2Client*>(
               &_Server2Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Server2Client& a, Server2Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Server2Client* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server2Client* New() const final {
    return CreateMaybeMessage<Server2Client>(nullptr);
  }

  Server2Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server2Client>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server2Client& from);
  void MergeFrom(const Server2Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server2Client* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server2Client";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataProto_2eproto);
    return ::descriptor_table_dataProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoReportFieldNumber = 7,
    kAxisPosFieldNumber = 1,
    kCartPosFieldNumber = 2,
    kDrivePosFieldNumber = 3,
    kActiveProgFieldNumber = 4,
    kRunProgFieldNumber = 5,
    kHasReachSingularityFieldNumber = 6,
  };
  // repeated .InfoReport infoReport = 7;
  int inforeport_size() const;
  private:
  int _internal_inforeport_size() const;
  public:
  void clear_inforeport();
  ::InfoReport* mutable_inforeport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoReport >*
      mutable_inforeport();
  private:
  const ::InfoReport& _internal_inforeport(int index) const;
  ::InfoReport* _internal_add_inforeport();
  public:
  const ::InfoReport& inforeport(int index) const;
  ::InfoReport* add_inforeport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoReport >&
      inforeport() const;

  // .AxisPos axisPos = 1;
  bool has_axispos() const;
  private:
  bool _internal_has_axispos() const;
  public:
  void clear_axispos();
  const ::AxisPos& axispos() const;
  ::AxisPos* release_axispos();
  ::AxisPos* mutable_axispos();
  void set_allocated_axispos(::AxisPos* axispos);
  private:
  const ::AxisPos& _internal_axispos() const;
  ::AxisPos* _internal_mutable_axispos();
  public:

  // .CartPos cartPos = 2;
  bool has_cartpos() const;
  private:
  bool _internal_has_cartpos() const;
  public:
  void clear_cartpos();
  const ::CartPos& cartpos() const;
  ::CartPos* release_cartpos();
  ::CartPos* mutable_cartpos();
  void set_allocated_cartpos(::CartPos* cartpos);
  private:
  const ::CartPos& _internal_cartpos() const;
  ::CartPos* _internal_mutable_cartpos();
  public:

  // .DrivePos drivePos = 3;
  bool has_drivepos() const;
  private:
  bool _internal_has_drivepos() const;
  public:
  void clear_drivepos();
  const ::DrivePos& drivepos() const;
  ::DrivePos* release_drivepos();
  ::DrivePos* mutable_drivepos();
  void set_allocated_drivepos(::DrivePos* drivepos);
  private:
  const ::DrivePos& _internal_drivepos() const;
  ::DrivePos* _internal_mutable_drivepos();
  public:

  // int32 activeProg = 4;
  void clear_activeprog();
  ::PROTOBUF_NAMESPACE_ID::int32 activeprog() const;
  void set_activeprog(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activeprog() const;
  void _internal_set_activeprog(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 runProg = 5;
  void clear_runprog();
  ::PROTOBUF_NAMESPACE_ID::int32 runprog() const;
  void set_runprog(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runprog() const;
  void _internal_set_runprog(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hasReachSingularity = 6;
  void clear_hasreachsingularity();
  ::PROTOBUF_NAMESPACE_ID::int32 hasreachsingularity() const;
  void set_hasreachsingularity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hasreachsingularity() const;
  void _internal_set_hasreachsingularity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Server2Client)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoReport > inforeport_;
  ::AxisPos* axispos_;
  ::CartPos* cartpos_;
  ::DrivePos* drivepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 activeprog_;
  ::PROTOBUF_NAMESPACE_ID::int32 runprog_;
  ::PROTOBUF_NAMESPACE_ID::int32 hasreachsingularity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AxisPos

// double a1 = 1;
inline void AxisPos::clear_a1() {
  a1_ = 0;
}
inline double AxisPos::_internal_a1() const {
  return a1_;
}
inline double AxisPos::a1() const {
  // @@protoc_insertion_point(field_get:AxisPos.a1)
  return _internal_a1();
}
inline void AxisPos::_internal_set_a1(double value) {
  
  a1_ = value;
}
inline void AxisPos::set_a1(double value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:AxisPos.a1)
}

// double a2 = 2;
inline void AxisPos::clear_a2() {
  a2_ = 0;
}
inline double AxisPos::_internal_a2() const {
  return a2_;
}
inline double AxisPos::a2() const {
  // @@protoc_insertion_point(field_get:AxisPos.a2)
  return _internal_a2();
}
inline void AxisPos::_internal_set_a2(double value) {
  
  a2_ = value;
}
inline void AxisPos::set_a2(double value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:AxisPos.a2)
}

// double a3 = 3;
inline void AxisPos::clear_a3() {
  a3_ = 0;
}
inline double AxisPos::_internal_a3() const {
  return a3_;
}
inline double AxisPos::a3() const {
  // @@protoc_insertion_point(field_get:AxisPos.a3)
  return _internal_a3();
}
inline void AxisPos::_internal_set_a3(double value) {
  
  a3_ = value;
}
inline void AxisPos::set_a3(double value) {
  _internal_set_a3(value);
  // @@protoc_insertion_point(field_set:AxisPos.a3)
}

// double a4 = 4;
inline void AxisPos::clear_a4() {
  a4_ = 0;
}
inline double AxisPos::_internal_a4() const {
  return a4_;
}
inline double AxisPos::a4() const {
  // @@protoc_insertion_point(field_get:AxisPos.a4)
  return _internal_a4();
}
inline void AxisPos::_internal_set_a4(double value) {
  
  a4_ = value;
}
inline void AxisPos::set_a4(double value) {
  _internal_set_a4(value);
  // @@protoc_insertion_point(field_set:AxisPos.a4)
}

// double a5 = 5;
inline void AxisPos::clear_a5() {
  a5_ = 0;
}
inline double AxisPos::_internal_a5() const {
  return a5_;
}
inline double AxisPos::a5() const {
  // @@protoc_insertion_point(field_get:AxisPos.a5)
  return _internal_a5();
}
inline void AxisPos::_internal_set_a5(double value) {
  
  a5_ = value;
}
inline void AxisPos::set_a5(double value) {
  _internal_set_a5(value);
  // @@protoc_insertion_point(field_set:AxisPos.a5)
}

// double a6 = 6;
inline void AxisPos::clear_a6() {
  a6_ = 0;
}
inline double AxisPos::_internal_a6() const {
  return a6_;
}
inline double AxisPos::a6() const {
  // @@protoc_insertion_point(field_get:AxisPos.a6)
  return _internal_a6();
}
inline void AxisPos::_internal_set_a6(double value) {
  
  a6_ = value;
}
inline void AxisPos::set_a6(double value) {
  _internal_set_a6(value);
  // @@protoc_insertion_point(field_set:AxisPos.a6)
}

// -------------------------------------------------------------------

// CartPos

// double x = 1;
inline void CartPos::clear_x() {
  x_ = 0;
}
inline double CartPos::_internal_x() const {
  return x_;
}
inline double CartPos::x() const {
  // @@protoc_insertion_point(field_get:CartPos.x)
  return _internal_x();
}
inline void CartPos::_internal_set_x(double value) {
  
  x_ = value;
}
inline void CartPos::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CartPos.x)
}

// double y = 2;
inline void CartPos::clear_y() {
  y_ = 0;
}
inline double CartPos::_internal_y() const {
  return y_;
}
inline double CartPos::y() const {
  // @@protoc_insertion_point(field_get:CartPos.y)
  return _internal_y();
}
inline void CartPos::_internal_set_y(double value) {
  
  y_ = value;
}
inline void CartPos::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CartPos.y)
}

// double z = 3;
inline void CartPos::clear_z() {
  z_ = 0;
}
inline double CartPos::_internal_z() const {
  return z_;
}
inline double CartPos::z() const {
  // @@protoc_insertion_point(field_get:CartPos.z)
  return _internal_z();
}
inline void CartPos::_internal_set_z(double value) {
  
  z_ = value;
}
inline void CartPos::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CartPos.z)
}

// double a = 4;
inline void CartPos::clear_a() {
  a_ = 0;
}
inline double CartPos::_internal_a() const {
  return a_;
}
inline double CartPos::a() const {
  // @@protoc_insertion_point(field_get:CartPos.a)
  return _internal_a();
}
inline void CartPos::_internal_set_a(double value) {
  
  a_ = value;
}
inline void CartPos::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:CartPos.a)
}

// double b = 5;
inline void CartPos::clear_b() {
  b_ = 0;
}
inline double CartPos::_internal_b() const {
  return b_;
}
inline double CartPos::b() const {
  // @@protoc_insertion_point(field_get:CartPos.b)
  return _internal_b();
}
inline void CartPos::_internal_set_b(double value) {
  
  b_ = value;
}
inline void CartPos::set_b(double value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:CartPos.b)
}

// double c = 6;
inline void CartPos::clear_c() {
  c_ = 0;
}
inline double CartPos::_internal_c() const {
  return c_;
}
inline double CartPos::c() const {
  // @@protoc_insertion_point(field_get:CartPos.c)
  return _internal_c();
}
inline void CartPos::_internal_set_c(double value) {
  
  c_ = value;
}
inline void CartPos::set_c(double value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:CartPos.c)
}

// -------------------------------------------------------------------

// DrivePos

// double d1 = 1;
inline void DrivePos::clear_d1() {
  d1_ = 0;
}
inline double DrivePos::_internal_d1() const {
  return d1_;
}
inline double DrivePos::d1() const {
  // @@protoc_insertion_point(field_get:DrivePos.d1)
  return _internal_d1();
}
inline void DrivePos::_internal_set_d1(double value) {
  
  d1_ = value;
}
inline void DrivePos::set_d1(double value) {
  _internal_set_d1(value);
  // @@protoc_insertion_point(field_set:DrivePos.d1)
}

// double d2 = 2;
inline void DrivePos::clear_d2() {
  d2_ = 0;
}
inline double DrivePos::_internal_d2() const {
  return d2_;
}
inline double DrivePos::d2() const {
  // @@protoc_insertion_point(field_get:DrivePos.d2)
  return _internal_d2();
}
inline void DrivePos::_internal_set_d2(double value) {
  
  d2_ = value;
}
inline void DrivePos::set_d2(double value) {
  _internal_set_d2(value);
  // @@protoc_insertion_point(field_set:DrivePos.d2)
}

// double d3 = 3;
inline void DrivePos::clear_d3() {
  d3_ = 0;
}
inline double DrivePos::_internal_d3() const {
  return d3_;
}
inline double DrivePos::d3() const {
  // @@protoc_insertion_point(field_get:DrivePos.d3)
  return _internal_d3();
}
inline void DrivePos::_internal_set_d3(double value) {
  
  d3_ = value;
}
inline void DrivePos::set_d3(double value) {
  _internal_set_d3(value);
  // @@protoc_insertion_point(field_set:DrivePos.d3)
}

// double d4 = 4;
inline void DrivePos::clear_d4() {
  d4_ = 0;
}
inline double DrivePos::_internal_d4() const {
  return d4_;
}
inline double DrivePos::d4() const {
  // @@protoc_insertion_point(field_get:DrivePos.d4)
  return _internal_d4();
}
inline void DrivePos::_internal_set_d4(double value) {
  
  d4_ = value;
}
inline void DrivePos::set_d4(double value) {
  _internal_set_d4(value);
  // @@protoc_insertion_point(field_set:DrivePos.d4)
}

// double d5 = 5;
inline void DrivePos::clear_d5() {
  d5_ = 0;
}
inline double DrivePos::_internal_d5() const {
  return d5_;
}
inline double DrivePos::d5() const {
  // @@protoc_insertion_point(field_get:DrivePos.d5)
  return _internal_d5();
}
inline void DrivePos::_internal_set_d5(double value) {
  
  d5_ = value;
}
inline void DrivePos::set_d5(double value) {
  _internal_set_d5(value);
  // @@protoc_insertion_point(field_set:DrivePos.d5)
}

// double d6 = 6;
inline void DrivePos::clear_d6() {
  d6_ = 0;
}
inline double DrivePos::_internal_d6() const {
  return d6_;
}
inline double DrivePos::d6() const {
  // @@protoc_insertion_point(field_get:DrivePos.d6)
  return _internal_d6();
}
inline void DrivePos::_internal_set_d6(double value) {
  
  d6_ = value;
}
inline void DrivePos::set_d6(double value) {
  _internal_set_d6(value);
  // @@protoc_insertion_point(field_set:DrivePos.d6)
}

// -------------------------------------------------------------------

// Dynamic

// double velAxis = 1;
inline void Dynamic::clear_velaxis() {
  velaxis_ = 0;
}
inline double Dynamic::_internal_velaxis() const {
  return velaxis_;
}
inline double Dynamic::velaxis() const {
  // @@protoc_insertion_point(field_get:Dynamic.velAxis)
  return _internal_velaxis();
}
inline void Dynamic::_internal_set_velaxis(double value) {
  
  velaxis_ = value;
}
inline void Dynamic::set_velaxis(double value) {
  _internal_set_velaxis(value);
  // @@protoc_insertion_point(field_set:Dynamic.velAxis)
}

// double accAxis = 2;
inline void Dynamic::clear_accaxis() {
  accaxis_ = 0;
}
inline double Dynamic::_internal_accaxis() const {
  return accaxis_;
}
inline double Dynamic::accaxis() const {
  // @@protoc_insertion_point(field_get:Dynamic.accAxis)
  return _internal_accaxis();
}
inline void Dynamic::_internal_set_accaxis(double value) {
  
  accaxis_ = value;
}
inline void Dynamic::set_accaxis(double value) {
  _internal_set_accaxis(value);
  // @@protoc_insertion_point(field_set:Dynamic.accAxis)
}

// double decAxis = 3;
inline void Dynamic::clear_decaxis() {
  decaxis_ = 0;
}
inline double Dynamic::_internal_decaxis() const {
  return decaxis_;
}
inline double Dynamic::decaxis() const {
  // @@protoc_insertion_point(field_get:Dynamic.decAxis)
  return _internal_decaxis();
}
inline void Dynamic::_internal_set_decaxis(double value) {
  
  decaxis_ = value;
}
inline void Dynamic::set_decaxis(double value) {
  _internal_set_decaxis(value);
  // @@protoc_insertion_point(field_set:Dynamic.decAxis)
}

// double jerkAxis = 4;
inline void Dynamic::clear_jerkaxis() {
  jerkaxis_ = 0;
}
inline double Dynamic::_internal_jerkaxis() const {
  return jerkaxis_;
}
inline double Dynamic::jerkaxis() const {
  // @@protoc_insertion_point(field_get:Dynamic.jerkAxis)
  return _internal_jerkaxis();
}
inline void Dynamic::_internal_set_jerkaxis(double value) {
  
  jerkaxis_ = value;
}
inline void Dynamic::set_jerkaxis(double value) {
  _internal_set_jerkaxis(value);
  // @@protoc_insertion_point(field_set:Dynamic.jerkAxis)
}

// double velPath = 5;
inline void Dynamic::clear_velpath() {
  velpath_ = 0;
}
inline double Dynamic::_internal_velpath() const {
  return velpath_;
}
inline double Dynamic::velpath() const {
  // @@protoc_insertion_point(field_get:Dynamic.velPath)
  return _internal_velpath();
}
inline void Dynamic::_internal_set_velpath(double value) {
  
  velpath_ = value;
}
inline void Dynamic::set_velpath(double value) {
  _internal_set_velpath(value);
  // @@protoc_insertion_point(field_set:Dynamic.velPath)
}

// double accPath = 6;
inline void Dynamic::clear_accpath() {
  accpath_ = 0;
}
inline double Dynamic::_internal_accpath() const {
  return accpath_;
}
inline double Dynamic::accpath() const {
  // @@protoc_insertion_point(field_get:Dynamic.accPath)
  return _internal_accpath();
}
inline void Dynamic::_internal_set_accpath(double value) {
  
  accpath_ = value;
}
inline void Dynamic::set_accpath(double value) {
  _internal_set_accpath(value);
  // @@protoc_insertion_point(field_set:Dynamic.accPath)
}

// double decPath = 7;
inline void Dynamic::clear_decpath() {
  decpath_ = 0;
}
inline double Dynamic::_internal_decpath() const {
  return decpath_;
}
inline double Dynamic::decpath() const {
  // @@protoc_insertion_point(field_get:Dynamic.decPath)
  return _internal_decpath();
}
inline void Dynamic::_internal_set_decpath(double value) {
  
  decpath_ = value;
}
inline void Dynamic::set_decpath(double value) {
  _internal_set_decpath(value);
  // @@protoc_insertion_point(field_set:Dynamic.decPath)
}

// double jerkPath = 8;
inline void Dynamic::clear_jerkpath() {
  jerkpath_ = 0;
}
inline double Dynamic::_internal_jerkpath() const {
  return jerkpath_;
}
inline double Dynamic::jerkpath() const {
  // @@protoc_insertion_point(field_get:Dynamic.jerkPath)
  return _internal_jerkpath();
}
inline void Dynamic::_internal_set_jerkpath(double value) {
  
  jerkpath_ = value;
}
inline void Dynamic::set_jerkpath(double value) {
  _internal_set_jerkpath(value);
  // @@protoc_insertion_point(field_set:Dynamic.jerkPath)
}

// double velOri = 9;
inline void Dynamic::clear_velori() {
  velori_ = 0;
}
inline double Dynamic::_internal_velori() const {
  return velori_;
}
inline double Dynamic::velori() const {
  // @@protoc_insertion_point(field_get:Dynamic.velOri)
  return _internal_velori();
}
inline void Dynamic::_internal_set_velori(double value) {
  
  velori_ = value;
}
inline void Dynamic::set_velori(double value) {
  _internal_set_velori(value);
  // @@protoc_insertion_point(field_set:Dynamic.velOri)
}

// double accOri = 10;
inline void Dynamic::clear_accori() {
  accori_ = 0;
}
inline double Dynamic::_internal_accori() const {
  return accori_;
}
inline double Dynamic::accori() const {
  // @@protoc_insertion_point(field_get:Dynamic.accOri)
  return _internal_accori();
}
inline void Dynamic::_internal_set_accori(double value) {
  
  accori_ = value;
}
inline void Dynamic::set_accori(double value) {
  _internal_set_accori(value);
  // @@protoc_insertion_point(field_set:Dynamic.accOri)
}

// double decOri = 11;
inline void Dynamic::clear_decori() {
  decori_ = 0;
}
inline double Dynamic::_internal_decori() const {
  return decori_;
}
inline double Dynamic::decori() const {
  // @@protoc_insertion_point(field_get:Dynamic.decOri)
  return _internal_decori();
}
inline void Dynamic::_internal_set_decori(double value) {
  
  decori_ = value;
}
inline void Dynamic::set_decori(double value) {
  _internal_set_decori(value);
  // @@protoc_insertion_point(field_set:Dynamic.decOri)
}

// double jerkOri = 12;
inline void Dynamic::clear_jerkori() {
  jerkori_ = 0;
}
inline double Dynamic::_internal_jerkori() const {
  return jerkori_;
}
inline double Dynamic::jerkori() const {
  // @@protoc_insertion_point(field_get:Dynamic.jerkOri)
  return _internal_jerkori();
}
inline void Dynamic::_internal_set_jerkori(double value) {
  
  jerkori_ = value;
}
inline void Dynamic::set_jerkori(double value) {
  _internal_set_jerkori(value);
  // @@protoc_insertion_point(field_set:Dynamic.jerkOri)
}

// -------------------------------------------------------------------

// InfoReport

// int32 level = 1;
inline void InfoReport::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InfoReport::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InfoReport::level() const {
  // @@protoc_insertion_point(field_get:InfoReport.level)
  return _internal_level();
}
inline void InfoReport::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void InfoReport::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:InfoReport.level)
}

// string content = 2;
inline void InfoReport::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InfoReport::content() const {
  // @@protoc_insertion_point(field_get:InfoReport.content)
  return _internal_content();
}
inline void InfoReport::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:InfoReport.content)
}
inline std::string* InfoReport::mutable_content() {
  // @@protoc_insertion_point(field_mutable:InfoReport.content)
  return _internal_mutable_content();
}
inline const std::string& InfoReport::_internal_content() const {
  return content_.GetNoArena();
}
inline void InfoReport::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InfoReport::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InfoReport.content)
}
inline void InfoReport::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InfoReport.content)
}
inline void InfoReport::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InfoReport.content)
}
inline std::string* InfoReport::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InfoReport::release_content() {
  // @@protoc_insertion_point(field_release:InfoReport.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InfoReport::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:InfoReport.content)
}

// -------------------------------------------------------------------

// Client2Server

// int32 emergeStop = 1;
inline void Client2Server::clear_emergestop() {
  emergestop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_emergestop() const {
  return emergestop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::emergestop() const {
  // @@protoc_insertion_point(field_get:Client2Server.emergeStop)
  return _internal_emergestop();
}
inline void Client2Server::_internal_set_emergestop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  emergestop_ = value;
}
inline void Client2Server::set_emergestop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_emergestop(value);
  // @@protoc_insertion_point(field_set:Client2Server.emergeStop)
}

// int32 enableState = 2;
inline void Client2Server::clear_enablestate() {
  enablestate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_enablestate() const {
  return enablestate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::enablestate() const {
  // @@protoc_insertion_point(field_get:Client2Server.enableState)
  return _internal_enablestate();
}
inline void Client2Server::_internal_set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enablestate_ = value;
}
inline void Client2Server::set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enablestate(value);
  // @@protoc_insertion_point(field_set:Client2Server.enableState)
}

// int32 operateMode = 3;
inline void Client2Server::clear_operatemode() {
  operatemode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_operatemode() const {
  return operatemode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::operatemode() const {
  // @@protoc_insertion_point(field_get:Client2Server.operateMode)
  return _internal_operatemode();
}
inline void Client2Server::_internal_set_operatemode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operatemode_ = value;
}
inline void Client2Server::set_operatemode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operatemode(value);
  // @@protoc_insertion_point(field_set:Client2Server.operateMode)
}

// int32 activeState = 4;
inline void Client2Server::clear_activestate() {
  activestate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_activestate() const {
  return activestate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::activestate() const {
  // @@protoc_insertion_point(field_get:Client2Server.activeState)
  return _internal_activestate();
}
inline void Client2Server::_internal_set_activestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activestate_ = value;
}
inline void Client2Server::set_activestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activestate(value);
  // @@protoc_insertion_point(field_set:Client2Server.activeState)
}

// int32 runState = 5;
inline void Client2Server::clear_runstate() {
  runstate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_runstate() const {
  return runstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::runstate() const {
  // @@protoc_insertion_point(field_get:Client2Server.runState)
  return _internal_runstate();
}
inline void Client2Server::_internal_set_runstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runstate_ = value;
}
inline void Client2Server::set_runstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runstate(value);
  // @@protoc_insertion_point(field_set:Client2Server.runState)
}

// int32 step = 6;
inline void Client2Server::clear_step() {
  step_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::step() const {
  // @@protoc_insertion_point(field_get:Client2Server.step)
  return _internal_step();
}
inline void Client2Server::_internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_ = value;
}
inline void Client2Server::set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:Client2Server.step)
}

// int32 jog = 7;
inline void Client2Server::clear_jog() {
  jog_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_jog() const {
  return jog_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::jog() const {
  // @@protoc_insertion_point(field_get:Client2Server.jog)
  return _internal_jog();
}
inline void Client2Server::_internal_set_jog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jog_ = value;
}
inline void Client2Server::set_jog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jog(value);
  // @@protoc_insertion_point(field_set:Client2Server.jog)
}

// int32 coordinate = 8;
inline void Client2Server::clear_coordinate() {
  coordinate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_coordinate() const {
  return coordinate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::coordinate() const {
  // @@protoc_insertion_point(field_get:Client2Server.coordinate)
  return _internal_coordinate();
}
inline void Client2Server::_internal_set_coordinate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coordinate_ = value;
}
inline void Client2Server::set_coordinate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coordinate(value);
  // @@protoc_insertion_point(field_set:Client2Server.coordinate)
}

// int32 upOrDown = 9;
inline void Client2Server::clear_upordown() {
  upordown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_upordown() const {
  return upordown_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::upordown() const {
  // @@protoc_insertion_point(field_get:Client2Server.upOrDown)
  return _internal_upordown();
}
inline void Client2Server::_internal_set_upordown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  upordown_ = value;
}
inline void Client2Server::set_upordown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upordown(value);
  // @@protoc_insertion_point(field_set:Client2Server.upOrDown)
}

// int32 ovr = 10;
inline void Client2Server::clear_ovr() {
  ovr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_ovr() const {
  return ovr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::ovr() const {
  // @@protoc_insertion_point(field_get:Client2Server.ovr)
  return _internal_ovr();
}
inline void Client2Server::_internal_set_ovr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ovr_ = value;
}
inline void Client2Server::set_ovr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ovr(value);
  // @@protoc_insertion_point(field_set:Client2Server.ovr)
}

// int32 progLine = 11;
inline void Client2Server::clear_progline() {
  progline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_progline() const {
  return progline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::progline() const {
  // @@protoc_insertion_point(field_get:Client2Server.progLine)
  return _internal_progline();
}
inline void Client2Server::_internal_set_progline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progline_ = value;
}
inline void Client2Server::set_progline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progline(value);
  // @@protoc_insertion_point(field_set:Client2Server.progLine)
}

// int32 transferZip = 12;
inline void Client2Server::clear_transferzip() {
  transferzip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_transferzip() const {
  return transferzip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::transferzip() const {
  // @@protoc_insertion_point(field_get:Client2Server.transferZip)
  return _internal_transferzip();
}
inline void Client2Server::_internal_set_transferzip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transferzip_ = value;
}
inline void Client2Server::set_transferzip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transferzip(value);
  // @@protoc_insertion_point(field_set:Client2Server.transferZip)
}

// int32 zipSize = 13;
inline void Client2Server::clear_zipsize() {
  zipsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::_internal_zipsize() const {
  return zipsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client2Server::zipsize() const {
  // @@protoc_insertion_point(field_get:Client2Server.zipSize)
  return _internal_zipsize();
}
inline void Client2Server::_internal_set_zipsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zipsize_ = value;
}
inline void Client2Server::set_zipsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zipsize(value);
  // @@protoc_insertion_point(field_set:Client2Server.zipSize)
}

// string projName = 14;
inline void Client2Server::clear_projname() {
  projname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client2Server::projname() const {
  // @@protoc_insertion_point(field_get:Client2Server.projName)
  return _internal_projname();
}
inline void Client2Server::set_projname(const std::string& value) {
  _internal_set_projname(value);
  // @@protoc_insertion_point(field_set:Client2Server.projName)
}
inline std::string* Client2Server::mutable_projname() {
  // @@protoc_insertion_point(field_mutable:Client2Server.projName)
  return _internal_mutable_projname();
}
inline const std::string& Client2Server::_internal_projname() const {
  return projname_.GetNoArena();
}
inline void Client2Server::_internal_set_projname(const std::string& value) {
  
  projname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client2Server::set_projname(std::string&& value) {
  
  projname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client2Server.projName)
}
inline void Client2Server::set_projname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  projname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client2Server.projName)
}
inline void Client2Server::set_projname(const char* value, size_t size) {
  
  projname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client2Server.projName)
}
inline std::string* Client2Server::_internal_mutable_projname() {
  
  return projname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client2Server::release_projname() {
  // @@protoc_insertion_point(field_release:Client2Server.projName)
  
  return projname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client2Server::set_allocated_projname(std::string* projname) {
  if (projname != nullptr) {
    
  } else {
    
  }
  projname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projname);
  // @@protoc_insertion_point(field_set_allocated:Client2Server.projName)
}

// string varProgName = 15;
inline void Client2Server::clear_varprogname() {
  varprogname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client2Server::varprogname() const {
  // @@protoc_insertion_point(field_get:Client2Server.varProgName)
  return _internal_varprogname();
}
inline void Client2Server::set_varprogname(const std::string& value) {
  _internal_set_varprogname(value);
  // @@protoc_insertion_point(field_set:Client2Server.varProgName)
}
inline std::string* Client2Server::mutable_varprogname() {
  // @@protoc_insertion_point(field_mutable:Client2Server.varProgName)
  return _internal_mutable_varprogname();
}
inline const std::string& Client2Server::_internal_varprogname() const {
  return varprogname_.GetNoArena();
}
inline void Client2Server::_internal_set_varprogname(const std::string& value) {
  
  varprogname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client2Server::set_varprogname(std::string&& value) {
  
  varprogname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client2Server.varProgName)
}
inline void Client2Server::set_varprogname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  varprogname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client2Server.varProgName)
}
inline void Client2Server::set_varprogname(const char* value, size_t size) {
  
  varprogname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client2Server.varProgName)
}
inline std::string* Client2Server::_internal_mutable_varprogname() {
  
  return varprogname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client2Server::release_varprogname() {
  // @@protoc_insertion_point(field_release:Client2Server.varProgName)
  
  return varprogname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client2Server::set_allocated_varprogname(std::string* varprogname) {
  if (varprogname != nullptr) {
    
  } else {
    
  }
  varprogname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), varprogname);
  // @@protoc_insertion_point(field_set_allocated:Client2Server.varProgName)
}

// -------------------------------------------------------------------

// Server2Client

// .AxisPos axisPos = 1;
inline bool Server2Client::_internal_has_axispos() const {
  return this != internal_default_instance() && axispos_ != nullptr;
}
inline bool Server2Client::has_axispos() const {
  return _internal_has_axispos();
}
inline void Server2Client::clear_axispos() {
  if (GetArenaNoVirtual() == nullptr && axispos_ != nullptr) {
    delete axispos_;
  }
  axispos_ = nullptr;
}
inline const ::AxisPos& Server2Client::_internal_axispos() const {
  const ::AxisPos* p = axispos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AxisPos*>(
      &::_AxisPos_default_instance_);
}
inline const ::AxisPos& Server2Client::axispos() const {
  // @@protoc_insertion_point(field_get:Server2Client.axisPos)
  return _internal_axispos();
}
inline ::AxisPos* Server2Client::release_axispos() {
  // @@protoc_insertion_point(field_release:Server2Client.axisPos)
  
  ::AxisPos* temp = axispos_;
  axispos_ = nullptr;
  return temp;
}
inline ::AxisPos* Server2Client::_internal_mutable_axispos() {
  
  if (axispos_ == nullptr) {
    auto* p = CreateMaybeMessage<::AxisPos>(GetArenaNoVirtual());
    axispos_ = p;
  }
  return axispos_;
}
inline ::AxisPos* Server2Client::mutable_axispos() {
  // @@protoc_insertion_point(field_mutable:Server2Client.axisPos)
  return _internal_mutable_axispos();
}
inline void Server2Client::set_allocated_axispos(::AxisPos* axispos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete axispos_;
  }
  if (axispos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      axispos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axispos, submessage_arena);
    }
    
  } else {
    
  }
  axispos_ = axispos;
  // @@protoc_insertion_point(field_set_allocated:Server2Client.axisPos)
}

// .CartPos cartPos = 2;
inline bool Server2Client::_internal_has_cartpos() const {
  return this != internal_default_instance() && cartpos_ != nullptr;
}
inline bool Server2Client::has_cartpos() const {
  return _internal_has_cartpos();
}
inline void Server2Client::clear_cartpos() {
  if (GetArenaNoVirtual() == nullptr && cartpos_ != nullptr) {
    delete cartpos_;
  }
  cartpos_ = nullptr;
}
inline const ::CartPos& Server2Client::_internal_cartpos() const {
  const ::CartPos* p = cartpos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CartPos*>(
      &::_CartPos_default_instance_);
}
inline const ::CartPos& Server2Client::cartpos() const {
  // @@protoc_insertion_point(field_get:Server2Client.cartPos)
  return _internal_cartpos();
}
inline ::CartPos* Server2Client::release_cartpos() {
  // @@protoc_insertion_point(field_release:Server2Client.cartPos)
  
  ::CartPos* temp = cartpos_;
  cartpos_ = nullptr;
  return temp;
}
inline ::CartPos* Server2Client::_internal_mutable_cartpos() {
  
  if (cartpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartPos>(GetArenaNoVirtual());
    cartpos_ = p;
  }
  return cartpos_;
}
inline ::CartPos* Server2Client::mutable_cartpos() {
  // @@protoc_insertion_point(field_mutable:Server2Client.cartPos)
  return _internal_mutable_cartpos();
}
inline void Server2Client::set_allocated_cartpos(::CartPos* cartpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cartpos_;
  }
  if (cartpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cartpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cartpos, submessage_arena);
    }
    
  } else {
    
  }
  cartpos_ = cartpos;
  // @@protoc_insertion_point(field_set_allocated:Server2Client.cartPos)
}

// .DrivePos drivePos = 3;
inline bool Server2Client::_internal_has_drivepos() const {
  return this != internal_default_instance() && drivepos_ != nullptr;
}
inline bool Server2Client::has_drivepos() const {
  return _internal_has_drivepos();
}
inline void Server2Client::clear_drivepos() {
  if (GetArenaNoVirtual() == nullptr && drivepos_ != nullptr) {
    delete drivepos_;
  }
  drivepos_ = nullptr;
}
inline const ::DrivePos& Server2Client::_internal_drivepos() const {
  const ::DrivePos* p = drivepos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DrivePos*>(
      &::_DrivePos_default_instance_);
}
inline const ::DrivePos& Server2Client::drivepos() const {
  // @@protoc_insertion_point(field_get:Server2Client.drivePos)
  return _internal_drivepos();
}
inline ::DrivePos* Server2Client::release_drivepos() {
  // @@protoc_insertion_point(field_release:Server2Client.drivePos)
  
  ::DrivePos* temp = drivepos_;
  drivepos_ = nullptr;
  return temp;
}
inline ::DrivePos* Server2Client::_internal_mutable_drivepos() {
  
  if (drivepos_ == nullptr) {
    auto* p = CreateMaybeMessage<::DrivePos>(GetArenaNoVirtual());
    drivepos_ = p;
  }
  return drivepos_;
}
inline ::DrivePos* Server2Client::mutable_drivepos() {
  // @@protoc_insertion_point(field_mutable:Server2Client.drivePos)
  return _internal_mutable_drivepos();
}
inline void Server2Client::set_allocated_drivepos(::DrivePos* drivepos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete drivepos_;
  }
  if (drivepos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      drivepos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drivepos, submessage_arena);
    }
    
  } else {
    
  }
  drivepos_ = drivepos;
  // @@protoc_insertion_point(field_set_allocated:Server2Client.drivePos)
}

// int32 activeProg = 4;
inline void Server2Client::clear_activeprog() {
  activeprog_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server2Client::_internal_activeprog() const {
  return activeprog_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server2Client::activeprog() const {
  // @@protoc_insertion_point(field_get:Server2Client.activeProg)
  return _internal_activeprog();
}
inline void Server2Client::_internal_set_activeprog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activeprog_ = value;
}
inline void Server2Client::set_activeprog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activeprog(value);
  // @@protoc_insertion_point(field_set:Server2Client.activeProg)
}

// int32 runProg = 5;
inline void Server2Client::clear_runprog() {
  runprog_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server2Client::_internal_runprog() const {
  return runprog_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server2Client::runprog() const {
  // @@protoc_insertion_point(field_get:Server2Client.runProg)
  return _internal_runprog();
}
inline void Server2Client::_internal_set_runprog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runprog_ = value;
}
inline void Server2Client::set_runprog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runprog(value);
  // @@protoc_insertion_point(field_set:Server2Client.runProg)
}

// int32 hasReachSingularity = 6;
inline void Server2Client::clear_hasreachsingularity() {
  hasreachsingularity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server2Client::_internal_hasreachsingularity() const {
  return hasreachsingularity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server2Client::hasreachsingularity() const {
  // @@protoc_insertion_point(field_get:Server2Client.hasReachSingularity)
  return _internal_hasreachsingularity();
}
inline void Server2Client::_internal_set_hasreachsingularity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hasreachsingularity_ = value;
}
inline void Server2Client::set_hasreachsingularity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hasreachsingularity(value);
  // @@protoc_insertion_point(field_set:Server2Client.hasReachSingularity)
}

// repeated .InfoReport infoReport = 7;
inline int Server2Client::_internal_inforeport_size() const {
  return inforeport_.size();
}
inline int Server2Client::inforeport_size() const {
  return _internal_inforeport_size();
}
inline void Server2Client::clear_inforeport() {
  inforeport_.Clear();
}
inline ::InfoReport* Server2Client::mutable_inforeport(int index) {
  // @@protoc_insertion_point(field_mutable:Server2Client.infoReport)
  return inforeport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoReport >*
Server2Client::mutable_inforeport() {
  // @@protoc_insertion_point(field_mutable_list:Server2Client.infoReport)
  return &inforeport_;
}
inline const ::InfoReport& Server2Client::_internal_inforeport(int index) const {
  return inforeport_.Get(index);
}
inline const ::InfoReport& Server2Client::inforeport(int index) const {
  // @@protoc_insertion_point(field_get:Server2Client.infoReport)
  return _internal_inforeport(index);
}
inline ::InfoReport* Server2Client::_internal_add_inforeport() {
  return inforeport_.Add();
}
inline ::InfoReport* Server2Client::add_inforeport() {
  // @@protoc_insertion_point(field_add:Server2Client.infoReport)
  return _internal_add_inforeport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoReport >&
Server2Client::inforeport() const {
  // @@protoc_insertion_point(field_list:Server2Client.infoReport)
  return inforeport_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dataProto_2eproto
